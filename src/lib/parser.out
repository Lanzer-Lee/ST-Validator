Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    LBRACE
    MULTI_COMMENT
    RBRACE
    SHARP

Grammar

Rule 0     S' -> module
Rule 1     module -> program
Rule 2     module -> function_block_definition
Rule 3     module -> function_definition
Rule 4     module -> module function_block_definition
Rule 5     module -> module function_definition
Rule 6     module -> module program
Rule 7     program -> PROGRAM ID var_list BEGIN statement_list END_PROGRAM
Rule 8     program -> PROGRAM ID var_list statement_list END_PROGRAM
Rule 9     function_block_definition -> FUNCTION_BLOCK ID var_list BEGIN statement_list END_FUNCTION_BLOCK
Rule 10    function_block_definition -> FUNCTION_BLOCK ID var_list statement_list END_FUNCTION_BLOCK
Rule 11    function_definition -> FUNCTION ID COLON INT var_list statement_list END_FUNCTION
Rule 12    function_definition -> FUNCTION ID COLON BOOL var_list statement_list END_FUNCTION
Rule 13    function_definition -> FUNCTION ID COLON REAL var_list statement_list END_FUNCTION
Rule 14    function_definition -> FUNCTION ID COLON FLOAT var_list statement_list END_FUNCTION
Rule 15    function_definition -> FUNCTION ID COLON BYTE var_list statement_list END_FUNCTION
Rule 16    var_list -> var_input
Rule 17    var_list -> var_output
Rule 18    var_list -> var
Rule 19    var_list -> var_in_out
Rule 20    var_list -> var_global
Rule 21    var_list -> const
Rule 22    var_list -> var_list var_input
Rule 23    var_list -> var_list var_output
Rule 24    var_list -> var_list var
Rule 25    var_list -> var_list var_in_out
Rule 26    var_list -> var_list var_global
Rule 27    var_list -> var_list const
Rule 28    var_output -> VAR_OUTPUT declare_list END_VAR
Rule 29    var_input -> VAR_INPUT declare_list END_VAR
Rule 30    var_in_out -> VAR_IN_OUT declare_list END_VAR
Rule 31    var -> VAR declare_list END_VAR
Rule 32    const -> CONST declare_list END_CONST
Rule 33    var_global -> VAR_GLOBAL declare_list END_VAR
Rule 34    statement_list -> <empty>
Rule 35    statement_list -> statement_list assign_statement
Rule 36    statement_list -> statement_list while_statement
Rule 37    statement_list -> statement_list if_statement
Rule 38    statement_list -> statement_list for_statement
Rule 39    statement_list -> statement_list call_statement
Rule 40    statement_list -> statement_list case_statement
Rule 41    declare_list -> <empty>
Rule 42    declare_list -> declare_list declare_int_statement
Rule 43    declare_list -> declare_list declare_float_statement
Rule 44    declare_list -> declare_list declare_timer_statement
Rule 45    declare_timer_statement -> ID COLON TP SEMICOLON
Rule 46    declare_timer_statement -> ID COLON TON SEMICOLON
Rule 47    declare_timer_statement -> ID COLON TOF SEMICOLON
Rule 48    declare_timer_statement -> ID COLON RTC SEMICOLON
Rule 49    declare_int_statement -> ID COLON INT ASSIGN int_number SEMICOLON
Rule 50    declare_int_statement -> ID COLON BOOL ASSIGN int_number SEMICOLON
Rule 51    declare_int_statement -> ID COLON BYTE ASSIGN int_number SEMICOLON
Rule 52    declare_int_statement -> ID COLON TIME ASSIGN int_number SEMICOLON
Rule 53    declare_int_statement -> ID COLON DWORD ASSIGN int_number SEMICOLON
Rule 54    declare_int_statement -> ID COLON STRING ASSIGN string_number SEMICOLON
Rule 55    declare_int_statement -> ID COLON BYTE ASSIGN ID SEMICOLON
Rule 56    declare_int_statement -> ID COLON TIME ASSIGN ID SEMICOLON
Rule 57    declare_int_statement -> ID COLON INT SEMICOLON
Rule 58    declare_int_statement -> ID COLON BOOL SEMICOLON
Rule 59    declare_int_statement -> ID COLON BYTE SEMICOLON
Rule 60    declare_int_statement -> ID COLON TIME SEMICOLON
Rule 61    declare_int_statement -> ID COLON DWORD SEMICOLON
Rule 62    declare_int_statement -> ID COLON STRING SEMICOLON
Rule 63    declare_float_statement -> ID COLON FLOAT ASSIGN float_number SEMICOLON
Rule 64    declare_float_statement -> ID COLON FLOAT SEMICOLON
Rule 65    declare_float_statement -> ID COLON REAL ASSIGN float_number SEMICOLON
Rule 66    declare_float_statement -> ID COLON REAL SEMICOLON
Rule 67    case_statement -> CASE ID OF case_list END_CASE SEMICOLON
Rule 68    case_list -> expression COLON statement_list
Rule 69    case_list -> case_list expression COLON statement_list
Rule 70    if_statement -> IF expression THEN statement_list END_IF SEMICOLON
Rule 71    if_statement -> IF expression THEN statement_list elsif_statement_list END_IF SEMICOLON
Rule 72    if_statement -> IF expression THEN statement_list else_statement END_IF SEMICOLON
Rule 73    if_statement -> IF expression THEN statement_list elsif_statement_list else_statement END_IF SEMICOLON
Rule 74    elsif_statement_list -> elsif_statement
Rule 75    elsif_statement_list -> elsif_statement_list elsif_statement
Rule 76    elsif_statement -> ELSIF expression THEN statement_list
Rule 77    else_statement -> ELSE statement_list
Rule 78    for_statement -> FOR ID ASSIGN expression TO expression DO statement_list END_FOR SEMICOLON
Rule 79    for_statement -> FOR ID ASSIGN expression TO expression BY expression DO statement_list END_FOR SEMICOLON
Rule 80    while_statement -> WHILE expression DO statement_list END_WHILE
Rule 81    assign_statement -> ID ASSIGN expression SEMICOLON
Rule 82    expression -> ID
Rule 83    expression -> int_number
Rule 84    expression -> float_number
Rule 85    expression -> string_number
Rule 86    expression -> log
Rule 87    expression -> exp
Rule 88    expression -> call
Rule 89    expression -> eq_string
Rule 90    expression -> expression PLUS expression
Rule 91    expression -> expression MINUS expression
Rule 92    expression -> expression TIMES expression
Rule 93    expression -> expression DIVIDE expression
Rule 94    expression -> expression AND expression
Rule 95    expression -> expression OR expression
Rule 96    expression -> expression XOR expression
Rule 97    expression -> expression LT expression
Rule 98    expression -> expression GT expression
Rule 99    expression -> expression LE expression
Rule 100   expression -> expression GE expression
Rule 101   expression -> expression EQ expression
Rule 102   expression -> LPAREN expression RPAREN
Rule 103   expression -> NOT expression
Rule 104   expression -> MINUS expression
Rule 105   expression -> PLUS expression
Rule 106   call_statement -> ID argument RPAREN SEMICOLON
Rule 107   argument -> LPAREN
Rule 108   argument -> argument ID ASSIGN expression
Rule 109   argument -> argument COMMA ID ASSIGN expression
Rule 110   call -> ID DOT ID
Rule 111   eq_string -> EQ_STRING LPAREN ID COMMA ID RPAREN
Rule 112   exp -> EXP LPAREN expression RPAREN
Rule 113   log -> LOG LPAREN expression RPAREN
Rule 114   log -> LN LPAREN expression RPAREN
Rule 115   int_number -> INT_NUMBER
Rule 116   int_number -> TRUE
Rule 117   int_number -> FALSE
Rule 118   int_number -> ID
Rule 119   float_number -> FLOAT_NUMBER
Rule 120   float_number -> ID
Rule 121   string_number -> STRING_NUMBER

Terminals, with rules where they appear

AND                  : 94
ASSIGN               : 49 50 51 52 53 54 55 56 63 65 78 79 81 108 109
BEGIN                : 7 9
BOOL                 : 12 50 58
BY                   : 79
BYTE                 : 15 51 55 59
CASE                 : 67
COLON                : 11 12 13 14 15 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 68 69
COMMA                : 109 111
COMMENT              : 
CONST                : 32
DIVIDE               : 93
DO                   : 78 79 80
DOT                  : 110
DWORD                : 53 61
ELSE                 : 77
ELSIF                : 76
END_CASE             : 67
END_CONST            : 32
END_FOR              : 78 79
END_FUNCTION         : 11 12 13 14 15
END_FUNCTION_BLOCK   : 9 10
END_IF               : 70 71 72 73
END_PROGRAM          : 7 8
END_VAR              : 28 29 30 31 33
END_WHILE            : 80
EQ                   : 101
EQ_STRING            : 111
EXP                  : 112
FALSE                : 117
FLOAT                : 14 63 64
FLOAT_NUMBER         : 119
FOR                  : 78 79
FUNCTION             : 11 12 13 14 15
FUNCTION_BLOCK       : 9 10
GE                   : 100
GT                   : 98
ID                   : 7 8 9 10 11 12 13 14 15 45 46 47 48 49 50 51 52 53 54 55 55 56 56 57 58 59 60 61 62 63 64 65 66 67 78 79 81 82 106 108 109 110 110 111 111 118 120
IF                   : 70 71 72 73
INT                  : 11 49 57
INT_NUMBER           : 115
LBRACE               : 
LE                   : 99
LN                   : 114
LOG                  : 113
LPAREN               : 102 107 111 112 113 114
LT                   : 97
MINUS                : 91 104
MULTI_COMMENT        : 
NOT                  : 103
OF                   : 67
OR                   : 95
PLUS                 : 90 105
PROGRAM              : 7 8
RBRACE               : 
REAL                 : 13 65 66
RPAREN               : 102 106 111 112 113 114
RTC                  : 48
SEMICOLON            : 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 70 71 72 73 78 79 81 106
SHARP                : 
STRING               : 54 62
STRING_NUMBER        : 121
THEN                 : 70 71 72 73 76
TIME                 : 52 56 60
TIMES                : 92
TO                   : 78 79
TOF                  : 47
TON                  : 46
TP                   : 45
TRUE                 : 116
VAR                  : 31
VAR_GLOBAL           : 33
VAR_INPUT            : 29
VAR_IN_OUT           : 30
VAR_OUTPUT           : 28
WHILE                : 80
XOR                  : 96
error                : 

Nonterminals, with rules where they appear

argument             : 106 108 109
assign_statement     : 35
call                 : 88
call_statement       : 39
case_list            : 67 69
case_statement       : 40
const                : 21 27
declare_float_statement : 43
declare_int_statement : 42
declare_list         : 28 29 30 31 32 33 42 43 44
declare_timer_statement : 44
else_statement       : 72 73
elsif_statement      : 74 75
elsif_statement_list : 71 73 75
eq_string            : 89
exp                  : 87
expression           : 68 69 70 71 72 73 76 78 78 79 79 79 80 81 90 90 91 91 92 92 93 93 94 94 95 95 96 96 97 97 98 98 99 99 100 100 101 101 102 103 104 105 108 109 112 113 114
float_number         : 63 65 84
for_statement        : 38
function_block_definition : 2 4
function_definition  : 3 5
if_statement         : 37
int_number           : 49 50 51 52 53 83
log                  : 86
module               : 4 5 6 0
program              : 1 6
statement_list       : 7 8 9 10 11 12 13 14 15 35 36 37 38 39 40 68 69 70 71 72 73 76 77 78 79 80
string_number        : 54 85
var                  : 18 24
var_global           : 20 26
var_in_out           : 19 25
var_input            : 16 22
var_list             : 7 8 9 10 11 12 13 14 15 22 23 24 25 26 27
var_output           : 17 23
while_statement      : 36

Parsing method: LALR

state 0

    (0) S' -> . module
    (1) module -> . program
    (2) module -> . function_block_definition
    (3) module -> . function_definition
    (4) module -> . module function_block_definition
    (5) module -> . module function_definition
    (6) module -> . module program
    (7) program -> . PROGRAM ID var_list BEGIN statement_list END_PROGRAM
    (8) program -> . PROGRAM ID var_list statement_list END_PROGRAM
    (9) function_block_definition -> . FUNCTION_BLOCK ID var_list BEGIN statement_list END_FUNCTION_BLOCK
    (10) function_block_definition -> . FUNCTION_BLOCK ID var_list statement_list END_FUNCTION_BLOCK
    (11) function_definition -> . FUNCTION ID COLON INT var_list statement_list END_FUNCTION
    (12) function_definition -> . FUNCTION ID COLON BOOL var_list statement_list END_FUNCTION
    (13) function_definition -> . FUNCTION ID COLON REAL var_list statement_list END_FUNCTION
    (14) function_definition -> . FUNCTION ID COLON FLOAT var_list statement_list END_FUNCTION
    (15) function_definition -> . FUNCTION ID COLON BYTE var_list statement_list END_FUNCTION

    PROGRAM         shift and go to state 5
    FUNCTION_BLOCK  shift and go to state 6
    FUNCTION        shift and go to state 7

    module                         shift and go to state 1
    program                        shift and go to state 2
    function_block_definition      shift and go to state 3
    function_definition            shift and go to state 4

state 1

    (0) S' -> module .
    (4) module -> module . function_block_definition
    (5) module -> module . function_definition
    (6) module -> module . program
    (9) function_block_definition -> . FUNCTION_BLOCK ID var_list BEGIN statement_list END_FUNCTION_BLOCK
    (10) function_block_definition -> . FUNCTION_BLOCK ID var_list statement_list END_FUNCTION_BLOCK
    (11) function_definition -> . FUNCTION ID COLON INT var_list statement_list END_FUNCTION
    (12) function_definition -> . FUNCTION ID COLON BOOL var_list statement_list END_FUNCTION
    (13) function_definition -> . FUNCTION ID COLON REAL var_list statement_list END_FUNCTION
    (14) function_definition -> . FUNCTION ID COLON FLOAT var_list statement_list END_FUNCTION
    (15) function_definition -> . FUNCTION ID COLON BYTE var_list statement_list END_FUNCTION
    (7) program -> . PROGRAM ID var_list BEGIN statement_list END_PROGRAM
    (8) program -> . PROGRAM ID var_list statement_list END_PROGRAM

    FUNCTION_BLOCK  shift and go to state 6
    FUNCTION        shift and go to state 7
    PROGRAM         shift and go to state 5

    function_block_definition      shift and go to state 8
    function_definition            shift and go to state 9
    program                        shift and go to state 10

state 2

    (1) module -> program .

    FUNCTION_BLOCK  reduce using rule 1 (module -> program .)
    FUNCTION        reduce using rule 1 (module -> program .)
    PROGRAM         reduce using rule 1 (module -> program .)
    $end            reduce using rule 1 (module -> program .)


state 3

    (2) module -> function_block_definition .

    FUNCTION_BLOCK  reduce using rule 2 (module -> function_block_definition .)
    FUNCTION        reduce using rule 2 (module -> function_block_definition .)
    PROGRAM         reduce using rule 2 (module -> function_block_definition .)
    $end            reduce using rule 2 (module -> function_block_definition .)


state 4

    (3) module -> function_definition .

    FUNCTION_BLOCK  reduce using rule 3 (module -> function_definition .)
    FUNCTION        reduce using rule 3 (module -> function_definition .)
    PROGRAM         reduce using rule 3 (module -> function_definition .)
    $end            reduce using rule 3 (module -> function_definition .)


state 5

    (7) program -> PROGRAM . ID var_list BEGIN statement_list END_PROGRAM
    (8) program -> PROGRAM . ID var_list statement_list END_PROGRAM

    ID              shift and go to state 11


state 6

    (9) function_block_definition -> FUNCTION_BLOCK . ID var_list BEGIN statement_list END_FUNCTION_BLOCK
    (10) function_block_definition -> FUNCTION_BLOCK . ID var_list statement_list END_FUNCTION_BLOCK

    ID              shift and go to state 12


state 7

    (11) function_definition -> FUNCTION . ID COLON INT var_list statement_list END_FUNCTION
    (12) function_definition -> FUNCTION . ID COLON BOOL var_list statement_list END_FUNCTION
    (13) function_definition -> FUNCTION . ID COLON REAL var_list statement_list END_FUNCTION
    (14) function_definition -> FUNCTION . ID COLON FLOAT var_list statement_list END_FUNCTION
    (15) function_definition -> FUNCTION . ID COLON BYTE var_list statement_list END_FUNCTION

    ID              shift and go to state 13


state 8

    (4) module -> module function_block_definition .

    FUNCTION_BLOCK  reduce using rule 4 (module -> module function_block_definition .)
    FUNCTION        reduce using rule 4 (module -> module function_block_definition .)
    PROGRAM         reduce using rule 4 (module -> module function_block_definition .)
    $end            reduce using rule 4 (module -> module function_block_definition .)


state 9

    (5) module -> module function_definition .

    FUNCTION_BLOCK  reduce using rule 5 (module -> module function_definition .)
    FUNCTION        reduce using rule 5 (module -> module function_definition .)
    PROGRAM         reduce using rule 5 (module -> module function_definition .)
    $end            reduce using rule 5 (module -> module function_definition .)


state 10

    (6) module -> module program .

    FUNCTION_BLOCK  reduce using rule 6 (module -> module program .)
    FUNCTION        reduce using rule 6 (module -> module program .)
    PROGRAM         reduce using rule 6 (module -> module program .)
    $end            reduce using rule 6 (module -> module program .)


state 11

    (7) program -> PROGRAM ID . var_list BEGIN statement_list END_PROGRAM
    (8) program -> PROGRAM ID . var_list statement_list END_PROGRAM
    (16) var_list -> . var_input
    (17) var_list -> . var_output
    (18) var_list -> . var
    (19) var_list -> . var_in_out
    (20) var_list -> . var_global
    (21) var_list -> . const
    (22) var_list -> . var_list var_input
    (23) var_list -> . var_list var_output
    (24) var_list -> . var_list var
    (25) var_list -> . var_list var_in_out
    (26) var_list -> . var_list var_global
    (27) var_list -> . var_list const
    (29) var_input -> . VAR_INPUT declare_list END_VAR
    (28) var_output -> . VAR_OUTPUT declare_list END_VAR
    (31) var -> . VAR declare_list END_VAR
    (30) var_in_out -> . VAR_IN_OUT declare_list END_VAR
    (33) var_global -> . VAR_GLOBAL declare_list END_VAR
    (32) const -> . CONST declare_list END_CONST

    VAR_INPUT       shift and go to state 21
    VAR_OUTPUT      shift and go to state 22
    VAR             shift and go to state 23
    VAR_IN_OUT      shift and go to state 24
    VAR_GLOBAL      shift and go to state 25
    CONST           shift and go to state 26

    var_list                       shift and go to state 14
    var_input                      shift and go to state 15
    var_output                     shift and go to state 16
    var                            shift and go to state 17
    var_in_out                     shift and go to state 18
    var_global                     shift and go to state 19
    const                          shift and go to state 20

state 12

    (9) function_block_definition -> FUNCTION_BLOCK ID . var_list BEGIN statement_list END_FUNCTION_BLOCK
    (10) function_block_definition -> FUNCTION_BLOCK ID . var_list statement_list END_FUNCTION_BLOCK
    (16) var_list -> . var_input
    (17) var_list -> . var_output
    (18) var_list -> . var
    (19) var_list -> . var_in_out
    (20) var_list -> . var_global
    (21) var_list -> . const
    (22) var_list -> . var_list var_input
    (23) var_list -> . var_list var_output
    (24) var_list -> . var_list var
    (25) var_list -> . var_list var_in_out
    (26) var_list -> . var_list var_global
    (27) var_list -> . var_list const
    (29) var_input -> . VAR_INPUT declare_list END_VAR
    (28) var_output -> . VAR_OUTPUT declare_list END_VAR
    (31) var -> . VAR declare_list END_VAR
    (30) var_in_out -> . VAR_IN_OUT declare_list END_VAR
    (33) var_global -> . VAR_GLOBAL declare_list END_VAR
    (32) const -> . CONST declare_list END_CONST

    VAR_INPUT       shift and go to state 21
    VAR_OUTPUT      shift and go to state 22
    VAR             shift and go to state 23
    VAR_IN_OUT      shift and go to state 24
    VAR_GLOBAL      shift and go to state 25
    CONST           shift and go to state 26

    var_list                       shift and go to state 27
    var_input                      shift and go to state 15
    var_output                     shift and go to state 16
    var                            shift and go to state 17
    var_in_out                     shift and go to state 18
    var_global                     shift and go to state 19
    const                          shift and go to state 20

state 13

    (11) function_definition -> FUNCTION ID . COLON INT var_list statement_list END_FUNCTION
    (12) function_definition -> FUNCTION ID . COLON BOOL var_list statement_list END_FUNCTION
    (13) function_definition -> FUNCTION ID . COLON REAL var_list statement_list END_FUNCTION
    (14) function_definition -> FUNCTION ID . COLON FLOAT var_list statement_list END_FUNCTION
    (15) function_definition -> FUNCTION ID . COLON BYTE var_list statement_list END_FUNCTION

    COLON           shift and go to state 28


state 14

    (7) program -> PROGRAM ID var_list . BEGIN statement_list END_PROGRAM
    (8) program -> PROGRAM ID var_list . statement_list END_PROGRAM
    (22) var_list -> var_list . var_input
    (23) var_list -> var_list . var_output
    (24) var_list -> var_list . var
    (25) var_list -> var_list . var_in_out
    (26) var_list -> var_list . var_global
    (27) var_list -> var_list . const
    (34) statement_list -> .
    (35) statement_list -> . statement_list assign_statement
    (36) statement_list -> . statement_list while_statement
    (37) statement_list -> . statement_list if_statement
    (38) statement_list -> . statement_list for_statement
    (39) statement_list -> . statement_list call_statement
    (40) statement_list -> . statement_list case_statement
    (29) var_input -> . VAR_INPUT declare_list END_VAR
    (28) var_output -> . VAR_OUTPUT declare_list END_VAR
    (31) var -> . VAR declare_list END_VAR
    (30) var_in_out -> . VAR_IN_OUT declare_list END_VAR
    (33) var_global -> . VAR_GLOBAL declare_list END_VAR
    (32) const -> . CONST declare_list END_CONST

    BEGIN           shift and go to state 29
    END_PROGRAM     reduce using rule 34 (statement_list -> .)
    ID              reduce using rule 34 (statement_list -> .)
    WHILE           reduce using rule 34 (statement_list -> .)
    IF              reduce using rule 34 (statement_list -> .)
    FOR             reduce using rule 34 (statement_list -> .)
    CASE            reduce using rule 34 (statement_list -> .)
    VAR_INPUT       shift and go to state 21
    VAR_OUTPUT      shift and go to state 22
    VAR             shift and go to state 23
    VAR_IN_OUT      shift and go to state 24
    VAR_GLOBAL      shift and go to state 25
    CONST           shift and go to state 26

    statement_list                 shift and go to state 30
    var_input                      shift and go to state 31
    var_output                     shift and go to state 32
    var                            shift and go to state 33
    var_in_out                     shift and go to state 34
    var_global                     shift and go to state 35
    const                          shift and go to state 36

state 15

    (16) var_list -> var_input .

    BEGIN           reduce using rule 16 (var_list -> var_input .)
    VAR_INPUT       reduce using rule 16 (var_list -> var_input .)
    VAR_OUTPUT      reduce using rule 16 (var_list -> var_input .)
    VAR             reduce using rule 16 (var_list -> var_input .)
    VAR_IN_OUT      reduce using rule 16 (var_list -> var_input .)
    VAR_GLOBAL      reduce using rule 16 (var_list -> var_input .)
    CONST           reduce using rule 16 (var_list -> var_input .)
    END_PROGRAM     reduce using rule 16 (var_list -> var_input .)
    ID              reduce using rule 16 (var_list -> var_input .)
    WHILE           reduce using rule 16 (var_list -> var_input .)
    IF              reduce using rule 16 (var_list -> var_input .)
    FOR             reduce using rule 16 (var_list -> var_input .)
    CASE            reduce using rule 16 (var_list -> var_input .)
    END_FUNCTION_BLOCK reduce using rule 16 (var_list -> var_input .)
    END_FUNCTION    reduce using rule 16 (var_list -> var_input .)


state 16

    (17) var_list -> var_output .

    BEGIN           reduce using rule 17 (var_list -> var_output .)
    VAR_INPUT       reduce using rule 17 (var_list -> var_output .)
    VAR_OUTPUT      reduce using rule 17 (var_list -> var_output .)
    VAR             reduce using rule 17 (var_list -> var_output .)
    VAR_IN_OUT      reduce using rule 17 (var_list -> var_output .)
    VAR_GLOBAL      reduce using rule 17 (var_list -> var_output .)
    CONST           reduce using rule 17 (var_list -> var_output .)
    END_PROGRAM     reduce using rule 17 (var_list -> var_output .)
    ID              reduce using rule 17 (var_list -> var_output .)
    WHILE           reduce using rule 17 (var_list -> var_output .)
    IF              reduce using rule 17 (var_list -> var_output .)
    FOR             reduce using rule 17 (var_list -> var_output .)
    CASE            reduce using rule 17 (var_list -> var_output .)
    END_FUNCTION_BLOCK reduce using rule 17 (var_list -> var_output .)
    END_FUNCTION    reduce using rule 17 (var_list -> var_output .)


state 17

    (18) var_list -> var .

    BEGIN           reduce using rule 18 (var_list -> var .)
    VAR_INPUT       reduce using rule 18 (var_list -> var .)
    VAR_OUTPUT      reduce using rule 18 (var_list -> var .)
    VAR             reduce using rule 18 (var_list -> var .)
    VAR_IN_OUT      reduce using rule 18 (var_list -> var .)
    VAR_GLOBAL      reduce using rule 18 (var_list -> var .)
    CONST           reduce using rule 18 (var_list -> var .)
    END_PROGRAM     reduce using rule 18 (var_list -> var .)
    ID              reduce using rule 18 (var_list -> var .)
    WHILE           reduce using rule 18 (var_list -> var .)
    IF              reduce using rule 18 (var_list -> var .)
    FOR             reduce using rule 18 (var_list -> var .)
    CASE            reduce using rule 18 (var_list -> var .)
    END_FUNCTION_BLOCK reduce using rule 18 (var_list -> var .)
    END_FUNCTION    reduce using rule 18 (var_list -> var .)


state 18

    (19) var_list -> var_in_out .

    BEGIN           reduce using rule 19 (var_list -> var_in_out .)
    VAR_INPUT       reduce using rule 19 (var_list -> var_in_out .)
    VAR_OUTPUT      reduce using rule 19 (var_list -> var_in_out .)
    VAR             reduce using rule 19 (var_list -> var_in_out .)
    VAR_IN_OUT      reduce using rule 19 (var_list -> var_in_out .)
    VAR_GLOBAL      reduce using rule 19 (var_list -> var_in_out .)
    CONST           reduce using rule 19 (var_list -> var_in_out .)
    END_PROGRAM     reduce using rule 19 (var_list -> var_in_out .)
    ID              reduce using rule 19 (var_list -> var_in_out .)
    WHILE           reduce using rule 19 (var_list -> var_in_out .)
    IF              reduce using rule 19 (var_list -> var_in_out .)
    FOR             reduce using rule 19 (var_list -> var_in_out .)
    CASE            reduce using rule 19 (var_list -> var_in_out .)
    END_FUNCTION_BLOCK reduce using rule 19 (var_list -> var_in_out .)
    END_FUNCTION    reduce using rule 19 (var_list -> var_in_out .)


state 19

    (20) var_list -> var_global .

    BEGIN           reduce using rule 20 (var_list -> var_global .)
    VAR_INPUT       reduce using rule 20 (var_list -> var_global .)
    VAR_OUTPUT      reduce using rule 20 (var_list -> var_global .)
    VAR             reduce using rule 20 (var_list -> var_global .)
    VAR_IN_OUT      reduce using rule 20 (var_list -> var_global .)
    VAR_GLOBAL      reduce using rule 20 (var_list -> var_global .)
    CONST           reduce using rule 20 (var_list -> var_global .)
    END_PROGRAM     reduce using rule 20 (var_list -> var_global .)
    ID              reduce using rule 20 (var_list -> var_global .)
    WHILE           reduce using rule 20 (var_list -> var_global .)
    IF              reduce using rule 20 (var_list -> var_global .)
    FOR             reduce using rule 20 (var_list -> var_global .)
    CASE            reduce using rule 20 (var_list -> var_global .)
    END_FUNCTION_BLOCK reduce using rule 20 (var_list -> var_global .)
    END_FUNCTION    reduce using rule 20 (var_list -> var_global .)


state 20

    (21) var_list -> const .

    BEGIN           reduce using rule 21 (var_list -> const .)
    VAR_INPUT       reduce using rule 21 (var_list -> const .)
    VAR_OUTPUT      reduce using rule 21 (var_list -> const .)
    VAR             reduce using rule 21 (var_list -> const .)
    VAR_IN_OUT      reduce using rule 21 (var_list -> const .)
    VAR_GLOBAL      reduce using rule 21 (var_list -> const .)
    CONST           reduce using rule 21 (var_list -> const .)
    END_PROGRAM     reduce using rule 21 (var_list -> const .)
    ID              reduce using rule 21 (var_list -> const .)
    WHILE           reduce using rule 21 (var_list -> const .)
    IF              reduce using rule 21 (var_list -> const .)
    FOR             reduce using rule 21 (var_list -> const .)
    CASE            reduce using rule 21 (var_list -> const .)
    END_FUNCTION_BLOCK reduce using rule 21 (var_list -> const .)
    END_FUNCTION    reduce using rule 21 (var_list -> const .)


state 21

    (29) var_input -> VAR_INPUT . declare_list END_VAR
    (41) declare_list -> .
    (42) declare_list -> . declare_list declare_int_statement
    (43) declare_list -> . declare_list declare_float_statement
    (44) declare_list -> . declare_list declare_timer_statement

    END_VAR         reduce using rule 41 (declare_list -> .)
    ID              reduce using rule 41 (declare_list -> .)

    declare_list                   shift and go to state 37

state 22

    (28) var_output -> VAR_OUTPUT . declare_list END_VAR
    (41) declare_list -> .
    (42) declare_list -> . declare_list declare_int_statement
    (43) declare_list -> . declare_list declare_float_statement
    (44) declare_list -> . declare_list declare_timer_statement

    END_VAR         reduce using rule 41 (declare_list -> .)
    ID              reduce using rule 41 (declare_list -> .)

    declare_list                   shift and go to state 38

state 23

    (31) var -> VAR . declare_list END_VAR
    (41) declare_list -> .
    (42) declare_list -> . declare_list declare_int_statement
    (43) declare_list -> . declare_list declare_float_statement
    (44) declare_list -> . declare_list declare_timer_statement

    END_VAR         reduce using rule 41 (declare_list -> .)
    ID              reduce using rule 41 (declare_list -> .)

    declare_list                   shift and go to state 39

state 24

    (30) var_in_out -> VAR_IN_OUT . declare_list END_VAR
    (41) declare_list -> .
    (42) declare_list -> . declare_list declare_int_statement
    (43) declare_list -> . declare_list declare_float_statement
    (44) declare_list -> . declare_list declare_timer_statement

    END_VAR         reduce using rule 41 (declare_list -> .)
    ID              reduce using rule 41 (declare_list -> .)

    declare_list                   shift and go to state 40

state 25

    (33) var_global -> VAR_GLOBAL . declare_list END_VAR
    (41) declare_list -> .
    (42) declare_list -> . declare_list declare_int_statement
    (43) declare_list -> . declare_list declare_float_statement
    (44) declare_list -> . declare_list declare_timer_statement

    END_VAR         reduce using rule 41 (declare_list -> .)
    ID              reduce using rule 41 (declare_list -> .)

    declare_list                   shift and go to state 41

state 26

    (32) const -> CONST . declare_list END_CONST
    (41) declare_list -> .
    (42) declare_list -> . declare_list declare_int_statement
    (43) declare_list -> . declare_list declare_float_statement
    (44) declare_list -> . declare_list declare_timer_statement

    END_CONST       reduce using rule 41 (declare_list -> .)
    ID              reduce using rule 41 (declare_list -> .)

    declare_list                   shift and go to state 42

state 27

    (9) function_block_definition -> FUNCTION_BLOCK ID var_list . BEGIN statement_list END_FUNCTION_BLOCK
    (10) function_block_definition -> FUNCTION_BLOCK ID var_list . statement_list END_FUNCTION_BLOCK
    (22) var_list -> var_list . var_input
    (23) var_list -> var_list . var_output
    (24) var_list -> var_list . var
    (25) var_list -> var_list . var_in_out
    (26) var_list -> var_list . var_global
    (27) var_list -> var_list . const
    (34) statement_list -> .
    (35) statement_list -> . statement_list assign_statement
    (36) statement_list -> . statement_list while_statement
    (37) statement_list -> . statement_list if_statement
    (38) statement_list -> . statement_list for_statement
    (39) statement_list -> . statement_list call_statement
    (40) statement_list -> . statement_list case_statement
    (29) var_input -> . VAR_INPUT declare_list END_VAR
    (28) var_output -> . VAR_OUTPUT declare_list END_VAR
    (31) var -> . VAR declare_list END_VAR
    (30) var_in_out -> . VAR_IN_OUT declare_list END_VAR
    (33) var_global -> . VAR_GLOBAL declare_list END_VAR
    (32) const -> . CONST declare_list END_CONST

    BEGIN           shift and go to state 43
    END_FUNCTION_BLOCK reduce using rule 34 (statement_list -> .)
    ID              reduce using rule 34 (statement_list -> .)
    WHILE           reduce using rule 34 (statement_list -> .)
    IF              reduce using rule 34 (statement_list -> .)
    FOR             reduce using rule 34 (statement_list -> .)
    CASE            reduce using rule 34 (statement_list -> .)
    VAR_INPUT       shift and go to state 21
    VAR_OUTPUT      shift and go to state 22
    VAR             shift and go to state 23
    VAR_IN_OUT      shift and go to state 24
    VAR_GLOBAL      shift and go to state 25
    CONST           shift and go to state 26

    statement_list                 shift and go to state 44
    var_input                      shift and go to state 31
    var_output                     shift and go to state 32
    var                            shift and go to state 33
    var_in_out                     shift and go to state 34
    var_global                     shift and go to state 35
    const                          shift and go to state 36

state 28

    (11) function_definition -> FUNCTION ID COLON . INT var_list statement_list END_FUNCTION
    (12) function_definition -> FUNCTION ID COLON . BOOL var_list statement_list END_FUNCTION
    (13) function_definition -> FUNCTION ID COLON . REAL var_list statement_list END_FUNCTION
    (14) function_definition -> FUNCTION ID COLON . FLOAT var_list statement_list END_FUNCTION
    (15) function_definition -> FUNCTION ID COLON . BYTE var_list statement_list END_FUNCTION

    INT             shift and go to state 45
    BOOL            shift and go to state 46
    REAL            shift and go to state 47
    FLOAT           shift and go to state 48
    BYTE            shift and go to state 49


state 29

    (7) program -> PROGRAM ID var_list BEGIN . statement_list END_PROGRAM
    (34) statement_list -> .
    (35) statement_list -> . statement_list assign_statement
    (36) statement_list -> . statement_list while_statement
    (37) statement_list -> . statement_list if_statement
    (38) statement_list -> . statement_list for_statement
    (39) statement_list -> . statement_list call_statement
    (40) statement_list -> . statement_list case_statement

    END_PROGRAM     reduce using rule 34 (statement_list -> .)
    ID              reduce using rule 34 (statement_list -> .)
    WHILE           reduce using rule 34 (statement_list -> .)
    IF              reduce using rule 34 (statement_list -> .)
    FOR             reduce using rule 34 (statement_list -> .)
    CASE            reduce using rule 34 (statement_list -> .)

    statement_list                 shift and go to state 50

state 30

    (8) program -> PROGRAM ID var_list statement_list . END_PROGRAM
    (35) statement_list -> statement_list . assign_statement
    (36) statement_list -> statement_list . while_statement
    (37) statement_list -> statement_list . if_statement
    (38) statement_list -> statement_list . for_statement
    (39) statement_list -> statement_list . call_statement
    (40) statement_list -> statement_list . case_statement
    (81) assign_statement -> . ID ASSIGN expression SEMICOLON
    (80) while_statement -> . WHILE expression DO statement_list END_WHILE
    (70) if_statement -> . IF expression THEN statement_list END_IF SEMICOLON
    (71) if_statement -> . IF expression THEN statement_list elsif_statement_list END_IF SEMICOLON
    (72) if_statement -> . IF expression THEN statement_list else_statement END_IF SEMICOLON
    (73) if_statement -> . IF expression THEN statement_list elsif_statement_list else_statement END_IF SEMICOLON
    (78) for_statement -> . FOR ID ASSIGN expression TO expression DO statement_list END_FOR SEMICOLON
    (79) for_statement -> . FOR ID ASSIGN expression TO expression BY expression DO statement_list END_FOR SEMICOLON
    (106) call_statement -> . ID argument RPAREN SEMICOLON
    (67) case_statement -> . CASE ID OF case_list END_CASE SEMICOLON

    END_PROGRAM     shift and go to state 52
    ID              shift and go to state 51
    WHILE           shift and go to state 59
    IF              shift and go to state 60
    FOR             shift and go to state 61
    CASE            shift and go to state 62

    assign_statement               shift and go to state 53
    while_statement                shift and go to state 54
    if_statement                   shift and go to state 55
    for_statement                  shift and go to state 56
    call_statement                 shift and go to state 57
    case_statement                 shift and go to state 58

state 31

    (22) var_list -> var_list var_input .

    BEGIN           reduce using rule 22 (var_list -> var_list var_input .)
    VAR_INPUT       reduce using rule 22 (var_list -> var_list var_input .)
    VAR_OUTPUT      reduce using rule 22 (var_list -> var_list var_input .)
    VAR             reduce using rule 22 (var_list -> var_list var_input .)
    VAR_IN_OUT      reduce using rule 22 (var_list -> var_list var_input .)
    VAR_GLOBAL      reduce using rule 22 (var_list -> var_list var_input .)
    CONST           reduce using rule 22 (var_list -> var_list var_input .)
    END_PROGRAM     reduce using rule 22 (var_list -> var_list var_input .)
    ID              reduce using rule 22 (var_list -> var_list var_input .)
    WHILE           reduce using rule 22 (var_list -> var_list var_input .)
    IF              reduce using rule 22 (var_list -> var_list var_input .)
    FOR             reduce using rule 22 (var_list -> var_list var_input .)
    CASE            reduce using rule 22 (var_list -> var_list var_input .)
    END_FUNCTION_BLOCK reduce using rule 22 (var_list -> var_list var_input .)
    END_FUNCTION    reduce using rule 22 (var_list -> var_list var_input .)


state 32

    (23) var_list -> var_list var_output .

    BEGIN           reduce using rule 23 (var_list -> var_list var_output .)
    VAR_INPUT       reduce using rule 23 (var_list -> var_list var_output .)
    VAR_OUTPUT      reduce using rule 23 (var_list -> var_list var_output .)
    VAR             reduce using rule 23 (var_list -> var_list var_output .)
    VAR_IN_OUT      reduce using rule 23 (var_list -> var_list var_output .)
    VAR_GLOBAL      reduce using rule 23 (var_list -> var_list var_output .)
    CONST           reduce using rule 23 (var_list -> var_list var_output .)
    END_PROGRAM     reduce using rule 23 (var_list -> var_list var_output .)
    ID              reduce using rule 23 (var_list -> var_list var_output .)
    WHILE           reduce using rule 23 (var_list -> var_list var_output .)
    IF              reduce using rule 23 (var_list -> var_list var_output .)
    FOR             reduce using rule 23 (var_list -> var_list var_output .)
    CASE            reduce using rule 23 (var_list -> var_list var_output .)
    END_FUNCTION_BLOCK reduce using rule 23 (var_list -> var_list var_output .)
    END_FUNCTION    reduce using rule 23 (var_list -> var_list var_output .)


state 33

    (24) var_list -> var_list var .

    BEGIN           reduce using rule 24 (var_list -> var_list var .)
    VAR_INPUT       reduce using rule 24 (var_list -> var_list var .)
    VAR_OUTPUT      reduce using rule 24 (var_list -> var_list var .)
    VAR             reduce using rule 24 (var_list -> var_list var .)
    VAR_IN_OUT      reduce using rule 24 (var_list -> var_list var .)
    VAR_GLOBAL      reduce using rule 24 (var_list -> var_list var .)
    CONST           reduce using rule 24 (var_list -> var_list var .)
    END_PROGRAM     reduce using rule 24 (var_list -> var_list var .)
    ID              reduce using rule 24 (var_list -> var_list var .)
    WHILE           reduce using rule 24 (var_list -> var_list var .)
    IF              reduce using rule 24 (var_list -> var_list var .)
    FOR             reduce using rule 24 (var_list -> var_list var .)
    CASE            reduce using rule 24 (var_list -> var_list var .)
    END_FUNCTION_BLOCK reduce using rule 24 (var_list -> var_list var .)
    END_FUNCTION    reduce using rule 24 (var_list -> var_list var .)


state 34

    (25) var_list -> var_list var_in_out .

    BEGIN           reduce using rule 25 (var_list -> var_list var_in_out .)
    VAR_INPUT       reduce using rule 25 (var_list -> var_list var_in_out .)
    VAR_OUTPUT      reduce using rule 25 (var_list -> var_list var_in_out .)
    VAR             reduce using rule 25 (var_list -> var_list var_in_out .)
    VAR_IN_OUT      reduce using rule 25 (var_list -> var_list var_in_out .)
    VAR_GLOBAL      reduce using rule 25 (var_list -> var_list var_in_out .)
    CONST           reduce using rule 25 (var_list -> var_list var_in_out .)
    END_PROGRAM     reduce using rule 25 (var_list -> var_list var_in_out .)
    ID              reduce using rule 25 (var_list -> var_list var_in_out .)
    WHILE           reduce using rule 25 (var_list -> var_list var_in_out .)
    IF              reduce using rule 25 (var_list -> var_list var_in_out .)
    FOR             reduce using rule 25 (var_list -> var_list var_in_out .)
    CASE            reduce using rule 25 (var_list -> var_list var_in_out .)
    END_FUNCTION_BLOCK reduce using rule 25 (var_list -> var_list var_in_out .)
    END_FUNCTION    reduce using rule 25 (var_list -> var_list var_in_out .)


state 35

    (26) var_list -> var_list var_global .

    BEGIN           reduce using rule 26 (var_list -> var_list var_global .)
    VAR_INPUT       reduce using rule 26 (var_list -> var_list var_global .)
    VAR_OUTPUT      reduce using rule 26 (var_list -> var_list var_global .)
    VAR             reduce using rule 26 (var_list -> var_list var_global .)
    VAR_IN_OUT      reduce using rule 26 (var_list -> var_list var_global .)
    VAR_GLOBAL      reduce using rule 26 (var_list -> var_list var_global .)
    CONST           reduce using rule 26 (var_list -> var_list var_global .)
    END_PROGRAM     reduce using rule 26 (var_list -> var_list var_global .)
    ID              reduce using rule 26 (var_list -> var_list var_global .)
    WHILE           reduce using rule 26 (var_list -> var_list var_global .)
    IF              reduce using rule 26 (var_list -> var_list var_global .)
    FOR             reduce using rule 26 (var_list -> var_list var_global .)
    CASE            reduce using rule 26 (var_list -> var_list var_global .)
    END_FUNCTION_BLOCK reduce using rule 26 (var_list -> var_list var_global .)
    END_FUNCTION    reduce using rule 26 (var_list -> var_list var_global .)


state 36

    (27) var_list -> var_list const .

    BEGIN           reduce using rule 27 (var_list -> var_list const .)
    VAR_INPUT       reduce using rule 27 (var_list -> var_list const .)
    VAR_OUTPUT      reduce using rule 27 (var_list -> var_list const .)
    VAR             reduce using rule 27 (var_list -> var_list const .)
    VAR_IN_OUT      reduce using rule 27 (var_list -> var_list const .)
    VAR_GLOBAL      reduce using rule 27 (var_list -> var_list const .)
    CONST           reduce using rule 27 (var_list -> var_list const .)
    END_PROGRAM     reduce using rule 27 (var_list -> var_list const .)
    ID              reduce using rule 27 (var_list -> var_list const .)
    WHILE           reduce using rule 27 (var_list -> var_list const .)
    IF              reduce using rule 27 (var_list -> var_list const .)
    FOR             reduce using rule 27 (var_list -> var_list const .)
    CASE            reduce using rule 27 (var_list -> var_list const .)
    END_FUNCTION_BLOCK reduce using rule 27 (var_list -> var_list const .)
    END_FUNCTION    reduce using rule 27 (var_list -> var_list const .)


state 37

    (29) var_input -> VAR_INPUT declare_list . END_VAR
    (42) declare_list -> declare_list . declare_int_statement
    (43) declare_list -> declare_list . declare_float_statement
    (44) declare_list -> declare_list . declare_timer_statement
    (49) declare_int_statement -> . ID COLON INT ASSIGN int_number SEMICOLON
    (50) declare_int_statement -> . ID COLON BOOL ASSIGN int_number SEMICOLON
    (51) declare_int_statement -> . ID COLON BYTE ASSIGN int_number SEMICOLON
    (52) declare_int_statement -> . ID COLON TIME ASSIGN int_number SEMICOLON
    (53) declare_int_statement -> . ID COLON DWORD ASSIGN int_number SEMICOLON
    (54) declare_int_statement -> . ID COLON STRING ASSIGN string_number SEMICOLON
    (55) declare_int_statement -> . ID COLON BYTE ASSIGN ID SEMICOLON
    (56) declare_int_statement -> . ID COLON TIME ASSIGN ID SEMICOLON
    (57) declare_int_statement -> . ID COLON INT SEMICOLON
    (58) declare_int_statement -> . ID COLON BOOL SEMICOLON
    (59) declare_int_statement -> . ID COLON BYTE SEMICOLON
    (60) declare_int_statement -> . ID COLON TIME SEMICOLON
    (61) declare_int_statement -> . ID COLON DWORD SEMICOLON
    (62) declare_int_statement -> . ID COLON STRING SEMICOLON
    (63) declare_float_statement -> . ID COLON FLOAT ASSIGN float_number SEMICOLON
    (64) declare_float_statement -> . ID COLON FLOAT SEMICOLON
    (65) declare_float_statement -> . ID COLON REAL ASSIGN float_number SEMICOLON
    (66) declare_float_statement -> . ID COLON REAL SEMICOLON
    (45) declare_timer_statement -> . ID COLON TP SEMICOLON
    (46) declare_timer_statement -> . ID COLON TON SEMICOLON
    (47) declare_timer_statement -> . ID COLON TOF SEMICOLON
    (48) declare_timer_statement -> . ID COLON RTC SEMICOLON

    END_VAR         shift and go to state 63
    ID              shift and go to state 67

    declare_int_statement          shift and go to state 64
    declare_float_statement        shift and go to state 65
    declare_timer_statement        shift and go to state 66

state 38

    (28) var_output -> VAR_OUTPUT declare_list . END_VAR
    (42) declare_list -> declare_list . declare_int_statement
    (43) declare_list -> declare_list . declare_float_statement
    (44) declare_list -> declare_list . declare_timer_statement
    (49) declare_int_statement -> . ID COLON INT ASSIGN int_number SEMICOLON
    (50) declare_int_statement -> . ID COLON BOOL ASSIGN int_number SEMICOLON
    (51) declare_int_statement -> . ID COLON BYTE ASSIGN int_number SEMICOLON
    (52) declare_int_statement -> . ID COLON TIME ASSIGN int_number SEMICOLON
    (53) declare_int_statement -> . ID COLON DWORD ASSIGN int_number SEMICOLON
    (54) declare_int_statement -> . ID COLON STRING ASSIGN string_number SEMICOLON
    (55) declare_int_statement -> . ID COLON BYTE ASSIGN ID SEMICOLON
    (56) declare_int_statement -> . ID COLON TIME ASSIGN ID SEMICOLON
    (57) declare_int_statement -> . ID COLON INT SEMICOLON
    (58) declare_int_statement -> . ID COLON BOOL SEMICOLON
    (59) declare_int_statement -> . ID COLON BYTE SEMICOLON
    (60) declare_int_statement -> . ID COLON TIME SEMICOLON
    (61) declare_int_statement -> . ID COLON DWORD SEMICOLON
    (62) declare_int_statement -> . ID COLON STRING SEMICOLON
    (63) declare_float_statement -> . ID COLON FLOAT ASSIGN float_number SEMICOLON
    (64) declare_float_statement -> . ID COLON FLOAT SEMICOLON
    (65) declare_float_statement -> . ID COLON REAL ASSIGN float_number SEMICOLON
    (66) declare_float_statement -> . ID COLON REAL SEMICOLON
    (45) declare_timer_statement -> . ID COLON TP SEMICOLON
    (46) declare_timer_statement -> . ID COLON TON SEMICOLON
    (47) declare_timer_statement -> . ID COLON TOF SEMICOLON
    (48) declare_timer_statement -> . ID COLON RTC SEMICOLON

    END_VAR         shift and go to state 68
    ID              shift and go to state 67

    declare_int_statement          shift and go to state 64
    declare_float_statement        shift and go to state 65
    declare_timer_statement        shift and go to state 66

state 39

    (31) var -> VAR declare_list . END_VAR
    (42) declare_list -> declare_list . declare_int_statement
    (43) declare_list -> declare_list . declare_float_statement
    (44) declare_list -> declare_list . declare_timer_statement
    (49) declare_int_statement -> . ID COLON INT ASSIGN int_number SEMICOLON
    (50) declare_int_statement -> . ID COLON BOOL ASSIGN int_number SEMICOLON
    (51) declare_int_statement -> . ID COLON BYTE ASSIGN int_number SEMICOLON
    (52) declare_int_statement -> . ID COLON TIME ASSIGN int_number SEMICOLON
    (53) declare_int_statement -> . ID COLON DWORD ASSIGN int_number SEMICOLON
    (54) declare_int_statement -> . ID COLON STRING ASSIGN string_number SEMICOLON
    (55) declare_int_statement -> . ID COLON BYTE ASSIGN ID SEMICOLON
    (56) declare_int_statement -> . ID COLON TIME ASSIGN ID SEMICOLON
    (57) declare_int_statement -> . ID COLON INT SEMICOLON
    (58) declare_int_statement -> . ID COLON BOOL SEMICOLON
    (59) declare_int_statement -> . ID COLON BYTE SEMICOLON
    (60) declare_int_statement -> . ID COLON TIME SEMICOLON
    (61) declare_int_statement -> . ID COLON DWORD SEMICOLON
    (62) declare_int_statement -> . ID COLON STRING SEMICOLON
    (63) declare_float_statement -> . ID COLON FLOAT ASSIGN float_number SEMICOLON
    (64) declare_float_statement -> . ID COLON FLOAT SEMICOLON
    (65) declare_float_statement -> . ID COLON REAL ASSIGN float_number SEMICOLON
    (66) declare_float_statement -> . ID COLON REAL SEMICOLON
    (45) declare_timer_statement -> . ID COLON TP SEMICOLON
    (46) declare_timer_statement -> . ID COLON TON SEMICOLON
    (47) declare_timer_statement -> . ID COLON TOF SEMICOLON
    (48) declare_timer_statement -> . ID COLON RTC SEMICOLON

    END_VAR         shift and go to state 69
    ID              shift and go to state 67

    declare_int_statement          shift and go to state 64
    declare_float_statement        shift and go to state 65
    declare_timer_statement        shift and go to state 66

state 40

    (30) var_in_out -> VAR_IN_OUT declare_list . END_VAR
    (42) declare_list -> declare_list . declare_int_statement
    (43) declare_list -> declare_list . declare_float_statement
    (44) declare_list -> declare_list . declare_timer_statement
    (49) declare_int_statement -> . ID COLON INT ASSIGN int_number SEMICOLON
    (50) declare_int_statement -> . ID COLON BOOL ASSIGN int_number SEMICOLON
    (51) declare_int_statement -> . ID COLON BYTE ASSIGN int_number SEMICOLON
    (52) declare_int_statement -> . ID COLON TIME ASSIGN int_number SEMICOLON
    (53) declare_int_statement -> . ID COLON DWORD ASSIGN int_number SEMICOLON
    (54) declare_int_statement -> . ID COLON STRING ASSIGN string_number SEMICOLON
    (55) declare_int_statement -> . ID COLON BYTE ASSIGN ID SEMICOLON
    (56) declare_int_statement -> . ID COLON TIME ASSIGN ID SEMICOLON
    (57) declare_int_statement -> . ID COLON INT SEMICOLON
    (58) declare_int_statement -> . ID COLON BOOL SEMICOLON
    (59) declare_int_statement -> . ID COLON BYTE SEMICOLON
    (60) declare_int_statement -> . ID COLON TIME SEMICOLON
    (61) declare_int_statement -> . ID COLON DWORD SEMICOLON
    (62) declare_int_statement -> . ID COLON STRING SEMICOLON
    (63) declare_float_statement -> . ID COLON FLOAT ASSIGN float_number SEMICOLON
    (64) declare_float_statement -> . ID COLON FLOAT SEMICOLON
    (65) declare_float_statement -> . ID COLON REAL ASSIGN float_number SEMICOLON
    (66) declare_float_statement -> . ID COLON REAL SEMICOLON
    (45) declare_timer_statement -> . ID COLON TP SEMICOLON
    (46) declare_timer_statement -> . ID COLON TON SEMICOLON
    (47) declare_timer_statement -> . ID COLON TOF SEMICOLON
    (48) declare_timer_statement -> . ID COLON RTC SEMICOLON

    END_VAR         shift and go to state 70
    ID              shift and go to state 67

    declare_int_statement          shift and go to state 64
    declare_float_statement        shift and go to state 65
    declare_timer_statement        shift and go to state 66

state 41

    (33) var_global -> VAR_GLOBAL declare_list . END_VAR
    (42) declare_list -> declare_list . declare_int_statement
    (43) declare_list -> declare_list . declare_float_statement
    (44) declare_list -> declare_list . declare_timer_statement
    (49) declare_int_statement -> . ID COLON INT ASSIGN int_number SEMICOLON
    (50) declare_int_statement -> . ID COLON BOOL ASSIGN int_number SEMICOLON
    (51) declare_int_statement -> . ID COLON BYTE ASSIGN int_number SEMICOLON
    (52) declare_int_statement -> . ID COLON TIME ASSIGN int_number SEMICOLON
    (53) declare_int_statement -> . ID COLON DWORD ASSIGN int_number SEMICOLON
    (54) declare_int_statement -> . ID COLON STRING ASSIGN string_number SEMICOLON
    (55) declare_int_statement -> . ID COLON BYTE ASSIGN ID SEMICOLON
    (56) declare_int_statement -> . ID COLON TIME ASSIGN ID SEMICOLON
    (57) declare_int_statement -> . ID COLON INT SEMICOLON
    (58) declare_int_statement -> . ID COLON BOOL SEMICOLON
    (59) declare_int_statement -> . ID COLON BYTE SEMICOLON
    (60) declare_int_statement -> . ID COLON TIME SEMICOLON
    (61) declare_int_statement -> . ID COLON DWORD SEMICOLON
    (62) declare_int_statement -> . ID COLON STRING SEMICOLON
    (63) declare_float_statement -> . ID COLON FLOAT ASSIGN float_number SEMICOLON
    (64) declare_float_statement -> . ID COLON FLOAT SEMICOLON
    (65) declare_float_statement -> . ID COLON REAL ASSIGN float_number SEMICOLON
    (66) declare_float_statement -> . ID COLON REAL SEMICOLON
    (45) declare_timer_statement -> . ID COLON TP SEMICOLON
    (46) declare_timer_statement -> . ID COLON TON SEMICOLON
    (47) declare_timer_statement -> . ID COLON TOF SEMICOLON
    (48) declare_timer_statement -> . ID COLON RTC SEMICOLON

    END_VAR         shift and go to state 71
    ID              shift and go to state 67

    declare_int_statement          shift and go to state 64
    declare_float_statement        shift and go to state 65
    declare_timer_statement        shift and go to state 66

state 42

    (32) const -> CONST declare_list . END_CONST
    (42) declare_list -> declare_list . declare_int_statement
    (43) declare_list -> declare_list . declare_float_statement
    (44) declare_list -> declare_list . declare_timer_statement
    (49) declare_int_statement -> . ID COLON INT ASSIGN int_number SEMICOLON
    (50) declare_int_statement -> . ID COLON BOOL ASSIGN int_number SEMICOLON
    (51) declare_int_statement -> . ID COLON BYTE ASSIGN int_number SEMICOLON
    (52) declare_int_statement -> . ID COLON TIME ASSIGN int_number SEMICOLON
    (53) declare_int_statement -> . ID COLON DWORD ASSIGN int_number SEMICOLON
    (54) declare_int_statement -> . ID COLON STRING ASSIGN string_number SEMICOLON
    (55) declare_int_statement -> . ID COLON BYTE ASSIGN ID SEMICOLON
    (56) declare_int_statement -> . ID COLON TIME ASSIGN ID SEMICOLON
    (57) declare_int_statement -> . ID COLON INT SEMICOLON
    (58) declare_int_statement -> . ID COLON BOOL SEMICOLON
    (59) declare_int_statement -> . ID COLON BYTE SEMICOLON
    (60) declare_int_statement -> . ID COLON TIME SEMICOLON
    (61) declare_int_statement -> . ID COLON DWORD SEMICOLON
    (62) declare_int_statement -> . ID COLON STRING SEMICOLON
    (63) declare_float_statement -> . ID COLON FLOAT ASSIGN float_number SEMICOLON
    (64) declare_float_statement -> . ID COLON FLOAT SEMICOLON
    (65) declare_float_statement -> . ID COLON REAL ASSIGN float_number SEMICOLON
    (66) declare_float_statement -> . ID COLON REAL SEMICOLON
    (45) declare_timer_statement -> . ID COLON TP SEMICOLON
    (46) declare_timer_statement -> . ID COLON TON SEMICOLON
    (47) declare_timer_statement -> . ID COLON TOF SEMICOLON
    (48) declare_timer_statement -> . ID COLON RTC SEMICOLON

    END_CONST       shift and go to state 72
    ID              shift and go to state 67

    declare_int_statement          shift and go to state 64
    declare_float_statement        shift and go to state 65
    declare_timer_statement        shift and go to state 66

state 43

    (9) function_block_definition -> FUNCTION_BLOCK ID var_list BEGIN . statement_list END_FUNCTION_BLOCK
    (34) statement_list -> .
    (35) statement_list -> . statement_list assign_statement
    (36) statement_list -> . statement_list while_statement
    (37) statement_list -> . statement_list if_statement
    (38) statement_list -> . statement_list for_statement
    (39) statement_list -> . statement_list call_statement
    (40) statement_list -> . statement_list case_statement

    END_FUNCTION_BLOCK reduce using rule 34 (statement_list -> .)
    ID              reduce using rule 34 (statement_list -> .)
    WHILE           reduce using rule 34 (statement_list -> .)
    IF              reduce using rule 34 (statement_list -> .)
    FOR             reduce using rule 34 (statement_list -> .)
    CASE            reduce using rule 34 (statement_list -> .)

    statement_list                 shift and go to state 73

state 44

    (10) function_block_definition -> FUNCTION_BLOCK ID var_list statement_list . END_FUNCTION_BLOCK
    (35) statement_list -> statement_list . assign_statement
    (36) statement_list -> statement_list . while_statement
    (37) statement_list -> statement_list . if_statement
    (38) statement_list -> statement_list . for_statement
    (39) statement_list -> statement_list . call_statement
    (40) statement_list -> statement_list . case_statement
    (81) assign_statement -> . ID ASSIGN expression SEMICOLON
    (80) while_statement -> . WHILE expression DO statement_list END_WHILE
    (70) if_statement -> . IF expression THEN statement_list END_IF SEMICOLON
    (71) if_statement -> . IF expression THEN statement_list elsif_statement_list END_IF SEMICOLON
    (72) if_statement -> . IF expression THEN statement_list else_statement END_IF SEMICOLON
    (73) if_statement -> . IF expression THEN statement_list elsif_statement_list else_statement END_IF SEMICOLON
    (78) for_statement -> . FOR ID ASSIGN expression TO expression DO statement_list END_FOR SEMICOLON
    (79) for_statement -> . FOR ID ASSIGN expression TO expression BY expression DO statement_list END_FOR SEMICOLON
    (106) call_statement -> . ID argument RPAREN SEMICOLON
    (67) case_statement -> . CASE ID OF case_list END_CASE SEMICOLON

    END_FUNCTION_BLOCK shift and go to state 74
    ID              shift and go to state 51
    WHILE           shift and go to state 59
    IF              shift and go to state 60
    FOR             shift and go to state 61
    CASE            shift and go to state 62

    assign_statement               shift and go to state 53
    while_statement                shift and go to state 54
    if_statement                   shift and go to state 55
    for_statement                  shift and go to state 56
    call_statement                 shift and go to state 57
    case_statement                 shift and go to state 58

state 45

    (11) function_definition -> FUNCTION ID COLON INT . var_list statement_list END_FUNCTION
    (16) var_list -> . var_input
    (17) var_list -> . var_output
    (18) var_list -> . var
    (19) var_list -> . var_in_out
    (20) var_list -> . var_global
    (21) var_list -> . const
    (22) var_list -> . var_list var_input
    (23) var_list -> . var_list var_output
    (24) var_list -> . var_list var
    (25) var_list -> . var_list var_in_out
    (26) var_list -> . var_list var_global
    (27) var_list -> . var_list const
    (29) var_input -> . VAR_INPUT declare_list END_VAR
    (28) var_output -> . VAR_OUTPUT declare_list END_VAR
    (31) var -> . VAR declare_list END_VAR
    (30) var_in_out -> . VAR_IN_OUT declare_list END_VAR
    (33) var_global -> . VAR_GLOBAL declare_list END_VAR
    (32) const -> . CONST declare_list END_CONST

    VAR_INPUT       shift and go to state 21
    VAR_OUTPUT      shift and go to state 22
    VAR             shift and go to state 23
    VAR_IN_OUT      shift and go to state 24
    VAR_GLOBAL      shift and go to state 25
    CONST           shift and go to state 26

    var_list                       shift and go to state 75
    var_input                      shift and go to state 15
    var_output                     shift and go to state 16
    var                            shift and go to state 17
    var_in_out                     shift and go to state 18
    var_global                     shift and go to state 19
    const                          shift and go to state 20

state 46

    (12) function_definition -> FUNCTION ID COLON BOOL . var_list statement_list END_FUNCTION
    (16) var_list -> . var_input
    (17) var_list -> . var_output
    (18) var_list -> . var
    (19) var_list -> . var_in_out
    (20) var_list -> . var_global
    (21) var_list -> . const
    (22) var_list -> . var_list var_input
    (23) var_list -> . var_list var_output
    (24) var_list -> . var_list var
    (25) var_list -> . var_list var_in_out
    (26) var_list -> . var_list var_global
    (27) var_list -> . var_list const
    (29) var_input -> . VAR_INPUT declare_list END_VAR
    (28) var_output -> . VAR_OUTPUT declare_list END_VAR
    (31) var -> . VAR declare_list END_VAR
    (30) var_in_out -> . VAR_IN_OUT declare_list END_VAR
    (33) var_global -> . VAR_GLOBAL declare_list END_VAR
    (32) const -> . CONST declare_list END_CONST

    VAR_INPUT       shift and go to state 21
    VAR_OUTPUT      shift and go to state 22
    VAR             shift and go to state 23
    VAR_IN_OUT      shift and go to state 24
    VAR_GLOBAL      shift and go to state 25
    CONST           shift and go to state 26

    var_list                       shift and go to state 76
    var_input                      shift and go to state 15
    var_output                     shift and go to state 16
    var                            shift and go to state 17
    var_in_out                     shift and go to state 18
    var_global                     shift and go to state 19
    const                          shift and go to state 20

state 47

    (13) function_definition -> FUNCTION ID COLON REAL . var_list statement_list END_FUNCTION
    (16) var_list -> . var_input
    (17) var_list -> . var_output
    (18) var_list -> . var
    (19) var_list -> . var_in_out
    (20) var_list -> . var_global
    (21) var_list -> . const
    (22) var_list -> . var_list var_input
    (23) var_list -> . var_list var_output
    (24) var_list -> . var_list var
    (25) var_list -> . var_list var_in_out
    (26) var_list -> . var_list var_global
    (27) var_list -> . var_list const
    (29) var_input -> . VAR_INPUT declare_list END_VAR
    (28) var_output -> . VAR_OUTPUT declare_list END_VAR
    (31) var -> . VAR declare_list END_VAR
    (30) var_in_out -> . VAR_IN_OUT declare_list END_VAR
    (33) var_global -> . VAR_GLOBAL declare_list END_VAR
    (32) const -> . CONST declare_list END_CONST

    VAR_INPUT       shift and go to state 21
    VAR_OUTPUT      shift and go to state 22
    VAR             shift and go to state 23
    VAR_IN_OUT      shift and go to state 24
    VAR_GLOBAL      shift and go to state 25
    CONST           shift and go to state 26

    var_list                       shift and go to state 77
    var_input                      shift and go to state 15
    var_output                     shift and go to state 16
    var                            shift and go to state 17
    var_in_out                     shift and go to state 18
    var_global                     shift and go to state 19
    const                          shift and go to state 20

state 48

    (14) function_definition -> FUNCTION ID COLON FLOAT . var_list statement_list END_FUNCTION
    (16) var_list -> . var_input
    (17) var_list -> . var_output
    (18) var_list -> . var
    (19) var_list -> . var_in_out
    (20) var_list -> . var_global
    (21) var_list -> . const
    (22) var_list -> . var_list var_input
    (23) var_list -> . var_list var_output
    (24) var_list -> . var_list var
    (25) var_list -> . var_list var_in_out
    (26) var_list -> . var_list var_global
    (27) var_list -> . var_list const
    (29) var_input -> . VAR_INPUT declare_list END_VAR
    (28) var_output -> . VAR_OUTPUT declare_list END_VAR
    (31) var -> . VAR declare_list END_VAR
    (30) var_in_out -> . VAR_IN_OUT declare_list END_VAR
    (33) var_global -> . VAR_GLOBAL declare_list END_VAR
    (32) const -> . CONST declare_list END_CONST

    VAR_INPUT       shift and go to state 21
    VAR_OUTPUT      shift and go to state 22
    VAR             shift and go to state 23
    VAR_IN_OUT      shift and go to state 24
    VAR_GLOBAL      shift and go to state 25
    CONST           shift and go to state 26

    var_list                       shift and go to state 78
    var_input                      shift and go to state 15
    var_output                     shift and go to state 16
    var                            shift and go to state 17
    var_in_out                     shift and go to state 18
    var_global                     shift and go to state 19
    const                          shift and go to state 20

state 49

    (15) function_definition -> FUNCTION ID COLON BYTE . var_list statement_list END_FUNCTION
    (16) var_list -> . var_input
    (17) var_list -> . var_output
    (18) var_list -> . var
    (19) var_list -> . var_in_out
    (20) var_list -> . var_global
    (21) var_list -> . const
    (22) var_list -> . var_list var_input
    (23) var_list -> . var_list var_output
    (24) var_list -> . var_list var
    (25) var_list -> . var_list var_in_out
    (26) var_list -> . var_list var_global
    (27) var_list -> . var_list const
    (29) var_input -> . VAR_INPUT declare_list END_VAR
    (28) var_output -> . VAR_OUTPUT declare_list END_VAR
    (31) var -> . VAR declare_list END_VAR
    (30) var_in_out -> . VAR_IN_OUT declare_list END_VAR
    (33) var_global -> . VAR_GLOBAL declare_list END_VAR
    (32) const -> . CONST declare_list END_CONST

    VAR_INPUT       shift and go to state 21
    VAR_OUTPUT      shift and go to state 22
    VAR             shift and go to state 23
    VAR_IN_OUT      shift and go to state 24
    VAR_GLOBAL      shift and go to state 25
    CONST           shift and go to state 26

    var_list                       shift and go to state 79
    var_input                      shift and go to state 15
    var_output                     shift and go to state 16
    var                            shift and go to state 17
    var_in_out                     shift and go to state 18
    var_global                     shift and go to state 19
    const                          shift and go to state 20

state 50

    (7) program -> PROGRAM ID var_list BEGIN statement_list . END_PROGRAM
    (35) statement_list -> statement_list . assign_statement
    (36) statement_list -> statement_list . while_statement
    (37) statement_list -> statement_list . if_statement
    (38) statement_list -> statement_list . for_statement
    (39) statement_list -> statement_list . call_statement
    (40) statement_list -> statement_list . case_statement
    (81) assign_statement -> . ID ASSIGN expression SEMICOLON
    (80) while_statement -> . WHILE expression DO statement_list END_WHILE
    (70) if_statement -> . IF expression THEN statement_list END_IF SEMICOLON
    (71) if_statement -> . IF expression THEN statement_list elsif_statement_list END_IF SEMICOLON
    (72) if_statement -> . IF expression THEN statement_list else_statement END_IF SEMICOLON
    (73) if_statement -> . IF expression THEN statement_list elsif_statement_list else_statement END_IF SEMICOLON
    (78) for_statement -> . FOR ID ASSIGN expression TO expression DO statement_list END_FOR SEMICOLON
    (79) for_statement -> . FOR ID ASSIGN expression TO expression BY expression DO statement_list END_FOR SEMICOLON
    (106) call_statement -> . ID argument RPAREN SEMICOLON
    (67) case_statement -> . CASE ID OF case_list END_CASE SEMICOLON

    END_PROGRAM     shift and go to state 80
    ID              shift and go to state 51
    WHILE           shift and go to state 59
    IF              shift and go to state 60
    FOR             shift and go to state 61
    CASE            shift and go to state 62

    assign_statement               shift and go to state 53
    while_statement                shift and go to state 54
    if_statement                   shift and go to state 55
    for_statement                  shift and go to state 56
    call_statement                 shift and go to state 57
    case_statement                 shift and go to state 58

state 51

    (81) assign_statement -> ID . ASSIGN expression SEMICOLON
    (106) call_statement -> ID . argument RPAREN SEMICOLON
    (107) argument -> . LPAREN
    (108) argument -> . argument ID ASSIGN expression
    (109) argument -> . argument COMMA ID ASSIGN expression

    ASSIGN          shift and go to state 81
    LPAREN          shift and go to state 83

    argument                       shift and go to state 82

state 52

    (8) program -> PROGRAM ID var_list statement_list END_PROGRAM .

    FUNCTION_BLOCK  reduce using rule 8 (program -> PROGRAM ID var_list statement_list END_PROGRAM .)
    FUNCTION        reduce using rule 8 (program -> PROGRAM ID var_list statement_list END_PROGRAM .)
    PROGRAM         reduce using rule 8 (program -> PROGRAM ID var_list statement_list END_PROGRAM .)
    $end            reduce using rule 8 (program -> PROGRAM ID var_list statement_list END_PROGRAM .)


state 53

    (35) statement_list -> statement_list assign_statement .

    END_PROGRAM     reduce using rule 35 (statement_list -> statement_list assign_statement .)
    ID              reduce using rule 35 (statement_list -> statement_list assign_statement .)
    WHILE           reduce using rule 35 (statement_list -> statement_list assign_statement .)
    IF              reduce using rule 35 (statement_list -> statement_list assign_statement .)
    FOR             reduce using rule 35 (statement_list -> statement_list assign_statement .)
    CASE            reduce using rule 35 (statement_list -> statement_list assign_statement .)
    END_FUNCTION_BLOCK reduce using rule 35 (statement_list -> statement_list assign_statement .)
    END_FUNCTION    reduce using rule 35 (statement_list -> statement_list assign_statement .)
    END_WHILE       reduce using rule 35 (statement_list -> statement_list assign_statement .)
    END_IF          reduce using rule 35 (statement_list -> statement_list assign_statement .)
    ELSE            reduce using rule 35 (statement_list -> statement_list assign_statement .)
    ELSIF           reduce using rule 35 (statement_list -> statement_list assign_statement .)
    END_CASE        reduce using rule 35 (statement_list -> statement_list assign_statement .)
    LPAREN          reduce using rule 35 (statement_list -> statement_list assign_statement .)
    NOT             reduce using rule 35 (statement_list -> statement_list assign_statement .)
    MINUS           reduce using rule 35 (statement_list -> statement_list assign_statement .)
    PLUS            reduce using rule 35 (statement_list -> statement_list assign_statement .)
    INT_NUMBER      reduce using rule 35 (statement_list -> statement_list assign_statement .)
    TRUE            reduce using rule 35 (statement_list -> statement_list assign_statement .)
    FALSE           reduce using rule 35 (statement_list -> statement_list assign_statement .)
    FLOAT_NUMBER    reduce using rule 35 (statement_list -> statement_list assign_statement .)
    STRING_NUMBER   reduce using rule 35 (statement_list -> statement_list assign_statement .)
    LOG             reduce using rule 35 (statement_list -> statement_list assign_statement .)
    LN              reduce using rule 35 (statement_list -> statement_list assign_statement .)
    EXP             reduce using rule 35 (statement_list -> statement_list assign_statement .)
    EQ_STRING       reduce using rule 35 (statement_list -> statement_list assign_statement .)
    END_FOR         reduce using rule 35 (statement_list -> statement_list assign_statement .)


state 54

    (36) statement_list -> statement_list while_statement .

    END_PROGRAM     reduce using rule 36 (statement_list -> statement_list while_statement .)
    ID              reduce using rule 36 (statement_list -> statement_list while_statement .)
    WHILE           reduce using rule 36 (statement_list -> statement_list while_statement .)
    IF              reduce using rule 36 (statement_list -> statement_list while_statement .)
    FOR             reduce using rule 36 (statement_list -> statement_list while_statement .)
    CASE            reduce using rule 36 (statement_list -> statement_list while_statement .)
    END_FUNCTION_BLOCK reduce using rule 36 (statement_list -> statement_list while_statement .)
    END_FUNCTION    reduce using rule 36 (statement_list -> statement_list while_statement .)
    END_WHILE       reduce using rule 36 (statement_list -> statement_list while_statement .)
    END_IF          reduce using rule 36 (statement_list -> statement_list while_statement .)
    ELSE            reduce using rule 36 (statement_list -> statement_list while_statement .)
    ELSIF           reduce using rule 36 (statement_list -> statement_list while_statement .)
    END_CASE        reduce using rule 36 (statement_list -> statement_list while_statement .)
    LPAREN          reduce using rule 36 (statement_list -> statement_list while_statement .)
    NOT             reduce using rule 36 (statement_list -> statement_list while_statement .)
    MINUS           reduce using rule 36 (statement_list -> statement_list while_statement .)
    PLUS            reduce using rule 36 (statement_list -> statement_list while_statement .)
    INT_NUMBER      reduce using rule 36 (statement_list -> statement_list while_statement .)
    TRUE            reduce using rule 36 (statement_list -> statement_list while_statement .)
    FALSE           reduce using rule 36 (statement_list -> statement_list while_statement .)
    FLOAT_NUMBER    reduce using rule 36 (statement_list -> statement_list while_statement .)
    STRING_NUMBER   reduce using rule 36 (statement_list -> statement_list while_statement .)
    LOG             reduce using rule 36 (statement_list -> statement_list while_statement .)
    LN              reduce using rule 36 (statement_list -> statement_list while_statement .)
    EXP             reduce using rule 36 (statement_list -> statement_list while_statement .)
    EQ_STRING       reduce using rule 36 (statement_list -> statement_list while_statement .)
    END_FOR         reduce using rule 36 (statement_list -> statement_list while_statement .)


state 55

    (37) statement_list -> statement_list if_statement .

    END_PROGRAM     reduce using rule 37 (statement_list -> statement_list if_statement .)
    ID              reduce using rule 37 (statement_list -> statement_list if_statement .)
    WHILE           reduce using rule 37 (statement_list -> statement_list if_statement .)
    IF              reduce using rule 37 (statement_list -> statement_list if_statement .)
    FOR             reduce using rule 37 (statement_list -> statement_list if_statement .)
    CASE            reduce using rule 37 (statement_list -> statement_list if_statement .)
    END_FUNCTION_BLOCK reduce using rule 37 (statement_list -> statement_list if_statement .)
    END_FUNCTION    reduce using rule 37 (statement_list -> statement_list if_statement .)
    END_WHILE       reduce using rule 37 (statement_list -> statement_list if_statement .)
    END_IF          reduce using rule 37 (statement_list -> statement_list if_statement .)
    ELSE            reduce using rule 37 (statement_list -> statement_list if_statement .)
    ELSIF           reduce using rule 37 (statement_list -> statement_list if_statement .)
    END_CASE        reduce using rule 37 (statement_list -> statement_list if_statement .)
    LPAREN          reduce using rule 37 (statement_list -> statement_list if_statement .)
    NOT             reduce using rule 37 (statement_list -> statement_list if_statement .)
    MINUS           reduce using rule 37 (statement_list -> statement_list if_statement .)
    PLUS            reduce using rule 37 (statement_list -> statement_list if_statement .)
    INT_NUMBER      reduce using rule 37 (statement_list -> statement_list if_statement .)
    TRUE            reduce using rule 37 (statement_list -> statement_list if_statement .)
    FALSE           reduce using rule 37 (statement_list -> statement_list if_statement .)
    FLOAT_NUMBER    reduce using rule 37 (statement_list -> statement_list if_statement .)
    STRING_NUMBER   reduce using rule 37 (statement_list -> statement_list if_statement .)
    LOG             reduce using rule 37 (statement_list -> statement_list if_statement .)
    LN              reduce using rule 37 (statement_list -> statement_list if_statement .)
    EXP             reduce using rule 37 (statement_list -> statement_list if_statement .)
    EQ_STRING       reduce using rule 37 (statement_list -> statement_list if_statement .)
    END_FOR         reduce using rule 37 (statement_list -> statement_list if_statement .)


state 56

    (38) statement_list -> statement_list for_statement .

    END_PROGRAM     reduce using rule 38 (statement_list -> statement_list for_statement .)
    ID              reduce using rule 38 (statement_list -> statement_list for_statement .)
    WHILE           reduce using rule 38 (statement_list -> statement_list for_statement .)
    IF              reduce using rule 38 (statement_list -> statement_list for_statement .)
    FOR             reduce using rule 38 (statement_list -> statement_list for_statement .)
    CASE            reduce using rule 38 (statement_list -> statement_list for_statement .)
    END_FUNCTION_BLOCK reduce using rule 38 (statement_list -> statement_list for_statement .)
    END_FUNCTION    reduce using rule 38 (statement_list -> statement_list for_statement .)
    END_WHILE       reduce using rule 38 (statement_list -> statement_list for_statement .)
    END_IF          reduce using rule 38 (statement_list -> statement_list for_statement .)
    ELSE            reduce using rule 38 (statement_list -> statement_list for_statement .)
    ELSIF           reduce using rule 38 (statement_list -> statement_list for_statement .)
    END_CASE        reduce using rule 38 (statement_list -> statement_list for_statement .)
    LPAREN          reduce using rule 38 (statement_list -> statement_list for_statement .)
    NOT             reduce using rule 38 (statement_list -> statement_list for_statement .)
    MINUS           reduce using rule 38 (statement_list -> statement_list for_statement .)
    PLUS            reduce using rule 38 (statement_list -> statement_list for_statement .)
    INT_NUMBER      reduce using rule 38 (statement_list -> statement_list for_statement .)
    TRUE            reduce using rule 38 (statement_list -> statement_list for_statement .)
    FALSE           reduce using rule 38 (statement_list -> statement_list for_statement .)
    FLOAT_NUMBER    reduce using rule 38 (statement_list -> statement_list for_statement .)
    STRING_NUMBER   reduce using rule 38 (statement_list -> statement_list for_statement .)
    LOG             reduce using rule 38 (statement_list -> statement_list for_statement .)
    LN              reduce using rule 38 (statement_list -> statement_list for_statement .)
    EXP             reduce using rule 38 (statement_list -> statement_list for_statement .)
    EQ_STRING       reduce using rule 38 (statement_list -> statement_list for_statement .)
    END_FOR         reduce using rule 38 (statement_list -> statement_list for_statement .)


state 57

    (39) statement_list -> statement_list call_statement .

    END_PROGRAM     reduce using rule 39 (statement_list -> statement_list call_statement .)
    ID              reduce using rule 39 (statement_list -> statement_list call_statement .)
    WHILE           reduce using rule 39 (statement_list -> statement_list call_statement .)
    IF              reduce using rule 39 (statement_list -> statement_list call_statement .)
    FOR             reduce using rule 39 (statement_list -> statement_list call_statement .)
    CASE            reduce using rule 39 (statement_list -> statement_list call_statement .)
    END_FUNCTION_BLOCK reduce using rule 39 (statement_list -> statement_list call_statement .)
    END_FUNCTION    reduce using rule 39 (statement_list -> statement_list call_statement .)
    END_WHILE       reduce using rule 39 (statement_list -> statement_list call_statement .)
    END_IF          reduce using rule 39 (statement_list -> statement_list call_statement .)
    ELSE            reduce using rule 39 (statement_list -> statement_list call_statement .)
    ELSIF           reduce using rule 39 (statement_list -> statement_list call_statement .)
    END_CASE        reduce using rule 39 (statement_list -> statement_list call_statement .)
    LPAREN          reduce using rule 39 (statement_list -> statement_list call_statement .)
    NOT             reduce using rule 39 (statement_list -> statement_list call_statement .)
    MINUS           reduce using rule 39 (statement_list -> statement_list call_statement .)
    PLUS            reduce using rule 39 (statement_list -> statement_list call_statement .)
    INT_NUMBER      reduce using rule 39 (statement_list -> statement_list call_statement .)
    TRUE            reduce using rule 39 (statement_list -> statement_list call_statement .)
    FALSE           reduce using rule 39 (statement_list -> statement_list call_statement .)
    FLOAT_NUMBER    reduce using rule 39 (statement_list -> statement_list call_statement .)
    STRING_NUMBER   reduce using rule 39 (statement_list -> statement_list call_statement .)
    LOG             reduce using rule 39 (statement_list -> statement_list call_statement .)
    LN              reduce using rule 39 (statement_list -> statement_list call_statement .)
    EXP             reduce using rule 39 (statement_list -> statement_list call_statement .)
    EQ_STRING       reduce using rule 39 (statement_list -> statement_list call_statement .)
    END_FOR         reduce using rule 39 (statement_list -> statement_list call_statement .)


state 58

    (40) statement_list -> statement_list case_statement .

    END_PROGRAM     reduce using rule 40 (statement_list -> statement_list case_statement .)
    ID              reduce using rule 40 (statement_list -> statement_list case_statement .)
    WHILE           reduce using rule 40 (statement_list -> statement_list case_statement .)
    IF              reduce using rule 40 (statement_list -> statement_list case_statement .)
    FOR             reduce using rule 40 (statement_list -> statement_list case_statement .)
    CASE            reduce using rule 40 (statement_list -> statement_list case_statement .)
    END_FUNCTION_BLOCK reduce using rule 40 (statement_list -> statement_list case_statement .)
    END_FUNCTION    reduce using rule 40 (statement_list -> statement_list case_statement .)
    END_WHILE       reduce using rule 40 (statement_list -> statement_list case_statement .)
    END_IF          reduce using rule 40 (statement_list -> statement_list case_statement .)
    ELSE            reduce using rule 40 (statement_list -> statement_list case_statement .)
    ELSIF           reduce using rule 40 (statement_list -> statement_list case_statement .)
    END_CASE        reduce using rule 40 (statement_list -> statement_list case_statement .)
    LPAREN          reduce using rule 40 (statement_list -> statement_list case_statement .)
    NOT             reduce using rule 40 (statement_list -> statement_list case_statement .)
    MINUS           reduce using rule 40 (statement_list -> statement_list case_statement .)
    PLUS            reduce using rule 40 (statement_list -> statement_list case_statement .)
    INT_NUMBER      reduce using rule 40 (statement_list -> statement_list case_statement .)
    TRUE            reduce using rule 40 (statement_list -> statement_list case_statement .)
    FALSE           reduce using rule 40 (statement_list -> statement_list case_statement .)
    FLOAT_NUMBER    reduce using rule 40 (statement_list -> statement_list case_statement .)
    STRING_NUMBER   reduce using rule 40 (statement_list -> statement_list case_statement .)
    LOG             reduce using rule 40 (statement_list -> statement_list case_statement .)
    LN              reduce using rule 40 (statement_list -> statement_list case_statement .)
    EXP             reduce using rule 40 (statement_list -> statement_list case_statement .)
    EQ_STRING       reduce using rule 40 (statement_list -> statement_list case_statement .)
    END_FOR         reduce using rule 40 (statement_list -> statement_list case_statement .)


state 59

    (80) while_statement -> WHILE . expression DO statement_list END_WHILE
    (82) expression -> . ID
    (83) expression -> . int_number
    (84) expression -> . float_number
    (85) expression -> . string_number
    (86) expression -> . log
    (87) expression -> . exp
    (88) expression -> . call
    (89) expression -> . eq_string
    (90) expression -> . expression PLUS expression
    (91) expression -> . expression MINUS expression
    (92) expression -> . expression TIMES expression
    (93) expression -> . expression DIVIDE expression
    (94) expression -> . expression AND expression
    (95) expression -> . expression OR expression
    (96) expression -> . expression XOR expression
    (97) expression -> . expression LT expression
    (98) expression -> . expression GT expression
    (99) expression -> . expression LE expression
    (100) expression -> . expression GE expression
    (101) expression -> . expression EQ expression
    (102) expression -> . LPAREN expression RPAREN
    (103) expression -> . NOT expression
    (104) expression -> . MINUS expression
    (105) expression -> . PLUS expression
    (115) int_number -> . INT_NUMBER
    (116) int_number -> . TRUE
    (117) int_number -> . FALSE
    (118) int_number -> . ID
    (119) float_number -> . FLOAT_NUMBER
    (120) float_number -> . ID
    (121) string_number -> . STRING_NUMBER
    (113) log -> . LOG LPAREN expression RPAREN
    (114) log -> . LN LPAREN expression RPAREN
    (112) exp -> . EXP LPAREN expression RPAREN
    (110) call -> . ID DOT ID
    (111) eq_string -> . EQ_STRING LPAREN ID COMMA ID RPAREN

    ID              shift and go to state 85
    LPAREN          shift and go to state 95
    NOT             shift and go to state 96
    MINUS           shift and go to state 94
    PLUS            shift and go to state 93
    INT_NUMBER      shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99
    FLOAT_NUMBER    shift and go to state 100
    STRING_NUMBER   shift and go to state 101
    LOG             shift and go to state 102
    LN              shift and go to state 103
    EXP             shift and go to state 104
    EQ_STRING       shift and go to state 105

    expression                     shift and go to state 84
    int_number                     shift and go to state 86
    float_number                   shift and go to state 87
    string_number                  shift and go to state 88
    log                            shift and go to state 89
    exp                            shift and go to state 90
    call                           shift and go to state 91
    eq_string                      shift and go to state 92

state 60

    (70) if_statement -> IF . expression THEN statement_list END_IF SEMICOLON
    (71) if_statement -> IF . expression THEN statement_list elsif_statement_list END_IF SEMICOLON
    (72) if_statement -> IF . expression THEN statement_list else_statement END_IF SEMICOLON
    (73) if_statement -> IF . expression THEN statement_list elsif_statement_list else_statement END_IF SEMICOLON
    (82) expression -> . ID
    (83) expression -> . int_number
    (84) expression -> . float_number
    (85) expression -> . string_number
    (86) expression -> . log
    (87) expression -> . exp
    (88) expression -> . call
    (89) expression -> . eq_string
    (90) expression -> . expression PLUS expression
    (91) expression -> . expression MINUS expression
    (92) expression -> . expression TIMES expression
    (93) expression -> . expression DIVIDE expression
    (94) expression -> . expression AND expression
    (95) expression -> . expression OR expression
    (96) expression -> . expression XOR expression
    (97) expression -> . expression LT expression
    (98) expression -> . expression GT expression
    (99) expression -> . expression LE expression
    (100) expression -> . expression GE expression
    (101) expression -> . expression EQ expression
    (102) expression -> . LPAREN expression RPAREN
    (103) expression -> . NOT expression
    (104) expression -> . MINUS expression
    (105) expression -> . PLUS expression
    (115) int_number -> . INT_NUMBER
    (116) int_number -> . TRUE
    (117) int_number -> . FALSE
    (118) int_number -> . ID
    (119) float_number -> . FLOAT_NUMBER
    (120) float_number -> . ID
    (121) string_number -> . STRING_NUMBER
    (113) log -> . LOG LPAREN expression RPAREN
    (114) log -> . LN LPAREN expression RPAREN
    (112) exp -> . EXP LPAREN expression RPAREN
    (110) call -> . ID DOT ID
    (111) eq_string -> . EQ_STRING LPAREN ID COMMA ID RPAREN

    ID              shift and go to state 85
    LPAREN          shift and go to state 95
    NOT             shift and go to state 96
    MINUS           shift and go to state 94
    PLUS            shift and go to state 93
    INT_NUMBER      shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99
    FLOAT_NUMBER    shift and go to state 100
    STRING_NUMBER   shift and go to state 101
    LOG             shift and go to state 102
    LN              shift and go to state 103
    EXP             shift and go to state 104
    EQ_STRING       shift and go to state 105

    expression                     shift and go to state 106
    int_number                     shift and go to state 86
    float_number                   shift and go to state 87
    string_number                  shift and go to state 88
    log                            shift and go to state 89
    exp                            shift and go to state 90
    call                           shift and go to state 91
    eq_string                      shift and go to state 92

state 61

    (78) for_statement -> FOR . ID ASSIGN expression TO expression DO statement_list END_FOR SEMICOLON
    (79) for_statement -> FOR . ID ASSIGN expression TO expression BY expression DO statement_list END_FOR SEMICOLON

    ID              shift and go to state 107


state 62

    (67) case_statement -> CASE . ID OF case_list END_CASE SEMICOLON

    ID              shift and go to state 108


state 63

    (29) var_input -> VAR_INPUT declare_list END_VAR .

    BEGIN           reduce using rule 29 (var_input -> VAR_INPUT declare_list END_VAR .)
    VAR_INPUT       reduce using rule 29 (var_input -> VAR_INPUT declare_list END_VAR .)
    VAR_OUTPUT      reduce using rule 29 (var_input -> VAR_INPUT declare_list END_VAR .)
    VAR             reduce using rule 29 (var_input -> VAR_INPUT declare_list END_VAR .)
    VAR_IN_OUT      reduce using rule 29 (var_input -> VAR_INPUT declare_list END_VAR .)
    VAR_GLOBAL      reduce using rule 29 (var_input -> VAR_INPUT declare_list END_VAR .)
    CONST           reduce using rule 29 (var_input -> VAR_INPUT declare_list END_VAR .)
    END_PROGRAM     reduce using rule 29 (var_input -> VAR_INPUT declare_list END_VAR .)
    ID              reduce using rule 29 (var_input -> VAR_INPUT declare_list END_VAR .)
    WHILE           reduce using rule 29 (var_input -> VAR_INPUT declare_list END_VAR .)
    IF              reduce using rule 29 (var_input -> VAR_INPUT declare_list END_VAR .)
    FOR             reduce using rule 29 (var_input -> VAR_INPUT declare_list END_VAR .)
    CASE            reduce using rule 29 (var_input -> VAR_INPUT declare_list END_VAR .)
    END_FUNCTION_BLOCK reduce using rule 29 (var_input -> VAR_INPUT declare_list END_VAR .)
    END_FUNCTION    reduce using rule 29 (var_input -> VAR_INPUT declare_list END_VAR .)


state 64

    (42) declare_list -> declare_list declare_int_statement .

    END_VAR         reduce using rule 42 (declare_list -> declare_list declare_int_statement .)
    ID              reduce using rule 42 (declare_list -> declare_list declare_int_statement .)
    END_CONST       reduce using rule 42 (declare_list -> declare_list declare_int_statement .)


state 65

    (43) declare_list -> declare_list declare_float_statement .

    END_VAR         reduce using rule 43 (declare_list -> declare_list declare_float_statement .)
    ID              reduce using rule 43 (declare_list -> declare_list declare_float_statement .)
    END_CONST       reduce using rule 43 (declare_list -> declare_list declare_float_statement .)


state 66

    (44) declare_list -> declare_list declare_timer_statement .

    END_VAR         reduce using rule 44 (declare_list -> declare_list declare_timer_statement .)
    ID              reduce using rule 44 (declare_list -> declare_list declare_timer_statement .)
    END_CONST       reduce using rule 44 (declare_list -> declare_list declare_timer_statement .)


state 67

    (49) declare_int_statement -> ID . COLON INT ASSIGN int_number SEMICOLON
    (50) declare_int_statement -> ID . COLON BOOL ASSIGN int_number SEMICOLON
    (51) declare_int_statement -> ID . COLON BYTE ASSIGN int_number SEMICOLON
    (52) declare_int_statement -> ID . COLON TIME ASSIGN int_number SEMICOLON
    (53) declare_int_statement -> ID . COLON DWORD ASSIGN int_number SEMICOLON
    (54) declare_int_statement -> ID . COLON STRING ASSIGN string_number SEMICOLON
    (55) declare_int_statement -> ID . COLON BYTE ASSIGN ID SEMICOLON
    (56) declare_int_statement -> ID . COLON TIME ASSIGN ID SEMICOLON
    (57) declare_int_statement -> ID . COLON INT SEMICOLON
    (58) declare_int_statement -> ID . COLON BOOL SEMICOLON
    (59) declare_int_statement -> ID . COLON BYTE SEMICOLON
    (60) declare_int_statement -> ID . COLON TIME SEMICOLON
    (61) declare_int_statement -> ID . COLON DWORD SEMICOLON
    (62) declare_int_statement -> ID . COLON STRING SEMICOLON
    (63) declare_float_statement -> ID . COLON FLOAT ASSIGN float_number SEMICOLON
    (64) declare_float_statement -> ID . COLON FLOAT SEMICOLON
    (65) declare_float_statement -> ID . COLON REAL ASSIGN float_number SEMICOLON
    (66) declare_float_statement -> ID . COLON REAL SEMICOLON
    (45) declare_timer_statement -> ID . COLON TP SEMICOLON
    (46) declare_timer_statement -> ID . COLON TON SEMICOLON
    (47) declare_timer_statement -> ID . COLON TOF SEMICOLON
    (48) declare_timer_statement -> ID . COLON RTC SEMICOLON

    COLON           shift and go to state 109


state 68

    (28) var_output -> VAR_OUTPUT declare_list END_VAR .

    BEGIN           reduce using rule 28 (var_output -> VAR_OUTPUT declare_list END_VAR .)
    VAR_INPUT       reduce using rule 28 (var_output -> VAR_OUTPUT declare_list END_VAR .)
    VAR_OUTPUT      reduce using rule 28 (var_output -> VAR_OUTPUT declare_list END_VAR .)
    VAR             reduce using rule 28 (var_output -> VAR_OUTPUT declare_list END_VAR .)
    VAR_IN_OUT      reduce using rule 28 (var_output -> VAR_OUTPUT declare_list END_VAR .)
    VAR_GLOBAL      reduce using rule 28 (var_output -> VAR_OUTPUT declare_list END_VAR .)
    CONST           reduce using rule 28 (var_output -> VAR_OUTPUT declare_list END_VAR .)
    END_PROGRAM     reduce using rule 28 (var_output -> VAR_OUTPUT declare_list END_VAR .)
    ID              reduce using rule 28 (var_output -> VAR_OUTPUT declare_list END_VAR .)
    WHILE           reduce using rule 28 (var_output -> VAR_OUTPUT declare_list END_VAR .)
    IF              reduce using rule 28 (var_output -> VAR_OUTPUT declare_list END_VAR .)
    FOR             reduce using rule 28 (var_output -> VAR_OUTPUT declare_list END_VAR .)
    CASE            reduce using rule 28 (var_output -> VAR_OUTPUT declare_list END_VAR .)
    END_FUNCTION_BLOCK reduce using rule 28 (var_output -> VAR_OUTPUT declare_list END_VAR .)
    END_FUNCTION    reduce using rule 28 (var_output -> VAR_OUTPUT declare_list END_VAR .)


state 69

    (31) var -> VAR declare_list END_VAR .

    BEGIN           reduce using rule 31 (var -> VAR declare_list END_VAR .)
    VAR_INPUT       reduce using rule 31 (var -> VAR declare_list END_VAR .)
    VAR_OUTPUT      reduce using rule 31 (var -> VAR declare_list END_VAR .)
    VAR             reduce using rule 31 (var -> VAR declare_list END_VAR .)
    VAR_IN_OUT      reduce using rule 31 (var -> VAR declare_list END_VAR .)
    VAR_GLOBAL      reduce using rule 31 (var -> VAR declare_list END_VAR .)
    CONST           reduce using rule 31 (var -> VAR declare_list END_VAR .)
    END_PROGRAM     reduce using rule 31 (var -> VAR declare_list END_VAR .)
    ID              reduce using rule 31 (var -> VAR declare_list END_VAR .)
    WHILE           reduce using rule 31 (var -> VAR declare_list END_VAR .)
    IF              reduce using rule 31 (var -> VAR declare_list END_VAR .)
    FOR             reduce using rule 31 (var -> VAR declare_list END_VAR .)
    CASE            reduce using rule 31 (var -> VAR declare_list END_VAR .)
    END_FUNCTION_BLOCK reduce using rule 31 (var -> VAR declare_list END_VAR .)
    END_FUNCTION    reduce using rule 31 (var -> VAR declare_list END_VAR .)


state 70

    (30) var_in_out -> VAR_IN_OUT declare_list END_VAR .

    BEGIN           reduce using rule 30 (var_in_out -> VAR_IN_OUT declare_list END_VAR .)
    VAR_INPUT       reduce using rule 30 (var_in_out -> VAR_IN_OUT declare_list END_VAR .)
    VAR_OUTPUT      reduce using rule 30 (var_in_out -> VAR_IN_OUT declare_list END_VAR .)
    VAR             reduce using rule 30 (var_in_out -> VAR_IN_OUT declare_list END_VAR .)
    VAR_IN_OUT      reduce using rule 30 (var_in_out -> VAR_IN_OUT declare_list END_VAR .)
    VAR_GLOBAL      reduce using rule 30 (var_in_out -> VAR_IN_OUT declare_list END_VAR .)
    CONST           reduce using rule 30 (var_in_out -> VAR_IN_OUT declare_list END_VAR .)
    END_PROGRAM     reduce using rule 30 (var_in_out -> VAR_IN_OUT declare_list END_VAR .)
    ID              reduce using rule 30 (var_in_out -> VAR_IN_OUT declare_list END_VAR .)
    WHILE           reduce using rule 30 (var_in_out -> VAR_IN_OUT declare_list END_VAR .)
    IF              reduce using rule 30 (var_in_out -> VAR_IN_OUT declare_list END_VAR .)
    FOR             reduce using rule 30 (var_in_out -> VAR_IN_OUT declare_list END_VAR .)
    CASE            reduce using rule 30 (var_in_out -> VAR_IN_OUT declare_list END_VAR .)
    END_FUNCTION_BLOCK reduce using rule 30 (var_in_out -> VAR_IN_OUT declare_list END_VAR .)
    END_FUNCTION    reduce using rule 30 (var_in_out -> VAR_IN_OUT declare_list END_VAR .)


state 71

    (33) var_global -> VAR_GLOBAL declare_list END_VAR .

    BEGIN           reduce using rule 33 (var_global -> VAR_GLOBAL declare_list END_VAR .)
    VAR_INPUT       reduce using rule 33 (var_global -> VAR_GLOBAL declare_list END_VAR .)
    VAR_OUTPUT      reduce using rule 33 (var_global -> VAR_GLOBAL declare_list END_VAR .)
    VAR             reduce using rule 33 (var_global -> VAR_GLOBAL declare_list END_VAR .)
    VAR_IN_OUT      reduce using rule 33 (var_global -> VAR_GLOBAL declare_list END_VAR .)
    VAR_GLOBAL      reduce using rule 33 (var_global -> VAR_GLOBAL declare_list END_VAR .)
    CONST           reduce using rule 33 (var_global -> VAR_GLOBAL declare_list END_VAR .)
    END_PROGRAM     reduce using rule 33 (var_global -> VAR_GLOBAL declare_list END_VAR .)
    ID              reduce using rule 33 (var_global -> VAR_GLOBAL declare_list END_VAR .)
    WHILE           reduce using rule 33 (var_global -> VAR_GLOBAL declare_list END_VAR .)
    IF              reduce using rule 33 (var_global -> VAR_GLOBAL declare_list END_VAR .)
    FOR             reduce using rule 33 (var_global -> VAR_GLOBAL declare_list END_VAR .)
    CASE            reduce using rule 33 (var_global -> VAR_GLOBAL declare_list END_VAR .)
    END_FUNCTION_BLOCK reduce using rule 33 (var_global -> VAR_GLOBAL declare_list END_VAR .)
    END_FUNCTION    reduce using rule 33 (var_global -> VAR_GLOBAL declare_list END_VAR .)


state 72

    (32) const -> CONST declare_list END_CONST .

    BEGIN           reduce using rule 32 (const -> CONST declare_list END_CONST .)
    VAR_INPUT       reduce using rule 32 (const -> CONST declare_list END_CONST .)
    VAR_OUTPUT      reduce using rule 32 (const -> CONST declare_list END_CONST .)
    VAR             reduce using rule 32 (const -> CONST declare_list END_CONST .)
    VAR_IN_OUT      reduce using rule 32 (const -> CONST declare_list END_CONST .)
    VAR_GLOBAL      reduce using rule 32 (const -> CONST declare_list END_CONST .)
    CONST           reduce using rule 32 (const -> CONST declare_list END_CONST .)
    END_PROGRAM     reduce using rule 32 (const -> CONST declare_list END_CONST .)
    ID              reduce using rule 32 (const -> CONST declare_list END_CONST .)
    WHILE           reduce using rule 32 (const -> CONST declare_list END_CONST .)
    IF              reduce using rule 32 (const -> CONST declare_list END_CONST .)
    FOR             reduce using rule 32 (const -> CONST declare_list END_CONST .)
    CASE            reduce using rule 32 (const -> CONST declare_list END_CONST .)
    END_FUNCTION_BLOCK reduce using rule 32 (const -> CONST declare_list END_CONST .)
    END_FUNCTION    reduce using rule 32 (const -> CONST declare_list END_CONST .)


state 73

    (9) function_block_definition -> FUNCTION_BLOCK ID var_list BEGIN statement_list . END_FUNCTION_BLOCK
    (35) statement_list -> statement_list . assign_statement
    (36) statement_list -> statement_list . while_statement
    (37) statement_list -> statement_list . if_statement
    (38) statement_list -> statement_list . for_statement
    (39) statement_list -> statement_list . call_statement
    (40) statement_list -> statement_list . case_statement
    (81) assign_statement -> . ID ASSIGN expression SEMICOLON
    (80) while_statement -> . WHILE expression DO statement_list END_WHILE
    (70) if_statement -> . IF expression THEN statement_list END_IF SEMICOLON
    (71) if_statement -> . IF expression THEN statement_list elsif_statement_list END_IF SEMICOLON
    (72) if_statement -> . IF expression THEN statement_list else_statement END_IF SEMICOLON
    (73) if_statement -> . IF expression THEN statement_list elsif_statement_list else_statement END_IF SEMICOLON
    (78) for_statement -> . FOR ID ASSIGN expression TO expression DO statement_list END_FOR SEMICOLON
    (79) for_statement -> . FOR ID ASSIGN expression TO expression BY expression DO statement_list END_FOR SEMICOLON
    (106) call_statement -> . ID argument RPAREN SEMICOLON
    (67) case_statement -> . CASE ID OF case_list END_CASE SEMICOLON

    END_FUNCTION_BLOCK shift and go to state 110
    ID              shift and go to state 51
    WHILE           shift and go to state 59
    IF              shift and go to state 60
    FOR             shift and go to state 61
    CASE            shift and go to state 62

    assign_statement               shift and go to state 53
    while_statement                shift and go to state 54
    if_statement                   shift and go to state 55
    for_statement                  shift and go to state 56
    call_statement                 shift and go to state 57
    case_statement                 shift and go to state 58

state 74

    (10) function_block_definition -> FUNCTION_BLOCK ID var_list statement_list END_FUNCTION_BLOCK .

    FUNCTION_BLOCK  reduce using rule 10 (function_block_definition -> FUNCTION_BLOCK ID var_list statement_list END_FUNCTION_BLOCK .)
    FUNCTION        reduce using rule 10 (function_block_definition -> FUNCTION_BLOCK ID var_list statement_list END_FUNCTION_BLOCK .)
    PROGRAM         reduce using rule 10 (function_block_definition -> FUNCTION_BLOCK ID var_list statement_list END_FUNCTION_BLOCK .)
    $end            reduce using rule 10 (function_block_definition -> FUNCTION_BLOCK ID var_list statement_list END_FUNCTION_BLOCK .)


state 75

    (11) function_definition -> FUNCTION ID COLON INT var_list . statement_list END_FUNCTION
    (22) var_list -> var_list . var_input
    (23) var_list -> var_list . var_output
    (24) var_list -> var_list . var
    (25) var_list -> var_list . var_in_out
    (26) var_list -> var_list . var_global
    (27) var_list -> var_list . const
    (34) statement_list -> .
    (35) statement_list -> . statement_list assign_statement
    (36) statement_list -> . statement_list while_statement
    (37) statement_list -> . statement_list if_statement
    (38) statement_list -> . statement_list for_statement
    (39) statement_list -> . statement_list call_statement
    (40) statement_list -> . statement_list case_statement
    (29) var_input -> . VAR_INPUT declare_list END_VAR
    (28) var_output -> . VAR_OUTPUT declare_list END_VAR
    (31) var -> . VAR declare_list END_VAR
    (30) var_in_out -> . VAR_IN_OUT declare_list END_VAR
    (33) var_global -> . VAR_GLOBAL declare_list END_VAR
    (32) const -> . CONST declare_list END_CONST

    END_FUNCTION    reduce using rule 34 (statement_list -> .)
    ID              reduce using rule 34 (statement_list -> .)
    WHILE           reduce using rule 34 (statement_list -> .)
    IF              reduce using rule 34 (statement_list -> .)
    FOR             reduce using rule 34 (statement_list -> .)
    CASE            reduce using rule 34 (statement_list -> .)
    VAR_INPUT       shift and go to state 21
    VAR_OUTPUT      shift and go to state 22
    VAR             shift and go to state 23
    VAR_IN_OUT      shift and go to state 24
    VAR_GLOBAL      shift and go to state 25
    CONST           shift and go to state 26

    statement_list                 shift and go to state 111
    var_input                      shift and go to state 31
    var_output                     shift and go to state 32
    var                            shift and go to state 33
    var_in_out                     shift and go to state 34
    var_global                     shift and go to state 35
    const                          shift and go to state 36

state 76

    (12) function_definition -> FUNCTION ID COLON BOOL var_list . statement_list END_FUNCTION
    (22) var_list -> var_list . var_input
    (23) var_list -> var_list . var_output
    (24) var_list -> var_list . var
    (25) var_list -> var_list . var_in_out
    (26) var_list -> var_list . var_global
    (27) var_list -> var_list . const
    (34) statement_list -> .
    (35) statement_list -> . statement_list assign_statement
    (36) statement_list -> . statement_list while_statement
    (37) statement_list -> . statement_list if_statement
    (38) statement_list -> . statement_list for_statement
    (39) statement_list -> . statement_list call_statement
    (40) statement_list -> . statement_list case_statement
    (29) var_input -> . VAR_INPUT declare_list END_VAR
    (28) var_output -> . VAR_OUTPUT declare_list END_VAR
    (31) var -> . VAR declare_list END_VAR
    (30) var_in_out -> . VAR_IN_OUT declare_list END_VAR
    (33) var_global -> . VAR_GLOBAL declare_list END_VAR
    (32) const -> . CONST declare_list END_CONST

    END_FUNCTION    reduce using rule 34 (statement_list -> .)
    ID              reduce using rule 34 (statement_list -> .)
    WHILE           reduce using rule 34 (statement_list -> .)
    IF              reduce using rule 34 (statement_list -> .)
    FOR             reduce using rule 34 (statement_list -> .)
    CASE            reduce using rule 34 (statement_list -> .)
    VAR_INPUT       shift and go to state 21
    VAR_OUTPUT      shift and go to state 22
    VAR             shift and go to state 23
    VAR_IN_OUT      shift and go to state 24
    VAR_GLOBAL      shift and go to state 25
    CONST           shift and go to state 26

    statement_list                 shift and go to state 112
    var_input                      shift and go to state 31
    var_output                     shift and go to state 32
    var                            shift and go to state 33
    var_in_out                     shift and go to state 34
    var_global                     shift and go to state 35
    const                          shift and go to state 36

state 77

    (13) function_definition -> FUNCTION ID COLON REAL var_list . statement_list END_FUNCTION
    (22) var_list -> var_list . var_input
    (23) var_list -> var_list . var_output
    (24) var_list -> var_list . var
    (25) var_list -> var_list . var_in_out
    (26) var_list -> var_list . var_global
    (27) var_list -> var_list . const
    (34) statement_list -> .
    (35) statement_list -> . statement_list assign_statement
    (36) statement_list -> . statement_list while_statement
    (37) statement_list -> . statement_list if_statement
    (38) statement_list -> . statement_list for_statement
    (39) statement_list -> . statement_list call_statement
    (40) statement_list -> . statement_list case_statement
    (29) var_input -> . VAR_INPUT declare_list END_VAR
    (28) var_output -> . VAR_OUTPUT declare_list END_VAR
    (31) var -> . VAR declare_list END_VAR
    (30) var_in_out -> . VAR_IN_OUT declare_list END_VAR
    (33) var_global -> . VAR_GLOBAL declare_list END_VAR
    (32) const -> . CONST declare_list END_CONST

    END_FUNCTION    reduce using rule 34 (statement_list -> .)
    ID              reduce using rule 34 (statement_list -> .)
    WHILE           reduce using rule 34 (statement_list -> .)
    IF              reduce using rule 34 (statement_list -> .)
    FOR             reduce using rule 34 (statement_list -> .)
    CASE            reduce using rule 34 (statement_list -> .)
    VAR_INPUT       shift and go to state 21
    VAR_OUTPUT      shift and go to state 22
    VAR             shift and go to state 23
    VAR_IN_OUT      shift and go to state 24
    VAR_GLOBAL      shift and go to state 25
    CONST           shift and go to state 26

    statement_list                 shift and go to state 113
    var_input                      shift and go to state 31
    var_output                     shift and go to state 32
    var                            shift and go to state 33
    var_in_out                     shift and go to state 34
    var_global                     shift and go to state 35
    const                          shift and go to state 36

state 78

    (14) function_definition -> FUNCTION ID COLON FLOAT var_list . statement_list END_FUNCTION
    (22) var_list -> var_list . var_input
    (23) var_list -> var_list . var_output
    (24) var_list -> var_list . var
    (25) var_list -> var_list . var_in_out
    (26) var_list -> var_list . var_global
    (27) var_list -> var_list . const
    (34) statement_list -> .
    (35) statement_list -> . statement_list assign_statement
    (36) statement_list -> . statement_list while_statement
    (37) statement_list -> . statement_list if_statement
    (38) statement_list -> . statement_list for_statement
    (39) statement_list -> . statement_list call_statement
    (40) statement_list -> . statement_list case_statement
    (29) var_input -> . VAR_INPUT declare_list END_VAR
    (28) var_output -> . VAR_OUTPUT declare_list END_VAR
    (31) var -> . VAR declare_list END_VAR
    (30) var_in_out -> . VAR_IN_OUT declare_list END_VAR
    (33) var_global -> . VAR_GLOBAL declare_list END_VAR
    (32) const -> . CONST declare_list END_CONST

    END_FUNCTION    reduce using rule 34 (statement_list -> .)
    ID              reduce using rule 34 (statement_list -> .)
    WHILE           reduce using rule 34 (statement_list -> .)
    IF              reduce using rule 34 (statement_list -> .)
    FOR             reduce using rule 34 (statement_list -> .)
    CASE            reduce using rule 34 (statement_list -> .)
    VAR_INPUT       shift and go to state 21
    VAR_OUTPUT      shift and go to state 22
    VAR             shift and go to state 23
    VAR_IN_OUT      shift and go to state 24
    VAR_GLOBAL      shift and go to state 25
    CONST           shift and go to state 26

    statement_list                 shift and go to state 114
    var_input                      shift and go to state 31
    var_output                     shift and go to state 32
    var                            shift and go to state 33
    var_in_out                     shift and go to state 34
    var_global                     shift and go to state 35
    const                          shift and go to state 36

state 79

    (15) function_definition -> FUNCTION ID COLON BYTE var_list . statement_list END_FUNCTION
    (22) var_list -> var_list . var_input
    (23) var_list -> var_list . var_output
    (24) var_list -> var_list . var
    (25) var_list -> var_list . var_in_out
    (26) var_list -> var_list . var_global
    (27) var_list -> var_list . const
    (34) statement_list -> .
    (35) statement_list -> . statement_list assign_statement
    (36) statement_list -> . statement_list while_statement
    (37) statement_list -> . statement_list if_statement
    (38) statement_list -> . statement_list for_statement
    (39) statement_list -> . statement_list call_statement
    (40) statement_list -> . statement_list case_statement
    (29) var_input -> . VAR_INPUT declare_list END_VAR
    (28) var_output -> . VAR_OUTPUT declare_list END_VAR
    (31) var -> . VAR declare_list END_VAR
    (30) var_in_out -> . VAR_IN_OUT declare_list END_VAR
    (33) var_global -> . VAR_GLOBAL declare_list END_VAR
    (32) const -> . CONST declare_list END_CONST

    END_FUNCTION    reduce using rule 34 (statement_list -> .)
    ID              reduce using rule 34 (statement_list -> .)
    WHILE           reduce using rule 34 (statement_list -> .)
    IF              reduce using rule 34 (statement_list -> .)
    FOR             reduce using rule 34 (statement_list -> .)
    CASE            reduce using rule 34 (statement_list -> .)
    VAR_INPUT       shift and go to state 21
    VAR_OUTPUT      shift and go to state 22
    VAR             shift and go to state 23
    VAR_IN_OUT      shift and go to state 24
    VAR_GLOBAL      shift and go to state 25
    CONST           shift and go to state 26

    statement_list                 shift and go to state 115
    var_input                      shift and go to state 31
    var_output                     shift and go to state 32
    var                            shift and go to state 33
    var_in_out                     shift and go to state 34
    var_global                     shift and go to state 35
    const                          shift and go to state 36

state 80

    (7) program -> PROGRAM ID var_list BEGIN statement_list END_PROGRAM .

    FUNCTION_BLOCK  reduce using rule 7 (program -> PROGRAM ID var_list BEGIN statement_list END_PROGRAM .)
    FUNCTION        reduce using rule 7 (program -> PROGRAM ID var_list BEGIN statement_list END_PROGRAM .)
    PROGRAM         reduce using rule 7 (program -> PROGRAM ID var_list BEGIN statement_list END_PROGRAM .)
    $end            reduce using rule 7 (program -> PROGRAM ID var_list BEGIN statement_list END_PROGRAM .)


state 81

    (81) assign_statement -> ID ASSIGN . expression SEMICOLON
    (82) expression -> . ID
    (83) expression -> . int_number
    (84) expression -> . float_number
    (85) expression -> . string_number
    (86) expression -> . log
    (87) expression -> . exp
    (88) expression -> . call
    (89) expression -> . eq_string
    (90) expression -> . expression PLUS expression
    (91) expression -> . expression MINUS expression
    (92) expression -> . expression TIMES expression
    (93) expression -> . expression DIVIDE expression
    (94) expression -> . expression AND expression
    (95) expression -> . expression OR expression
    (96) expression -> . expression XOR expression
    (97) expression -> . expression LT expression
    (98) expression -> . expression GT expression
    (99) expression -> . expression LE expression
    (100) expression -> . expression GE expression
    (101) expression -> . expression EQ expression
    (102) expression -> . LPAREN expression RPAREN
    (103) expression -> . NOT expression
    (104) expression -> . MINUS expression
    (105) expression -> . PLUS expression
    (115) int_number -> . INT_NUMBER
    (116) int_number -> . TRUE
    (117) int_number -> . FALSE
    (118) int_number -> . ID
    (119) float_number -> . FLOAT_NUMBER
    (120) float_number -> . ID
    (121) string_number -> . STRING_NUMBER
    (113) log -> . LOG LPAREN expression RPAREN
    (114) log -> . LN LPAREN expression RPAREN
    (112) exp -> . EXP LPAREN expression RPAREN
    (110) call -> . ID DOT ID
    (111) eq_string -> . EQ_STRING LPAREN ID COMMA ID RPAREN

    ID              shift and go to state 85
    LPAREN          shift and go to state 95
    NOT             shift and go to state 96
    MINUS           shift and go to state 94
    PLUS            shift and go to state 93
    INT_NUMBER      shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99
    FLOAT_NUMBER    shift and go to state 100
    STRING_NUMBER   shift and go to state 101
    LOG             shift and go to state 102
    LN              shift and go to state 103
    EXP             shift and go to state 104
    EQ_STRING       shift and go to state 105

    expression                     shift and go to state 116
    int_number                     shift and go to state 86
    float_number                   shift and go to state 87
    string_number                  shift and go to state 88
    log                            shift and go to state 89
    exp                            shift and go to state 90
    call                           shift and go to state 91
    eq_string                      shift and go to state 92

state 82

    (106) call_statement -> ID argument . RPAREN SEMICOLON
    (108) argument -> argument . ID ASSIGN expression
    (109) argument -> argument . COMMA ID ASSIGN expression

    RPAREN          shift and go to state 118
    ID              shift and go to state 117
    COMMA           shift and go to state 119


state 83

    (107) argument -> LPAREN .

    RPAREN          reduce using rule 107 (argument -> LPAREN .)
    ID              reduce using rule 107 (argument -> LPAREN .)
    COMMA           reduce using rule 107 (argument -> LPAREN .)


state 84

    (80) while_statement -> WHILE expression . DO statement_list END_WHILE
    (90) expression -> expression . PLUS expression
    (91) expression -> expression . MINUS expression
    (92) expression -> expression . TIMES expression
    (93) expression -> expression . DIVIDE expression
    (94) expression -> expression . AND expression
    (95) expression -> expression . OR expression
    (96) expression -> expression . XOR expression
    (97) expression -> expression . LT expression
    (98) expression -> expression . GT expression
    (99) expression -> expression . LE expression
    (100) expression -> expression . GE expression
    (101) expression -> expression . EQ expression

    DO              shift and go to state 120
    PLUS            shift and go to state 121
    MINUS           shift and go to state 122
    TIMES           shift and go to state 123
    DIVIDE          shift and go to state 124
    AND             shift and go to state 125
    OR              shift and go to state 126
    XOR             shift and go to state 127
    LT              shift and go to state 128
    GT              shift and go to state 129
    LE              shift and go to state 130
    GE              shift and go to state 131
    EQ              shift and go to state 132


state 85

    (82) expression -> ID .
    (118) int_number -> ID .
    (120) float_number -> ID .
    (110) call -> ID . DOT ID

  ! reduce/reduce conflict for DO resolved using rule 82 (expression -> ID .)
  ! reduce/reduce conflict for PLUS resolved using rule 82 (expression -> ID .)
  ! reduce/reduce conflict for MINUS resolved using rule 82 (expression -> ID .)
  ! reduce/reduce conflict for TIMES resolved using rule 82 (expression -> ID .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 82 (expression -> ID .)
  ! reduce/reduce conflict for AND resolved using rule 82 (expression -> ID .)
  ! reduce/reduce conflict for OR resolved using rule 82 (expression -> ID .)
  ! reduce/reduce conflict for XOR resolved using rule 82 (expression -> ID .)
  ! reduce/reduce conflict for LT resolved using rule 82 (expression -> ID .)
  ! reduce/reduce conflict for GT resolved using rule 82 (expression -> ID .)
  ! reduce/reduce conflict for LE resolved using rule 82 (expression -> ID .)
  ! reduce/reduce conflict for GE resolved using rule 82 (expression -> ID .)
  ! reduce/reduce conflict for EQ resolved using rule 82 (expression -> ID .)
  ! reduce/reduce conflict for THEN resolved using rule 82 (expression -> ID .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 82 (expression -> ID .)
  ! reduce/reduce conflict for RPAREN resolved using rule 82 (expression -> ID .)
  ! reduce/reduce conflict for TO resolved using rule 82 (expression -> ID .)
  ! reduce/reduce conflict for COLON resolved using rule 82 (expression -> ID .)
  ! reduce/reduce conflict for ID resolved using rule 82 (expression -> ID .)
  ! reduce/reduce conflict for COMMA resolved using rule 82 (expression -> ID .)
  ! reduce/reduce conflict for BY resolved using rule 82 (expression -> ID .)
  ! reduce/reduce conflict for DO resolved using rule 82 (expression -> ID .)
  ! reduce/reduce conflict for PLUS resolved using rule 82 (expression -> ID .)
  ! reduce/reduce conflict for MINUS resolved using rule 82 (expression -> ID .)
  ! reduce/reduce conflict for TIMES resolved using rule 82 (expression -> ID .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 82 (expression -> ID .)
  ! reduce/reduce conflict for AND resolved using rule 82 (expression -> ID .)
  ! reduce/reduce conflict for OR resolved using rule 82 (expression -> ID .)
  ! reduce/reduce conflict for XOR resolved using rule 82 (expression -> ID .)
  ! reduce/reduce conflict for LT resolved using rule 82 (expression -> ID .)
  ! reduce/reduce conflict for GT resolved using rule 82 (expression -> ID .)
  ! reduce/reduce conflict for LE resolved using rule 82 (expression -> ID .)
  ! reduce/reduce conflict for GE resolved using rule 82 (expression -> ID .)
  ! reduce/reduce conflict for EQ resolved using rule 82 (expression -> ID .)
  ! reduce/reduce conflict for THEN resolved using rule 82 (expression -> ID .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 82 (expression -> ID .)
  ! reduce/reduce conflict for RPAREN resolved using rule 82 (expression -> ID .)
  ! reduce/reduce conflict for TO resolved using rule 82 (expression -> ID .)
  ! reduce/reduce conflict for COLON resolved using rule 82 (expression -> ID .)
  ! reduce/reduce conflict for ID resolved using rule 82 (expression -> ID .)
  ! reduce/reduce conflict for COMMA resolved using rule 82 (expression -> ID .)
  ! reduce/reduce conflict for BY resolved using rule 82 (expression -> ID .)
    DO              reduce using rule 82 (expression -> ID .)
    PLUS            reduce using rule 82 (expression -> ID .)
    MINUS           reduce using rule 82 (expression -> ID .)
    TIMES           reduce using rule 82 (expression -> ID .)
    DIVIDE          reduce using rule 82 (expression -> ID .)
    AND             reduce using rule 82 (expression -> ID .)
    OR              reduce using rule 82 (expression -> ID .)
    XOR             reduce using rule 82 (expression -> ID .)
    LT              reduce using rule 82 (expression -> ID .)
    GT              reduce using rule 82 (expression -> ID .)
    LE              reduce using rule 82 (expression -> ID .)
    GE              reduce using rule 82 (expression -> ID .)
    EQ              reduce using rule 82 (expression -> ID .)
    THEN            reduce using rule 82 (expression -> ID .)
    SEMICOLON       reduce using rule 82 (expression -> ID .)
    RPAREN          reduce using rule 82 (expression -> ID .)
    TO              reduce using rule 82 (expression -> ID .)
    COLON           reduce using rule 82 (expression -> ID .)
    ID              reduce using rule 82 (expression -> ID .)
    COMMA           reduce using rule 82 (expression -> ID .)
    BY              reduce using rule 82 (expression -> ID .)
    DOT             shift and go to state 133

  ! DO              [ reduce using rule 118 (int_number -> ID .) ]
  ! PLUS            [ reduce using rule 118 (int_number -> ID .) ]
  ! MINUS           [ reduce using rule 118 (int_number -> ID .) ]
  ! TIMES           [ reduce using rule 118 (int_number -> ID .) ]
  ! DIVIDE          [ reduce using rule 118 (int_number -> ID .) ]
  ! AND             [ reduce using rule 118 (int_number -> ID .) ]
  ! OR              [ reduce using rule 118 (int_number -> ID .) ]
  ! XOR             [ reduce using rule 118 (int_number -> ID .) ]
  ! LT              [ reduce using rule 118 (int_number -> ID .) ]
  ! GT              [ reduce using rule 118 (int_number -> ID .) ]
  ! LE              [ reduce using rule 118 (int_number -> ID .) ]
  ! GE              [ reduce using rule 118 (int_number -> ID .) ]
  ! EQ              [ reduce using rule 118 (int_number -> ID .) ]
  ! THEN            [ reduce using rule 118 (int_number -> ID .) ]
  ! SEMICOLON       [ reduce using rule 118 (int_number -> ID .) ]
  ! RPAREN          [ reduce using rule 118 (int_number -> ID .) ]
  ! TO              [ reduce using rule 118 (int_number -> ID .) ]
  ! COLON           [ reduce using rule 118 (int_number -> ID .) ]
  ! ID              [ reduce using rule 118 (int_number -> ID .) ]
  ! COMMA           [ reduce using rule 118 (int_number -> ID .) ]
  ! BY              [ reduce using rule 118 (int_number -> ID .) ]
  ! DO              [ reduce using rule 120 (float_number -> ID .) ]
  ! PLUS            [ reduce using rule 120 (float_number -> ID .) ]
  ! MINUS           [ reduce using rule 120 (float_number -> ID .) ]
  ! TIMES           [ reduce using rule 120 (float_number -> ID .) ]
  ! DIVIDE          [ reduce using rule 120 (float_number -> ID .) ]
  ! AND             [ reduce using rule 120 (float_number -> ID .) ]
  ! OR              [ reduce using rule 120 (float_number -> ID .) ]
  ! XOR             [ reduce using rule 120 (float_number -> ID .) ]
  ! LT              [ reduce using rule 120 (float_number -> ID .) ]
  ! GT              [ reduce using rule 120 (float_number -> ID .) ]
  ! LE              [ reduce using rule 120 (float_number -> ID .) ]
  ! GE              [ reduce using rule 120 (float_number -> ID .) ]
  ! EQ              [ reduce using rule 120 (float_number -> ID .) ]
  ! THEN            [ reduce using rule 120 (float_number -> ID .) ]
  ! SEMICOLON       [ reduce using rule 120 (float_number -> ID .) ]
  ! RPAREN          [ reduce using rule 120 (float_number -> ID .) ]
  ! TO              [ reduce using rule 120 (float_number -> ID .) ]
  ! COLON           [ reduce using rule 120 (float_number -> ID .) ]
  ! ID              [ reduce using rule 120 (float_number -> ID .) ]
  ! COMMA           [ reduce using rule 120 (float_number -> ID .) ]
  ! BY              [ reduce using rule 120 (float_number -> ID .) ]


state 86

    (83) expression -> int_number .

    DO              reduce using rule 83 (expression -> int_number .)
    PLUS            reduce using rule 83 (expression -> int_number .)
    MINUS           reduce using rule 83 (expression -> int_number .)
    TIMES           reduce using rule 83 (expression -> int_number .)
    DIVIDE          reduce using rule 83 (expression -> int_number .)
    AND             reduce using rule 83 (expression -> int_number .)
    OR              reduce using rule 83 (expression -> int_number .)
    XOR             reduce using rule 83 (expression -> int_number .)
    LT              reduce using rule 83 (expression -> int_number .)
    GT              reduce using rule 83 (expression -> int_number .)
    LE              reduce using rule 83 (expression -> int_number .)
    GE              reduce using rule 83 (expression -> int_number .)
    EQ              reduce using rule 83 (expression -> int_number .)
    THEN            reduce using rule 83 (expression -> int_number .)
    SEMICOLON       reduce using rule 83 (expression -> int_number .)
    RPAREN          reduce using rule 83 (expression -> int_number .)
    TO              reduce using rule 83 (expression -> int_number .)
    COLON           reduce using rule 83 (expression -> int_number .)
    ID              reduce using rule 83 (expression -> int_number .)
    COMMA           reduce using rule 83 (expression -> int_number .)
    BY              reduce using rule 83 (expression -> int_number .)


state 87

    (84) expression -> float_number .

    DO              reduce using rule 84 (expression -> float_number .)
    PLUS            reduce using rule 84 (expression -> float_number .)
    MINUS           reduce using rule 84 (expression -> float_number .)
    TIMES           reduce using rule 84 (expression -> float_number .)
    DIVIDE          reduce using rule 84 (expression -> float_number .)
    AND             reduce using rule 84 (expression -> float_number .)
    OR              reduce using rule 84 (expression -> float_number .)
    XOR             reduce using rule 84 (expression -> float_number .)
    LT              reduce using rule 84 (expression -> float_number .)
    GT              reduce using rule 84 (expression -> float_number .)
    LE              reduce using rule 84 (expression -> float_number .)
    GE              reduce using rule 84 (expression -> float_number .)
    EQ              reduce using rule 84 (expression -> float_number .)
    THEN            reduce using rule 84 (expression -> float_number .)
    SEMICOLON       reduce using rule 84 (expression -> float_number .)
    RPAREN          reduce using rule 84 (expression -> float_number .)
    TO              reduce using rule 84 (expression -> float_number .)
    COLON           reduce using rule 84 (expression -> float_number .)
    ID              reduce using rule 84 (expression -> float_number .)
    COMMA           reduce using rule 84 (expression -> float_number .)
    BY              reduce using rule 84 (expression -> float_number .)


state 88

    (85) expression -> string_number .

    DO              reduce using rule 85 (expression -> string_number .)
    PLUS            reduce using rule 85 (expression -> string_number .)
    MINUS           reduce using rule 85 (expression -> string_number .)
    TIMES           reduce using rule 85 (expression -> string_number .)
    DIVIDE          reduce using rule 85 (expression -> string_number .)
    AND             reduce using rule 85 (expression -> string_number .)
    OR              reduce using rule 85 (expression -> string_number .)
    XOR             reduce using rule 85 (expression -> string_number .)
    LT              reduce using rule 85 (expression -> string_number .)
    GT              reduce using rule 85 (expression -> string_number .)
    LE              reduce using rule 85 (expression -> string_number .)
    GE              reduce using rule 85 (expression -> string_number .)
    EQ              reduce using rule 85 (expression -> string_number .)
    THEN            reduce using rule 85 (expression -> string_number .)
    SEMICOLON       reduce using rule 85 (expression -> string_number .)
    RPAREN          reduce using rule 85 (expression -> string_number .)
    TO              reduce using rule 85 (expression -> string_number .)
    COLON           reduce using rule 85 (expression -> string_number .)
    ID              reduce using rule 85 (expression -> string_number .)
    COMMA           reduce using rule 85 (expression -> string_number .)
    BY              reduce using rule 85 (expression -> string_number .)


state 89

    (86) expression -> log .

    DO              reduce using rule 86 (expression -> log .)
    PLUS            reduce using rule 86 (expression -> log .)
    MINUS           reduce using rule 86 (expression -> log .)
    TIMES           reduce using rule 86 (expression -> log .)
    DIVIDE          reduce using rule 86 (expression -> log .)
    AND             reduce using rule 86 (expression -> log .)
    OR              reduce using rule 86 (expression -> log .)
    XOR             reduce using rule 86 (expression -> log .)
    LT              reduce using rule 86 (expression -> log .)
    GT              reduce using rule 86 (expression -> log .)
    LE              reduce using rule 86 (expression -> log .)
    GE              reduce using rule 86 (expression -> log .)
    EQ              reduce using rule 86 (expression -> log .)
    THEN            reduce using rule 86 (expression -> log .)
    SEMICOLON       reduce using rule 86 (expression -> log .)
    RPAREN          reduce using rule 86 (expression -> log .)
    TO              reduce using rule 86 (expression -> log .)
    COLON           reduce using rule 86 (expression -> log .)
    ID              reduce using rule 86 (expression -> log .)
    COMMA           reduce using rule 86 (expression -> log .)
    BY              reduce using rule 86 (expression -> log .)


state 90

    (87) expression -> exp .

    DO              reduce using rule 87 (expression -> exp .)
    PLUS            reduce using rule 87 (expression -> exp .)
    MINUS           reduce using rule 87 (expression -> exp .)
    TIMES           reduce using rule 87 (expression -> exp .)
    DIVIDE          reduce using rule 87 (expression -> exp .)
    AND             reduce using rule 87 (expression -> exp .)
    OR              reduce using rule 87 (expression -> exp .)
    XOR             reduce using rule 87 (expression -> exp .)
    LT              reduce using rule 87 (expression -> exp .)
    GT              reduce using rule 87 (expression -> exp .)
    LE              reduce using rule 87 (expression -> exp .)
    GE              reduce using rule 87 (expression -> exp .)
    EQ              reduce using rule 87 (expression -> exp .)
    THEN            reduce using rule 87 (expression -> exp .)
    SEMICOLON       reduce using rule 87 (expression -> exp .)
    RPAREN          reduce using rule 87 (expression -> exp .)
    TO              reduce using rule 87 (expression -> exp .)
    COLON           reduce using rule 87 (expression -> exp .)
    ID              reduce using rule 87 (expression -> exp .)
    COMMA           reduce using rule 87 (expression -> exp .)
    BY              reduce using rule 87 (expression -> exp .)


state 91

    (88) expression -> call .

    DO              reduce using rule 88 (expression -> call .)
    PLUS            reduce using rule 88 (expression -> call .)
    MINUS           reduce using rule 88 (expression -> call .)
    TIMES           reduce using rule 88 (expression -> call .)
    DIVIDE          reduce using rule 88 (expression -> call .)
    AND             reduce using rule 88 (expression -> call .)
    OR              reduce using rule 88 (expression -> call .)
    XOR             reduce using rule 88 (expression -> call .)
    LT              reduce using rule 88 (expression -> call .)
    GT              reduce using rule 88 (expression -> call .)
    LE              reduce using rule 88 (expression -> call .)
    GE              reduce using rule 88 (expression -> call .)
    EQ              reduce using rule 88 (expression -> call .)
    THEN            reduce using rule 88 (expression -> call .)
    SEMICOLON       reduce using rule 88 (expression -> call .)
    RPAREN          reduce using rule 88 (expression -> call .)
    TO              reduce using rule 88 (expression -> call .)
    COLON           reduce using rule 88 (expression -> call .)
    ID              reduce using rule 88 (expression -> call .)
    COMMA           reduce using rule 88 (expression -> call .)
    BY              reduce using rule 88 (expression -> call .)


state 92

    (89) expression -> eq_string .

    DO              reduce using rule 89 (expression -> eq_string .)
    PLUS            reduce using rule 89 (expression -> eq_string .)
    MINUS           reduce using rule 89 (expression -> eq_string .)
    TIMES           reduce using rule 89 (expression -> eq_string .)
    DIVIDE          reduce using rule 89 (expression -> eq_string .)
    AND             reduce using rule 89 (expression -> eq_string .)
    OR              reduce using rule 89 (expression -> eq_string .)
    XOR             reduce using rule 89 (expression -> eq_string .)
    LT              reduce using rule 89 (expression -> eq_string .)
    GT              reduce using rule 89 (expression -> eq_string .)
    LE              reduce using rule 89 (expression -> eq_string .)
    GE              reduce using rule 89 (expression -> eq_string .)
    EQ              reduce using rule 89 (expression -> eq_string .)
    THEN            reduce using rule 89 (expression -> eq_string .)
    SEMICOLON       reduce using rule 89 (expression -> eq_string .)
    RPAREN          reduce using rule 89 (expression -> eq_string .)
    TO              reduce using rule 89 (expression -> eq_string .)
    COLON           reduce using rule 89 (expression -> eq_string .)
    ID              reduce using rule 89 (expression -> eq_string .)
    COMMA           reduce using rule 89 (expression -> eq_string .)
    BY              reduce using rule 89 (expression -> eq_string .)


state 93

    (105) expression -> PLUS . expression
    (82) expression -> . ID
    (83) expression -> . int_number
    (84) expression -> . float_number
    (85) expression -> . string_number
    (86) expression -> . log
    (87) expression -> . exp
    (88) expression -> . call
    (89) expression -> . eq_string
    (90) expression -> . expression PLUS expression
    (91) expression -> . expression MINUS expression
    (92) expression -> . expression TIMES expression
    (93) expression -> . expression DIVIDE expression
    (94) expression -> . expression AND expression
    (95) expression -> . expression OR expression
    (96) expression -> . expression XOR expression
    (97) expression -> . expression LT expression
    (98) expression -> . expression GT expression
    (99) expression -> . expression LE expression
    (100) expression -> . expression GE expression
    (101) expression -> . expression EQ expression
    (102) expression -> . LPAREN expression RPAREN
    (103) expression -> . NOT expression
    (104) expression -> . MINUS expression
    (105) expression -> . PLUS expression
    (115) int_number -> . INT_NUMBER
    (116) int_number -> . TRUE
    (117) int_number -> . FALSE
    (118) int_number -> . ID
    (119) float_number -> . FLOAT_NUMBER
    (120) float_number -> . ID
    (121) string_number -> . STRING_NUMBER
    (113) log -> . LOG LPAREN expression RPAREN
    (114) log -> . LN LPAREN expression RPAREN
    (112) exp -> . EXP LPAREN expression RPAREN
    (110) call -> . ID DOT ID
    (111) eq_string -> . EQ_STRING LPAREN ID COMMA ID RPAREN

    ID              shift and go to state 85
    LPAREN          shift and go to state 95
    NOT             shift and go to state 96
    MINUS           shift and go to state 94
    PLUS            shift and go to state 93
    INT_NUMBER      shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99
    FLOAT_NUMBER    shift and go to state 100
    STRING_NUMBER   shift and go to state 101
    LOG             shift and go to state 102
    LN              shift and go to state 103
    EXP             shift and go to state 104
    EQ_STRING       shift and go to state 105

    expression                     shift and go to state 134
    int_number                     shift and go to state 86
    float_number                   shift and go to state 87
    string_number                  shift and go to state 88
    log                            shift and go to state 89
    exp                            shift and go to state 90
    call                           shift and go to state 91
    eq_string                      shift and go to state 92

state 94

    (104) expression -> MINUS . expression
    (82) expression -> . ID
    (83) expression -> . int_number
    (84) expression -> . float_number
    (85) expression -> . string_number
    (86) expression -> . log
    (87) expression -> . exp
    (88) expression -> . call
    (89) expression -> . eq_string
    (90) expression -> . expression PLUS expression
    (91) expression -> . expression MINUS expression
    (92) expression -> . expression TIMES expression
    (93) expression -> . expression DIVIDE expression
    (94) expression -> . expression AND expression
    (95) expression -> . expression OR expression
    (96) expression -> . expression XOR expression
    (97) expression -> . expression LT expression
    (98) expression -> . expression GT expression
    (99) expression -> . expression LE expression
    (100) expression -> . expression GE expression
    (101) expression -> . expression EQ expression
    (102) expression -> . LPAREN expression RPAREN
    (103) expression -> . NOT expression
    (104) expression -> . MINUS expression
    (105) expression -> . PLUS expression
    (115) int_number -> . INT_NUMBER
    (116) int_number -> . TRUE
    (117) int_number -> . FALSE
    (118) int_number -> . ID
    (119) float_number -> . FLOAT_NUMBER
    (120) float_number -> . ID
    (121) string_number -> . STRING_NUMBER
    (113) log -> . LOG LPAREN expression RPAREN
    (114) log -> . LN LPAREN expression RPAREN
    (112) exp -> . EXP LPAREN expression RPAREN
    (110) call -> . ID DOT ID
    (111) eq_string -> . EQ_STRING LPAREN ID COMMA ID RPAREN

    ID              shift and go to state 85
    LPAREN          shift and go to state 95
    NOT             shift and go to state 96
    MINUS           shift and go to state 94
    PLUS            shift and go to state 93
    INT_NUMBER      shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99
    FLOAT_NUMBER    shift and go to state 100
    STRING_NUMBER   shift and go to state 101
    LOG             shift and go to state 102
    LN              shift and go to state 103
    EXP             shift and go to state 104
    EQ_STRING       shift and go to state 105

    expression                     shift and go to state 135
    int_number                     shift and go to state 86
    float_number                   shift and go to state 87
    string_number                  shift and go to state 88
    log                            shift and go to state 89
    exp                            shift and go to state 90
    call                           shift and go to state 91
    eq_string                      shift and go to state 92

state 95

    (102) expression -> LPAREN . expression RPAREN
    (82) expression -> . ID
    (83) expression -> . int_number
    (84) expression -> . float_number
    (85) expression -> . string_number
    (86) expression -> . log
    (87) expression -> . exp
    (88) expression -> . call
    (89) expression -> . eq_string
    (90) expression -> . expression PLUS expression
    (91) expression -> . expression MINUS expression
    (92) expression -> . expression TIMES expression
    (93) expression -> . expression DIVIDE expression
    (94) expression -> . expression AND expression
    (95) expression -> . expression OR expression
    (96) expression -> . expression XOR expression
    (97) expression -> . expression LT expression
    (98) expression -> . expression GT expression
    (99) expression -> . expression LE expression
    (100) expression -> . expression GE expression
    (101) expression -> . expression EQ expression
    (102) expression -> . LPAREN expression RPAREN
    (103) expression -> . NOT expression
    (104) expression -> . MINUS expression
    (105) expression -> . PLUS expression
    (115) int_number -> . INT_NUMBER
    (116) int_number -> . TRUE
    (117) int_number -> . FALSE
    (118) int_number -> . ID
    (119) float_number -> . FLOAT_NUMBER
    (120) float_number -> . ID
    (121) string_number -> . STRING_NUMBER
    (113) log -> . LOG LPAREN expression RPAREN
    (114) log -> . LN LPAREN expression RPAREN
    (112) exp -> . EXP LPAREN expression RPAREN
    (110) call -> . ID DOT ID
    (111) eq_string -> . EQ_STRING LPAREN ID COMMA ID RPAREN

    ID              shift and go to state 85
    LPAREN          shift and go to state 95
    NOT             shift and go to state 96
    MINUS           shift and go to state 94
    PLUS            shift and go to state 93
    INT_NUMBER      shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99
    FLOAT_NUMBER    shift and go to state 100
    STRING_NUMBER   shift and go to state 101
    LOG             shift and go to state 102
    LN              shift and go to state 103
    EXP             shift and go to state 104
    EQ_STRING       shift and go to state 105

    expression                     shift and go to state 136
    int_number                     shift and go to state 86
    float_number                   shift and go to state 87
    string_number                  shift and go to state 88
    log                            shift and go to state 89
    exp                            shift and go to state 90
    call                           shift and go to state 91
    eq_string                      shift and go to state 92

state 96

    (103) expression -> NOT . expression
    (82) expression -> . ID
    (83) expression -> . int_number
    (84) expression -> . float_number
    (85) expression -> . string_number
    (86) expression -> . log
    (87) expression -> . exp
    (88) expression -> . call
    (89) expression -> . eq_string
    (90) expression -> . expression PLUS expression
    (91) expression -> . expression MINUS expression
    (92) expression -> . expression TIMES expression
    (93) expression -> . expression DIVIDE expression
    (94) expression -> . expression AND expression
    (95) expression -> . expression OR expression
    (96) expression -> . expression XOR expression
    (97) expression -> . expression LT expression
    (98) expression -> . expression GT expression
    (99) expression -> . expression LE expression
    (100) expression -> . expression GE expression
    (101) expression -> . expression EQ expression
    (102) expression -> . LPAREN expression RPAREN
    (103) expression -> . NOT expression
    (104) expression -> . MINUS expression
    (105) expression -> . PLUS expression
    (115) int_number -> . INT_NUMBER
    (116) int_number -> . TRUE
    (117) int_number -> . FALSE
    (118) int_number -> . ID
    (119) float_number -> . FLOAT_NUMBER
    (120) float_number -> . ID
    (121) string_number -> . STRING_NUMBER
    (113) log -> . LOG LPAREN expression RPAREN
    (114) log -> . LN LPAREN expression RPAREN
    (112) exp -> . EXP LPAREN expression RPAREN
    (110) call -> . ID DOT ID
    (111) eq_string -> . EQ_STRING LPAREN ID COMMA ID RPAREN

    ID              shift and go to state 85
    LPAREN          shift and go to state 95
    NOT             shift and go to state 96
    MINUS           shift and go to state 94
    PLUS            shift and go to state 93
    INT_NUMBER      shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99
    FLOAT_NUMBER    shift and go to state 100
    STRING_NUMBER   shift and go to state 101
    LOG             shift and go to state 102
    LN              shift and go to state 103
    EXP             shift and go to state 104
    EQ_STRING       shift and go to state 105

    expression                     shift and go to state 137
    int_number                     shift and go to state 86
    float_number                   shift and go to state 87
    string_number                  shift and go to state 88
    log                            shift and go to state 89
    exp                            shift and go to state 90
    call                           shift and go to state 91
    eq_string                      shift and go to state 92

state 97

    (115) int_number -> INT_NUMBER .

    DO              reduce using rule 115 (int_number -> INT_NUMBER .)
    PLUS            reduce using rule 115 (int_number -> INT_NUMBER .)
    MINUS           reduce using rule 115 (int_number -> INT_NUMBER .)
    TIMES           reduce using rule 115 (int_number -> INT_NUMBER .)
    DIVIDE          reduce using rule 115 (int_number -> INT_NUMBER .)
    AND             reduce using rule 115 (int_number -> INT_NUMBER .)
    OR              reduce using rule 115 (int_number -> INT_NUMBER .)
    XOR             reduce using rule 115 (int_number -> INT_NUMBER .)
    LT              reduce using rule 115 (int_number -> INT_NUMBER .)
    GT              reduce using rule 115 (int_number -> INT_NUMBER .)
    LE              reduce using rule 115 (int_number -> INT_NUMBER .)
    GE              reduce using rule 115 (int_number -> INT_NUMBER .)
    EQ              reduce using rule 115 (int_number -> INT_NUMBER .)
    THEN            reduce using rule 115 (int_number -> INT_NUMBER .)
    SEMICOLON       reduce using rule 115 (int_number -> INT_NUMBER .)
    RPAREN          reduce using rule 115 (int_number -> INT_NUMBER .)
    TO              reduce using rule 115 (int_number -> INT_NUMBER .)
    COLON           reduce using rule 115 (int_number -> INT_NUMBER .)
    ID              reduce using rule 115 (int_number -> INT_NUMBER .)
    COMMA           reduce using rule 115 (int_number -> INT_NUMBER .)
    BY              reduce using rule 115 (int_number -> INT_NUMBER .)


state 98

    (116) int_number -> TRUE .

    DO              reduce using rule 116 (int_number -> TRUE .)
    PLUS            reduce using rule 116 (int_number -> TRUE .)
    MINUS           reduce using rule 116 (int_number -> TRUE .)
    TIMES           reduce using rule 116 (int_number -> TRUE .)
    DIVIDE          reduce using rule 116 (int_number -> TRUE .)
    AND             reduce using rule 116 (int_number -> TRUE .)
    OR              reduce using rule 116 (int_number -> TRUE .)
    XOR             reduce using rule 116 (int_number -> TRUE .)
    LT              reduce using rule 116 (int_number -> TRUE .)
    GT              reduce using rule 116 (int_number -> TRUE .)
    LE              reduce using rule 116 (int_number -> TRUE .)
    GE              reduce using rule 116 (int_number -> TRUE .)
    EQ              reduce using rule 116 (int_number -> TRUE .)
    THEN            reduce using rule 116 (int_number -> TRUE .)
    SEMICOLON       reduce using rule 116 (int_number -> TRUE .)
    RPAREN          reduce using rule 116 (int_number -> TRUE .)
    TO              reduce using rule 116 (int_number -> TRUE .)
    COLON           reduce using rule 116 (int_number -> TRUE .)
    ID              reduce using rule 116 (int_number -> TRUE .)
    COMMA           reduce using rule 116 (int_number -> TRUE .)
    BY              reduce using rule 116 (int_number -> TRUE .)


state 99

    (117) int_number -> FALSE .

    DO              reduce using rule 117 (int_number -> FALSE .)
    PLUS            reduce using rule 117 (int_number -> FALSE .)
    MINUS           reduce using rule 117 (int_number -> FALSE .)
    TIMES           reduce using rule 117 (int_number -> FALSE .)
    DIVIDE          reduce using rule 117 (int_number -> FALSE .)
    AND             reduce using rule 117 (int_number -> FALSE .)
    OR              reduce using rule 117 (int_number -> FALSE .)
    XOR             reduce using rule 117 (int_number -> FALSE .)
    LT              reduce using rule 117 (int_number -> FALSE .)
    GT              reduce using rule 117 (int_number -> FALSE .)
    LE              reduce using rule 117 (int_number -> FALSE .)
    GE              reduce using rule 117 (int_number -> FALSE .)
    EQ              reduce using rule 117 (int_number -> FALSE .)
    THEN            reduce using rule 117 (int_number -> FALSE .)
    SEMICOLON       reduce using rule 117 (int_number -> FALSE .)
    RPAREN          reduce using rule 117 (int_number -> FALSE .)
    TO              reduce using rule 117 (int_number -> FALSE .)
    COLON           reduce using rule 117 (int_number -> FALSE .)
    ID              reduce using rule 117 (int_number -> FALSE .)
    COMMA           reduce using rule 117 (int_number -> FALSE .)
    BY              reduce using rule 117 (int_number -> FALSE .)


state 100

    (119) float_number -> FLOAT_NUMBER .

    DO              reduce using rule 119 (float_number -> FLOAT_NUMBER .)
    PLUS            reduce using rule 119 (float_number -> FLOAT_NUMBER .)
    MINUS           reduce using rule 119 (float_number -> FLOAT_NUMBER .)
    TIMES           reduce using rule 119 (float_number -> FLOAT_NUMBER .)
    DIVIDE          reduce using rule 119 (float_number -> FLOAT_NUMBER .)
    AND             reduce using rule 119 (float_number -> FLOAT_NUMBER .)
    OR              reduce using rule 119 (float_number -> FLOAT_NUMBER .)
    XOR             reduce using rule 119 (float_number -> FLOAT_NUMBER .)
    LT              reduce using rule 119 (float_number -> FLOAT_NUMBER .)
    GT              reduce using rule 119 (float_number -> FLOAT_NUMBER .)
    LE              reduce using rule 119 (float_number -> FLOAT_NUMBER .)
    GE              reduce using rule 119 (float_number -> FLOAT_NUMBER .)
    EQ              reduce using rule 119 (float_number -> FLOAT_NUMBER .)
    THEN            reduce using rule 119 (float_number -> FLOAT_NUMBER .)
    SEMICOLON       reduce using rule 119 (float_number -> FLOAT_NUMBER .)
    RPAREN          reduce using rule 119 (float_number -> FLOAT_NUMBER .)
    TO              reduce using rule 119 (float_number -> FLOAT_NUMBER .)
    COLON           reduce using rule 119 (float_number -> FLOAT_NUMBER .)
    ID              reduce using rule 119 (float_number -> FLOAT_NUMBER .)
    COMMA           reduce using rule 119 (float_number -> FLOAT_NUMBER .)
    BY              reduce using rule 119 (float_number -> FLOAT_NUMBER .)


state 101

    (121) string_number -> STRING_NUMBER .

    DO              reduce using rule 121 (string_number -> STRING_NUMBER .)
    PLUS            reduce using rule 121 (string_number -> STRING_NUMBER .)
    MINUS           reduce using rule 121 (string_number -> STRING_NUMBER .)
    TIMES           reduce using rule 121 (string_number -> STRING_NUMBER .)
    DIVIDE          reduce using rule 121 (string_number -> STRING_NUMBER .)
    AND             reduce using rule 121 (string_number -> STRING_NUMBER .)
    OR              reduce using rule 121 (string_number -> STRING_NUMBER .)
    XOR             reduce using rule 121 (string_number -> STRING_NUMBER .)
    LT              reduce using rule 121 (string_number -> STRING_NUMBER .)
    GT              reduce using rule 121 (string_number -> STRING_NUMBER .)
    LE              reduce using rule 121 (string_number -> STRING_NUMBER .)
    GE              reduce using rule 121 (string_number -> STRING_NUMBER .)
    EQ              reduce using rule 121 (string_number -> STRING_NUMBER .)
    THEN            reduce using rule 121 (string_number -> STRING_NUMBER .)
    SEMICOLON       reduce using rule 121 (string_number -> STRING_NUMBER .)
    RPAREN          reduce using rule 121 (string_number -> STRING_NUMBER .)
    TO              reduce using rule 121 (string_number -> STRING_NUMBER .)
    COLON           reduce using rule 121 (string_number -> STRING_NUMBER .)
    ID              reduce using rule 121 (string_number -> STRING_NUMBER .)
    COMMA           reduce using rule 121 (string_number -> STRING_NUMBER .)
    BY              reduce using rule 121 (string_number -> STRING_NUMBER .)


state 102

    (113) log -> LOG . LPAREN expression RPAREN

    LPAREN          shift and go to state 138


state 103

    (114) log -> LN . LPAREN expression RPAREN

    LPAREN          shift and go to state 139


state 104

    (112) exp -> EXP . LPAREN expression RPAREN

    LPAREN          shift and go to state 140


state 105

    (111) eq_string -> EQ_STRING . LPAREN ID COMMA ID RPAREN

    LPAREN          shift and go to state 141


state 106

    (70) if_statement -> IF expression . THEN statement_list END_IF SEMICOLON
    (71) if_statement -> IF expression . THEN statement_list elsif_statement_list END_IF SEMICOLON
    (72) if_statement -> IF expression . THEN statement_list else_statement END_IF SEMICOLON
    (73) if_statement -> IF expression . THEN statement_list elsif_statement_list else_statement END_IF SEMICOLON
    (90) expression -> expression . PLUS expression
    (91) expression -> expression . MINUS expression
    (92) expression -> expression . TIMES expression
    (93) expression -> expression . DIVIDE expression
    (94) expression -> expression . AND expression
    (95) expression -> expression . OR expression
    (96) expression -> expression . XOR expression
    (97) expression -> expression . LT expression
    (98) expression -> expression . GT expression
    (99) expression -> expression . LE expression
    (100) expression -> expression . GE expression
    (101) expression -> expression . EQ expression

    THEN            shift and go to state 142
    PLUS            shift and go to state 121
    MINUS           shift and go to state 122
    TIMES           shift and go to state 123
    DIVIDE          shift and go to state 124
    AND             shift and go to state 125
    OR              shift and go to state 126
    XOR             shift and go to state 127
    LT              shift and go to state 128
    GT              shift and go to state 129
    LE              shift and go to state 130
    GE              shift and go to state 131
    EQ              shift and go to state 132


state 107

    (78) for_statement -> FOR ID . ASSIGN expression TO expression DO statement_list END_FOR SEMICOLON
    (79) for_statement -> FOR ID . ASSIGN expression TO expression BY expression DO statement_list END_FOR SEMICOLON

    ASSIGN          shift and go to state 143


state 108

    (67) case_statement -> CASE ID . OF case_list END_CASE SEMICOLON

    OF              shift and go to state 144


state 109

    (49) declare_int_statement -> ID COLON . INT ASSIGN int_number SEMICOLON
    (50) declare_int_statement -> ID COLON . BOOL ASSIGN int_number SEMICOLON
    (51) declare_int_statement -> ID COLON . BYTE ASSIGN int_number SEMICOLON
    (52) declare_int_statement -> ID COLON . TIME ASSIGN int_number SEMICOLON
    (53) declare_int_statement -> ID COLON . DWORD ASSIGN int_number SEMICOLON
    (54) declare_int_statement -> ID COLON . STRING ASSIGN string_number SEMICOLON
    (55) declare_int_statement -> ID COLON . BYTE ASSIGN ID SEMICOLON
    (56) declare_int_statement -> ID COLON . TIME ASSIGN ID SEMICOLON
    (57) declare_int_statement -> ID COLON . INT SEMICOLON
    (58) declare_int_statement -> ID COLON . BOOL SEMICOLON
    (59) declare_int_statement -> ID COLON . BYTE SEMICOLON
    (60) declare_int_statement -> ID COLON . TIME SEMICOLON
    (61) declare_int_statement -> ID COLON . DWORD SEMICOLON
    (62) declare_int_statement -> ID COLON . STRING SEMICOLON
    (63) declare_float_statement -> ID COLON . FLOAT ASSIGN float_number SEMICOLON
    (64) declare_float_statement -> ID COLON . FLOAT SEMICOLON
    (65) declare_float_statement -> ID COLON . REAL ASSIGN float_number SEMICOLON
    (66) declare_float_statement -> ID COLON . REAL SEMICOLON
    (45) declare_timer_statement -> ID COLON . TP SEMICOLON
    (46) declare_timer_statement -> ID COLON . TON SEMICOLON
    (47) declare_timer_statement -> ID COLON . TOF SEMICOLON
    (48) declare_timer_statement -> ID COLON . RTC SEMICOLON

    INT             shift and go to state 145
    BOOL            shift and go to state 146
    BYTE            shift and go to state 147
    TIME            shift and go to state 148
    DWORD           shift and go to state 149
    STRING          shift and go to state 150
    FLOAT           shift and go to state 151
    REAL            shift and go to state 152
    TP              shift and go to state 153
    TON             shift and go to state 154
    TOF             shift and go to state 155
    RTC             shift and go to state 156


state 110

    (9) function_block_definition -> FUNCTION_BLOCK ID var_list BEGIN statement_list END_FUNCTION_BLOCK .

    FUNCTION_BLOCK  reduce using rule 9 (function_block_definition -> FUNCTION_BLOCK ID var_list BEGIN statement_list END_FUNCTION_BLOCK .)
    FUNCTION        reduce using rule 9 (function_block_definition -> FUNCTION_BLOCK ID var_list BEGIN statement_list END_FUNCTION_BLOCK .)
    PROGRAM         reduce using rule 9 (function_block_definition -> FUNCTION_BLOCK ID var_list BEGIN statement_list END_FUNCTION_BLOCK .)
    $end            reduce using rule 9 (function_block_definition -> FUNCTION_BLOCK ID var_list BEGIN statement_list END_FUNCTION_BLOCK .)


state 111

    (11) function_definition -> FUNCTION ID COLON INT var_list statement_list . END_FUNCTION
    (35) statement_list -> statement_list . assign_statement
    (36) statement_list -> statement_list . while_statement
    (37) statement_list -> statement_list . if_statement
    (38) statement_list -> statement_list . for_statement
    (39) statement_list -> statement_list . call_statement
    (40) statement_list -> statement_list . case_statement
    (81) assign_statement -> . ID ASSIGN expression SEMICOLON
    (80) while_statement -> . WHILE expression DO statement_list END_WHILE
    (70) if_statement -> . IF expression THEN statement_list END_IF SEMICOLON
    (71) if_statement -> . IF expression THEN statement_list elsif_statement_list END_IF SEMICOLON
    (72) if_statement -> . IF expression THEN statement_list else_statement END_IF SEMICOLON
    (73) if_statement -> . IF expression THEN statement_list elsif_statement_list else_statement END_IF SEMICOLON
    (78) for_statement -> . FOR ID ASSIGN expression TO expression DO statement_list END_FOR SEMICOLON
    (79) for_statement -> . FOR ID ASSIGN expression TO expression BY expression DO statement_list END_FOR SEMICOLON
    (106) call_statement -> . ID argument RPAREN SEMICOLON
    (67) case_statement -> . CASE ID OF case_list END_CASE SEMICOLON

    END_FUNCTION    shift and go to state 157
    ID              shift and go to state 51
    WHILE           shift and go to state 59
    IF              shift and go to state 60
    FOR             shift and go to state 61
    CASE            shift and go to state 62

    assign_statement               shift and go to state 53
    while_statement                shift and go to state 54
    if_statement                   shift and go to state 55
    for_statement                  shift and go to state 56
    call_statement                 shift and go to state 57
    case_statement                 shift and go to state 58

state 112

    (12) function_definition -> FUNCTION ID COLON BOOL var_list statement_list . END_FUNCTION
    (35) statement_list -> statement_list . assign_statement
    (36) statement_list -> statement_list . while_statement
    (37) statement_list -> statement_list . if_statement
    (38) statement_list -> statement_list . for_statement
    (39) statement_list -> statement_list . call_statement
    (40) statement_list -> statement_list . case_statement
    (81) assign_statement -> . ID ASSIGN expression SEMICOLON
    (80) while_statement -> . WHILE expression DO statement_list END_WHILE
    (70) if_statement -> . IF expression THEN statement_list END_IF SEMICOLON
    (71) if_statement -> . IF expression THEN statement_list elsif_statement_list END_IF SEMICOLON
    (72) if_statement -> . IF expression THEN statement_list else_statement END_IF SEMICOLON
    (73) if_statement -> . IF expression THEN statement_list elsif_statement_list else_statement END_IF SEMICOLON
    (78) for_statement -> . FOR ID ASSIGN expression TO expression DO statement_list END_FOR SEMICOLON
    (79) for_statement -> . FOR ID ASSIGN expression TO expression BY expression DO statement_list END_FOR SEMICOLON
    (106) call_statement -> . ID argument RPAREN SEMICOLON
    (67) case_statement -> . CASE ID OF case_list END_CASE SEMICOLON

    END_FUNCTION    shift and go to state 158
    ID              shift and go to state 51
    WHILE           shift and go to state 59
    IF              shift and go to state 60
    FOR             shift and go to state 61
    CASE            shift and go to state 62

    assign_statement               shift and go to state 53
    while_statement                shift and go to state 54
    if_statement                   shift and go to state 55
    for_statement                  shift and go to state 56
    call_statement                 shift and go to state 57
    case_statement                 shift and go to state 58

state 113

    (13) function_definition -> FUNCTION ID COLON REAL var_list statement_list . END_FUNCTION
    (35) statement_list -> statement_list . assign_statement
    (36) statement_list -> statement_list . while_statement
    (37) statement_list -> statement_list . if_statement
    (38) statement_list -> statement_list . for_statement
    (39) statement_list -> statement_list . call_statement
    (40) statement_list -> statement_list . case_statement
    (81) assign_statement -> . ID ASSIGN expression SEMICOLON
    (80) while_statement -> . WHILE expression DO statement_list END_WHILE
    (70) if_statement -> . IF expression THEN statement_list END_IF SEMICOLON
    (71) if_statement -> . IF expression THEN statement_list elsif_statement_list END_IF SEMICOLON
    (72) if_statement -> . IF expression THEN statement_list else_statement END_IF SEMICOLON
    (73) if_statement -> . IF expression THEN statement_list elsif_statement_list else_statement END_IF SEMICOLON
    (78) for_statement -> . FOR ID ASSIGN expression TO expression DO statement_list END_FOR SEMICOLON
    (79) for_statement -> . FOR ID ASSIGN expression TO expression BY expression DO statement_list END_FOR SEMICOLON
    (106) call_statement -> . ID argument RPAREN SEMICOLON
    (67) case_statement -> . CASE ID OF case_list END_CASE SEMICOLON

    END_FUNCTION    shift and go to state 159
    ID              shift and go to state 51
    WHILE           shift and go to state 59
    IF              shift and go to state 60
    FOR             shift and go to state 61
    CASE            shift and go to state 62

    assign_statement               shift and go to state 53
    while_statement                shift and go to state 54
    if_statement                   shift and go to state 55
    for_statement                  shift and go to state 56
    call_statement                 shift and go to state 57
    case_statement                 shift and go to state 58

state 114

    (14) function_definition -> FUNCTION ID COLON FLOAT var_list statement_list . END_FUNCTION
    (35) statement_list -> statement_list . assign_statement
    (36) statement_list -> statement_list . while_statement
    (37) statement_list -> statement_list . if_statement
    (38) statement_list -> statement_list . for_statement
    (39) statement_list -> statement_list . call_statement
    (40) statement_list -> statement_list . case_statement
    (81) assign_statement -> . ID ASSIGN expression SEMICOLON
    (80) while_statement -> . WHILE expression DO statement_list END_WHILE
    (70) if_statement -> . IF expression THEN statement_list END_IF SEMICOLON
    (71) if_statement -> . IF expression THEN statement_list elsif_statement_list END_IF SEMICOLON
    (72) if_statement -> . IF expression THEN statement_list else_statement END_IF SEMICOLON
    (73) if_statement -> . IF expression THEN statement_list elsif_statement_list else_statement END_IF SEMICOLON
    (78) for_statement -> . FOR ID ASSIGN expression TO expression DO statement_list END_FOR SEMICOLON
    (79) for_statement -> . FOR ID ASSIGN expression TO expression BY expression DO statement_list END_FOR SEMICOLON
    (106) call_statement -> . ID argument RPAREN SEMICOLON
    (67) case_statement -> . CASE ID OF case_list END_CASE SEMICOLON

    END_FUNCTION    shift and go to state 160
    ID              shift and go to state 51
    WHILE           shift and go to state 59
    IF              shift and go to state 60
    FOR             shift and go to state 61
    CASE            shift and go to state 62

    assign_statement               shift and go to state 53
    while_statement                shift and go to state 54
    if_statement                   shift and go to state 55
    for_statement                  shift and go to state 56
    call_statement                 shift and go to state 57
    case_statement                 shift and go to state 58

state 115

    (15) function_definition -> FUNCTION ID COLON BYTE var_list statement_list . END_FUNCTION
    (35) statement_list -> statement_list . assign_statement
    (36) statement_list -> statement_list . while_statement
    (37) statement_list -> statement_list . if_statement
    (38) statement_list -> statement_list . for_statement
    (39) statement_list -> statement_list . call_statement
    (40) statement_list -> statement_list . case_statement
    (81) assign_statement -> . ID ASSIGN expression SEMICOLON
    (80) while_statement -> . WHILE expression DO statement_list END_WHILE
    (70) if_statement -> . IF expression THEN statement_list END_IF SEMICOLON
    (71) if_statement -> . IF expression THEN statement_list elsif_statement_list END_IF SEMICOLON
    (72) if_statement -> . IF expression THEN statement_list else_statement END_IF SEMICOLON
    (73) if_statement -> . IF expression THEN statement_list elsif_statement_list else_statement END_IF SEMICOLON
    (78) for_statement -> . FOR ID ASSIGN expression TO expression DO statement_list END_FOR SEMICOLON
    (79) for_statement -> . FOR ID ASSIGN expression TO expression BY expression DO statement_list END_FOR SEMICOLON
    (106) call_statement -> . ID argument RPAREN SEMICOLON
    (67) case_statement -> . CASE ID OF case_list END_CASE SEMICOLON

    END_FUNCTION    shift and go to state 161
    ID              shift and go to state 51
    WHILE           shift and go to state 59
    IF              shift and go to state 60
    FOR             shift and go to state 61
    CASE            shift and go to state 62

    assign_statement               shift and go to state 53
    while_statement                shift and go to state 54
    if_statement                   shift and go to state 55
    for_statement                  shift and go to state 56
    call_statement                 shift and go to state 57
    case_statement                 shift and go to state 58

state 116

    (81) assign_statement -> ID ASSIGN expression . SEMICOLON
    (90) expression -> expression . PLUS expression
    (91) expression -> expression . MINUS expression
    (92) expression -> expression . TIMES expression
    (93) expression -> expression . DIVIDE expression
    (94) expression -> expression . AND expression
    (95) expression -> expression . OR expression
    (96) expression -> expression . XOR expression
    (97) expression -> expression . LT expression
    (98) expression -> expression . GT expression
    (99) expression -> expression . LE expression
    (100) expression -> expression . GE expression
    (101) expression -> expression . EQ expression

    SEMICOLON       shift and go to state 162
    PLUS            shift and go to state 121
    MINUS           shift and go to state 122
    TIMES           shift and go to state 123
    DIVIDE          shift and go to state 124
    AND             shift and go to state 125
    OR              shift and go to state 126
    XOR             shift and go to state 127
    LT              shift and go to state 128
    GT              shift and go to state 129
    LE              shift and go to state 130
    GE              shift and go to state 131
    EQ              shift and go to state 132


state 117

    (108) argument -> argument ID . ASSIGN expression

    ASSIGN          shift and go to state 163


state 118

    (106) call_statement -> ID argument RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 164


state 119

    (109) argument -> argument COMMA . ID ASSIGN expression

    ID              shift and go to state 165


state 120

    (80) while_statement -> WHILE expression DO . statement_list END_WHILE
    (34) statement_list -> .
    (35) statement_list -> . statement_list assign_statement
    (36) statement_list -> . statement_list while_statement
    (37) statement_list -> . statement_list if_statement
    (38) statement_list -> . statement_list for_statement
    (39) statement_list -> . statement_list call_statement
    (40) statement_list -> . statement_list case_statement

    END_WHILE       reduce using rule 34 (statement_list -> .)
    ID              reduce using rule 34 (statement_list -> .)
    WHILE           reduce using rule 34 (statement_list -> .)
    IF              reduce using rule 34 (statement_list -> .)
    FOR             reduce using rule 34 (statement_list -> .)
    CASE            reduce using rule 34 (statement_list -> .)

    statement_list                 shift and go to state 166

state 121

    (90) expression -> expression PLUS . expression
    (82) expression -> . ID
    (83) expression -> . int_number
    (84) expression -> . float_number
    (85) expression -> . string_number
    (86) expression -> . log
    (87) expression -> . exp
    (88) expression -> . call
    (89) expression -> . eq_string
    (90) expression -> . expression PLUS expression
    (91) expression -> . expression MINUS expression
    (92) expression -> . expression TIMES expression
    (93) expression -> . expression DIVIDE expression
    (94) expression -> . expression AND expression
    (95) expression -> . expression OR expression
    (96) expression -> . expression XOR expression
    (97) expression -> . expression LT expression
    (98) expression -> . expression GT expression
    (99) expression -> . expression LE expression
    (100) expression -> . expression GE expression
    (101) expression -> . expression EQ expression
    (102) expression -> . LPAREN expression RPAREN
    (103) expression -> . NOT expression
    (104) expression -> . MINUS expression
    (105) expression -> . PLUS expression
    (115) int_number -> . INT_NUMBER
    (116) int_number -> . TRUE
    (117) int_number -> . FALSE
    (118) int_number -> . ID
    (119) float_number -> . FLOAT_NUMBER
    (120) float_number -> . ID
    (121) string_number -> . STRING_NUMBER
    (113) log -> . LOG LPAREN expression RPAREN
    (114) log -> . LN LPAREN expression RPAREN
    (112) exp -> . EXP LPAREN expression RPAREN
    (110) call -> . ID DOT ID
    (111) eq_string -> . EQ_STRING LPAREN ID COMMA ID RPAREN

    ID              shift and go to state 85
    LPAREN          shift and go to state 95
    NOT             shift and go to state 96
    MINUS           shift and go to state 94
    PLUS            shift and go to state 93
    INT_NUMBER      shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99
    FLOAT_NUMBER    shift and go to state 100
    STRING_NUMBER   shift and go to state 101
    LOG             shift and go to state 102
    LN              shift and go to state 103
    EXP             shift and go to state 104
    EQ_STRING       shift and go to state 105

    expression                     shift and go to state 167
    int_number                     shift and go to state 86
    float_number                   shift and go to state 87
    string_number                  shift and go to state 88
    log                            shift and go to state 89
    exp                            shift and go to state 90
    call                           shift and go to state 91
    eq_string                      shift and go to state 92

state 122

    (91) expression -> expression MINUS . expression
    (82) expression -> . ID
    (83) expression -> . int_number
    (84) expression -> . float_number
    (85) expression -> . string_number
    (86) expression -> . log
    (87) expression -> . exp
    (88) expression -> . call
    (89) expression -> . eq_string
    (90) expression -> . expression PLUS expression
    (91) expression -> . expression MINUS expression
    (92) expression -> . expression TIMES expression
    (93) expression -> . expression DIVIDE expression
    (94) expression -> . expression AND expression
    (95) expression -> . expression OR expression
    (96) expression -> . expression XOR expression
    (97) expression -> . expression LT expression
    (98) expression -> . expression GT expression
    (99) expression -> . expression LE expression
    (100) expression -> . expression GE expression
    (101) expression -> . expression EQ expression
    (102) expression -> . LPAREN expression RPAREN
    (103) expression -> . NOT expression
    (104) expression -> . MINUS expression
    (105) expression -> . PLUS expression
    (115) int_number -> . INT_NUMBER
    (116) int_number -> . TRUE
    (117) int_number -> . FALSE
    (118) int_number -> . ID
    (119) float_number -> . FLOAT_NUMBER
    (120) float_number -> . ID
    (121) string_number -> . STRING_NUMBER
    (113) log -> . LOG LPAREN expression RPAREN
    (114) log -> . LN LPAREN expression RPAREN
    (112) exp -> . EXP LPAREN expression RPAREN
    (110) call -> . ID DOT ID
    (111) eq_string -> . EQ_STRING LPAREN ID COMMA ID RPAREN

    ID              shift and go to state 85
    LPAREN          shift and go to state 95
    NOT             shift and go to state 96
    MINUS           shift and go to state 94
    PLUS            shift and go to state 93
    INT_NUMBER      shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99
    FLOAT_NUMBER    shift and go to state 100
    STRING_NUMBER   shift and go to state 101
    LOG             shift and go to state 102
    LN              shift and go to state 103
    EXP             shift and go to state 104
    EQ_STRING       shift and go to state 105

    expression                     shift and go to state 168
    int_number                     shift and go to state 86
    float_number                   shift and go to state 87
    string_number                  shift and go to state 88
    log                            shift and go to state 89
    exp                            shift and go to state 90
    call                           shift and go to state 91
    eq_string                      shift and go to state 92

state 123

    (92) expression -> expression TIMES . expression
    (82) expression -> . ID
    (83) expression -> . int_number
    (84) expression -> . float_number
    (85) expression -> . string_number
    (86) expression -> . log
    (87) expression -> . exp
    (88) expression -> . call
    (89) expression -> . eq_string
    (90) expression -> . expression PLUS expression
    (91) expression -> . expression MINUS expression
    (92) expression -> . expression TIMES expression
    (93) expression -> . expression DIVIDE expression
    (94) expression -> . expression AND expression
    (95) expression -> . expression OR expression
    (96) expression -> . expression XOR expression
    (97) expression -> . expression LT expression
    (98) expression -> . expression GT expression
    (99) expression -> . expression LE expression
    (100) expression -> . expression GE expression
    (101) expression -> . expression EQ expression
    (102) expression -> . LPAREN expression RPAREN
    (103) expression -> . NOT expression
    (104) expression -> . MINUS expression
    (105) expression -> . PLUS expression
    (115) int_number -> . INT_NUMBER
    (116) int_number -> . TRUE
    (117) int_number -> . FALSE
    (118) int_number -> . ID
    (119) float_number -> . FLOAT_NUMBER
    (120) float_number -> . ID
    (121) string_number -> . STRING_NUMBER
    (113) log -> . LOG LPAREN expression RPAREN
    (114) log -> . LN LPAREN expression RPAREN
    (112) exp -> . EXP LPAREN expression RPAREN
    (110) call -> . ID DOT ID
    (111) eq_string -> . EQ_STRING LPAREN ID COMMA ID RPAREN

    ID              shift and go to state 85
    LPAREN          shift and go to state 95
    NOT             shift and go to state 96
    MINUS           shift and go to state 94
    PLUS            shift and go to state 93
    INT_NUMBER      shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99
    FLOAT_NUMBER    shift and go to state 100
    STRING_NUMBER   shift and go to state 101
    LOG             shift and go to state 102
    LN              shift and go to state 103
    EXP             shift and go to state 104
    EQ_STRING       shift and go to state 105

    expression                     shift and go to state 169
    int_number                     shift and go to state 86
    float_number                   shift and go to state 87
    string_number                  shift and go to state 88
    log                            shift and go to state 89
    exp                            shift and go to state 90
    call                           shift and go to state 91
    eq_string                      shift and go to state 92

state 124

    (93) expression -> expression DIVIDE . expression
    (82) expression -> . ID
    (83) expression -> . int_number
    (84) expression -> . float_number
    (85) expression -> . string_number
    (86) expression -> . log
    (87) expression -> . exp
    (88) expression -> . call
    (89) expression -> . eq_string
    (90) expression -> . expression PLUS expression
    (91) expression -> . expression MINUS expression
    (92) expression -> . expression TIMES expression
    (93) expression -> . expression DIVIDE expression
    (94) expression -> . expression AND expression
    (95) expression -> . expression OR expression
    (96) expression -> . expression XOR expression
    (97) expression -> . expression LT expression
    (98) expression -> . expression GT expression
    (99) expression -> . expression LE expression
    (100) expression -> . expression GE expression
    (101) expression -> . expression EQ expression
    (102) expression -> . LPAREN expression RPAREN
    (103) expression -> . NOT expression
    (104) expression -> . MINUS expression
    (105) expression -> . PLUS expression
    (115) int_number -> . INT_NUMBER
    (116) int_number -> . TRUE
    (117) int_number -> . FALSE
    (118) int_number -> . ID
    (119) float_number -> . FLOAT_NUMBER
    (120) float_number -> . ID
    (121) string_number -> . STRING_NUMBER
    (113) log -> . LOG LPAREN expression RPAREN
    (114) log -> . LN LPAREN expression RPAREN
    (112) exp -> . EXP LPAREN expression RPAREN
    (110) call -> . ID DOT ID
    (111) eq_string -> . EQ_STRING LPAREN ID COMMA ID RPAREN

    ID              shift and go to state 85
    LPAREN          shift and go to state 95
    NOT             shift and go to state 96
    MINUS           shift and go to state 94
    PLUS            shift and go to state 93
    INT_NUMBER      shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99
    FLOAT_NUMBER    shift and go to state 100
    STRING_NUMBER   shift and go to state 101
    LOG             shift and go to state 102
    LN              shift and go to state 103
    EXP             shift and go to state 104
    EQ_STRING       shift and go to state 105

    expression                     shift and go to state 170
    int_number                     shift and go to state 86
    float_number                   shift and go to state 87
    string_number                  shift and go to state 88
    log                            shift and go to state 89
    exp                            shift and go to state 90
    call                           shift and go to state 91
    eq_string                      shift and go to state 92

state 125

    (94) expression -> expression AND . expression
    (82) expression -> . ID
    (83) expression -> . int_number
    (84) expression -> . float_number
    (85) expression -> . string_number
    (86) expression -> . log
    (87) expression -> . exp
    (88) expression -> . call
    (89) expression -> . eq_string
    (90) expression -> . expression PLUS expression
    (91) expression -> . expression MINUS expression
    (92) expression -> . expression TIMES expression
    (93) expression -> . expression DIVIDE expression
    (94) expression -> . expression AND expression
    (95) expression -> . expression OR expression
    (96) expression -> . expression XOR expression
    (97) expression -> . expression LT expression
    (98) expression -> . expression GT expression
    (99) expression -> . expression LE expression
    (100) expression -> . expression GE expression
    (101) expression -> . expression EQ expression
    (102) expression -> . LPAREN expression RPAREN
    (103) expression -> . NOT expression
    (104) expression -> . MINUS expression
    (105) expression -> . PLUS expression
    (115) int_number -> . INT_NUMBER
    (116) int_number -> . TRUE
    (117) int_number -> . FALSE
    (118) int_number -> . ID
    (119) float_number -> . FLOAT_NUMBER
    (120) float_number -> . ID
    (121) string_number -> . STRING_NUMBER
    (113) log -> . LOG LPAREN expression RPAREN
    (114) log -> . LN LPAREN expression RPAREN
    (112) exp -> . EXP LPAREN expression RPAREN
    (110) call -> . ID DOT ID
    (111) eq_string -> . EQ_STRING LPAREN ID COMMA ID RPAREN

    ID              shift and go to state 85
    LPAREN          shift and go to state 95
    NOT             shift and go to state 96
    MINUS           shift and go to state 94
    PLUS            shift and go to state 93
    INT_NUMBER      shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99
    FLOAT_NUMBER    shift and go to state 100
    STRING_NUMBER   shift and go to state 101
    LOG             shift and go to state 102
    LN              shift and go to state 103
    EXP             shift and go to state 104
    EQ_STRING       shift and go to state 105

    expression                     shift and go to state 171
    int_number                     shift and go to state 86
    float_number                   shift and go to state 87
    string_number                  shift and go to state 88
    log                            shift and go to state 89
    exp                            shift and go to state 90
    call                           shift and go to state 91
    eq_string                      shift and go to state 92

state 126

    (95) expression -> expression OR . expression
    (82) expression -> . ID
    (83) expression -> . int_number
    (84) expression -> . float_number
    (85) expression -> . string_number
    (86) expression -> . log
    (87) expression -> . exp
    (88) expression -> . call
    (89) expression -> . eq_string
    (90) expression -> . expression PLUS expression
    (91) expression -> . expression MINUS expression
    (92) expression -> . expression TIMES expression
    (93) expression -> . expression DIVIDE expression
    (94) expression -> . expression AND expression
    (95) expression -> . expression OR expression
    (96) expression -> . expression XOR expression
    (97) expression -> . expression LT expression
    (98) expression -> . expression GT expression
    (99) expression -> . expression LE expression
    (100) expression -> . expression GE expression
    (101) expression -> . expression EQ expression
    (102) expression -> . LPAREN expression RPAREN
    (103) expression -> . NOT expression
    (104) expression -> . MINUS expression
    (105) expression -> . PLUS expression
    (115) int_number -> . INT_NUMBER
    (116) int_number -> . TRUE
    (117) int_number -> . FALSE
    (118) int_number -> . ID
    (119) float_number -> . FLOAT_NUMBER
    (120) float_number -> . ID
    (121) string_number -> . STRING_NUMBER
    (113) log -> . LOG LPAREN expression RPAREN
    (114) log -> . LN LPAREN expression RPAREN
    (112) exp -> . EXP LPAREN expression RPAREN
    (110) call -> . ID DOT ID
    (111) eq_string -> . EQ_STRING LPAREN ID COMMA ID RPAREN

    ID              shift and go to state 85
    LPAREN          shift and go to state 95
    NOT             shift and go to state 96
    MINUS           shift and go to state 94
    PLUS            shift and go to state 93
    INT_NUMBER      shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99
    FLOAT_NUMBER    shift and go to state 100
    STRING_NUMBER   shift and go to state 101
    LOG             shift and go to state 102
    LN              shift and go to state 103
    EXP             shift and go to state 104
    EQ_STRING       shift and go to state 105

    expression                     shift and go to state 172
    int_number                     shift and go to state 86
    float_number                   shift and go to state 87
    string_number                  shift and go to state 88
    log                            shift and go to state 89
    exp                            shift and go to state 90
    call                           shift and go to state 91
    eq_string                      shift and go to state 92

state 127

    (96) expression -> expression XOR . expression
    (82) expression -> . ID
    (83) expression -> . int_number
    (84) expression -> . float_number
    (85) expression -> . string_number
    (86) expression -> . log
    (87) expression -> . exp
    (88) expression -> . call
    (89) expression -> . eq_string
    (90) expression -> . expression PLUS expression
    (91) expression -> . expression MINUS expression
    (92) expression -> . expression TIMES expression
    (93) expression -> . expression DIVIDE expression
    (94) expression -> . expression AND expression
    (95) expression -> . expression OR expression
    (96) expression -> . expression XOR expression
    (97) expression -> . expression LT expression
    (98) expression -> . expression GT expression
    (99) expression -> . expression LE expression
    (100) expression -> . expression GE expression
    (101) expression -> . expression EQ expression
    (102) expression -> . LPAREN expression RPAREN
    (103) expression -> . NOT expression
    (104) expression -> . MINUS expression
    (105) expression -> . PLUS expression
    (115) int_number -> . INT_NUMBER
    (116) int_number -> . TRUE
    (117) int_number -> . FALSE
    (118) int_number -> . ID
    (119) float_number -> . FLOAT_NUMBER
    (120) float_number -> . ID
    (121) string_number -> . STRING_NUMBER
    (113) log -> . LOG LPAREN expression RPAREN
    (114) log -> . LN LPAREN expression RPAREN
    (112) exp -> . EXP LPAREN expression RPAREN
    (110) call -> . ID DOT ID
    (111) eq_string -> . EQ_STRING LPAREN ID COMMA ID RPAREN

    ID              shift and go to state 85
    LPAREN          shift and go to state 95
    NOT             shift and go to state 96
    MINUS           shift and go to state 94
    PLUS            shift and go to state 93
    INT_NUMBER      shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99
    FLOAT_NUMBER    shift and go to state 100
    STRING_NUMBER   shift and go to state 101
    LOG             shift and go to state 102
    LN              shift and go to state 103
    EXP             shift and go to state 104
    EQ_STRING       shift and go to state 105

    expression                     shift and go to state 173
    int_number                     shift and go to state 86
    float_number                   shift and go to state 87
    string_number                  shift and go to state 88
    log                            shift and go to state 89
    exp                            shift and go to state 90
    call                           shift and go to state 91
    eq_string                      shift and go to state 92

state 128

    (97) expression -> expression LT . expression
    (82) expression -> . ID
    (83) expression -> . int_number
    (84) expression -> . float_number
    (85) expression -> . string_number
    (86) expression -> . log
    (87) expression -> . exp
    (88) expression -> . call
    (89) expression -> . eq_string
    (90) expression -> . expression PLUS expression
    (91) expression -> . expression MINUS expression
    (92) expression -> . expression TIMES expression
    (93) expression -> . expression DIVIDE expression
    (94) expression -> . expression AND expression
    (95) expression -> . expression OR expression
    (96) expression -> . expression XOR expression
    (97) expression -> . expression LT expression
    (98) expression -> . expression GT expression
    (99) expression -> . expression LE expression
    (100) expression -> . expression GE expression
    (101) expression -> . expression EQ expression
    (102) expression -> . LPAREN expression RPAREN
    (103) expression -> . NOT expression
    (104) expression -> . MINUS expression
    (105) expression -> . PLUS expression
    (115) int_number -> . INT_NUMBER
    (116) int_number -> . TRUE
    (117) int_number -> . FALSE
    (118) int_number -> . ID
    (119) float_number -> . FLOAT_NUMBER
    (120) float_number -> . ID
    (121) string_number -> . STRING_NUMBER
    (113) log -> . LOG LPAREN expression RPAREN
    (114) log -> . LN LPAREN expression RPAREN
    (112) exp -> . EXP LPAREN expression RPAREN
    (110) call -> . ID DOT ID
    (111) eq_string -> . EQ_STRING LPAREN ID COMMA ID RPAREN

    ID              shift and go to state 85
    LPAREN          shift and go to state 95
    NOT             shift and go to state 96
    MINUS           shift and go to state 94
    PLUS            shift and go to state 93
    INT_NUMBER      shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99
    FLOAT_NUMBER    shift and go to state 100
    STRING_NUMBER   shift and go to state 101
    LOG             shift and go to state 102
    LN              shift and go to state 103
    EXP             shift and go to state 104
    EQ_STRING       shift and go to state 105

    expression                     shift and go to state 174
    int_number                     shift and go to state 86
    float_number                   shift and go to state 87
    string_number                  shift and go to state 88
    log                            shift and go to state 89
    exp                            shift and go to state 90
    call                           shift and go to state 91
    eq_string                      shift and go to state 92

state 129

    (98) expression -> expression GT . expression
    (82) expression -> . ID
    (83) expression -> . int_number
    (84) expression -> . float_number
    (85) expression -> . string_number
    (86) expression -> . log
    (87) expression -> . exp
    (88) expression -> . call
    (89) expression -> . eq_string
    (90) expression -> . expression PLUS expression
    (91) expression -> . expression MINUS expression
    (92) expression -> . expression TIMES expression
    (93) expression -> . expression DIVIDE expression
    (94) expression -> . expression AND expression
    (95) expression -> . expression OR expression
    (96) expression -> . expression XOR expression
    (97) expression -> . expression LT expression
    (98) expression -> . expression GT expression
    (99) expression -> . expression LE expression
    (100) expression -> . expression GE expression
    (101) expression -> . expression EQ expression
    (102) expression -> . LPAREN expression RPAREN
    (103) expression -> . NOT expression
    (104) expression -> . MINUS expression
    (105) expression -> . PLUS expression
    (115) int_number -> . INT_NUMBER
    (116) int_number -> . TRUE
    (117) int_number -> . FALSE
    (118) int_number -> . ID
    (119) float_number -> . FLOAT_NUMBER
    (120) float_number -> . ID
    (121) string_number -> . STRING_NUMBER
    (113) log -> . LOG LPAREN expression RPAREN
    (114) log -> . LN LPAREN expression RPAREN
    (112) exp -> . EXP LPAREN expression RPAREN
    (110) call -> . ID DOT ID
    (111) eq_string -> . EQ_STRING LPAREN ID COMMA ID RPAREN

    ID              shift and go to state 85
    LPAREN          shift and go to state 95
    NOT             shift and go to state 96
    MINUS           shift and go to state 94
    PLUS            shift and go to state 93
    INT_NUMBER      shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99
    FLOAT_NUMBER    shift and go to state 100
    STRING_NUMBER   shift and go to state 101
    LOG             shift and go to state 102
    LN              shift and go to state 103
    EXP             shift and go to state 104
    EQ_STRING       shift and go to state 105

    expression                     shift and go to state 175
    int_number                     shift and go to state 86
    float_number                   shift and go to state 87
    string_number                  shift and go to state 88
    log                            shift and go to state 89
    exp                            shift and go to state 90
    call                           shift and go to state 91
    eq_string                      shift and go to state 92

state 130

    (99) expression -> expression LE . expression
    (82) expression -> . ID
    (83) expression -> . int_number
    (84) expression -> . float_number
    (85) expression -> . string_number
    (86) expression -> . log
    (87) expression -> . exp
    (88) expression -> . call
    (89) expression -> . eq_string
    (90) expression -> . expression PLUS expression
    (91) expression -> . expression MINUS expression
    (92) expression -> . expression TIMES expression
    (93) expression -> . expression DIVIDE expression
    (94) expression -> . expression AND expression
    (95) expression -> . expression OR expression
    (96) expression -> . expression XOR expression
    (97) expression -> . expression LT expression
    (98) expression -> . expression GT expression
    (99) expression -> . expression LE expression
    (100) expression -> . expression GE expression
    (101) expression -> . expression EQ expression
    (102) expression -> . LPAREN expression RPAREN
    (103) expression -> . NOT expression
    (104) expression -> . MINUS expression
    (105) expression -> . PLUS expression
    (115) int_number -> . INT_NUMBER
    (116) int_number -> . TRUE
    (117) int_number -> . FALSE
    (118) int_number -> . ID
    (119) float_number -> . FLOAT_NUMBER
    (120) float_number -> . ID
    (121) string_number -> . STRING_NUMBER
    (113) log -> . LOG LPAREN expression RPAREN
    (114) log -> . LN LPAREN expression RPAREN
    (112) exp -> . EXP LPAREN expression RPAREN
    (110) call -> . ID DOT ID
    (111) eq_string -> . EQ_STRING LPAREN ID COMMA ID RPAREN

    ID              shift and go to state 85
    LPAREN          shift and go to state 95
    NOT             shift and go to state 96
    MINUS           shift and go to state 94
    PLUS            shift and go to state 93
    INT_NUMBER      shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99
    FLOAT_NUMBER    shift and go to state 100
    STRING_NUMBER   shift and go to state 101
    LOG             shift and go to state 102
    LN              shift and go to state 103
    EXP             shift and go to state 104
    EQ_STRING       shift and go to state 105

    expression                     shift and go to state 176
    int_number                     shift and go to state 86
    float_number                   shift and go to state 87
    string_number                  shift and go to state 88
    log                            shift and go to state 89
    exp                            shift and go to state 90
    call                           shift and go to state 91
    eq_string                      shift and go to state 92

state 131

    (100) expression -> expression GE . expression
    (82) expression -> . ID
    (83) expression -> . int_number
    (84) expression -> . float_number
    (85) expression -> . string_number
    (86) expression -> . log
    (87) expression -> . exp
    (88) expression -> . call
    (89) expression -> . eq_string
    (90) expression -> . expression PLUS expression
    (91) expression -> . expression MINUS expression
    (92) expression -> . expression TIMES expression
    (93) expression -> . expression DIVIDE expression
    (94) expression -> . expression AND expression
    (95) expression -> . expression OR expression
    (96) expression -> . expression XOR expression
    (97) expression -> . expression LT expression
    (98) expression -> . expression GT expression
    (99) expression -> . expression LE expression
    (100) expression -> . expression GE expression
    (101) expression -> . expression EQ expression
    (102) expression -> . LPAREN expression RPAREN
    (103) expression -> . NOT expression
    (104) expression -> . MINUS expression
    (105) expression -> . PLUS expression
    (115) int_number -> . INT_NUMBER
    (116) int_number -> . TRUE
    (117) int_number -> . FALSE
    (118) int_number -> . ID
    (119) float_number -> . FLOAT_NUMBER
    (120) float_number -> . ID
    (121) string_number -> . STRING_NUMBER
    (113) log -> . LOG LPAREN expression RPAREN
    (114) log -> . LN LPAREN expression RPAREN
    (112) exp -> . EXP LPAREN expression RPAREN
    (110) call -> . ID DOT ID
    (111) eq_string -> . EQ_STRING LPAREN ID COMMA ID RPAREN

    ID              shift and go to state 85
    LPAREN          shift and go to state 95
    NOT             shift and go to state 96
    MINUS           shift and go to state 94
    PLUS            shift and go to state 93
    INT_NUMBER      shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99
    FLOAT_NUMBER    shift and go to state 100
    STRING_NUMBER   shift and go to state 101
    LOG             shift and go to state 102
    LN              shift and go to state 103
    EXP             shift and go to state 104
    EQ_STRING       shift and go to state 105

    expression                     shift and go to state 177
    int_number                     shift and go to state 86
    float_number                   shift and go to state 87
    string_number                  shift and go to state 88
    log                            shift and go to state 89
    exp                            shift and go to state 90
    call                           shift and go to state 91
    eq_string                      shift and go to state 92

state 132

    (101) expression -> expression EQ . expression
    (82) expression -> . ID
    (83) expression -> . int_number
    (84) expression -> . float_number
    (85) expression -> . string_number
    (86) expression -> . log
    (87) expression -> . exp
    (88) expression -> . call
    (89) expression -> . eq_string
    (90) expression -> . expression PLUS expression
    (91) expression -> . expression MINUS expression
    (92) expression -> . expression TIMES expression
    (93) expression -> . expression DIVIDE expression
    (94) expression -> . expression AND expression
    (95) expression -> . expression OR expression
    (96) expression -> . expression XOR expression
    (97) expression -> . expression LT expression
    (98) expression -> . expression GT expression
    (99) expression -> . expression LE expression
    (100) expression -> . expression GE expression
    (101) expression -> . expression EQ expression
    (102) expression -> . LPAREN expression RPAREN
    (103) expression -> . NOT expression
    (104) expression -> . MINUS expression
    (105) expression -> . PLUS expression
    (115) int_number -> . INT_NUMBER
    (116) int_number -> . TRUE
    (117) int_number -> . FALSE
    (118) int_number -> . ID
    (119) float_number -> . FLOAT_NUMBER
    (120) float_number -> . ID
    (121) string_number -> . STRING_NUMBER
    (113) log -> . LOG LPAREN expression RPAREN
    (114) log -> . LN LPAREN expression RPAREN
    (112) exp -> . EXP LPAREN expression RPAREN
    (110) call -> . ID DOT ID
    (111) eq_string -> . EQ_STRING LPAREN ID COMMA ID RPAREN

    ID              shift and go to state 85
    LPAREN          shift and go to state 95
    NOT             shift and go to state 96
    MINUS           shift and go to state 94
    PLUS            shift and go to state 93
    INT_NUMBER      shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99
    FLOAT_NUMBER    shift and go to state 100
    STRING_NUMBER   shift and go to state 101
    LOG             shift and go to state 102
    LN              shift and go to state 103
    EXP             shift and go to state 104
    EQ_STRING       shift and go to state 105

    expression                     shift and go to state 178
    int_number                     shift and go to state 86
    float_number                   shift and go to state 87
    string_number                  shift and go to state 88
    log                            shift and go to state 89
    exp                            shift and go to state 90
    call                           shift and go to state 91
    eq_string                      shift and go to state 92

state 133

    (110) call -> ID DOT . ID

    ID              shift and go to state 179


state 134

    (105) expression -> PLUS expression .
    (90) expression -> expression . PLUS expression
    (91) expression -> expression . MINUS expression
    (92) expression -> expression . TIMES expression
    (93) expression -> expression . DIVIDE expression
    (94) expression -> expression . AND expression
    (95) expression -> expression . OR expression
    (96) expression -> expression . XOR expression
    (97) expression -> expression . LT expression
    (98) expression -> expression . GT expression
    (99) expression -> expression . LE expression
    (100) expression -> expression . GE expression
    (101) expression -> expression . EQ expression

    DO              reduce using rule 105 (expression -> PLUS expression .)
    PLUS            reduce using rule 105 (expression -> PLUS expression .)
    MINUS           reduce using rule 105 (expression -> PLUS expression .)
    XOR             reduce using rule 105 (expression -> PLUS expression .)
    THEN            reduce using rule 105 (expression -> PLUS expression .)
    SEMICOLON       reduce using rule 105 (expression -> PLUS expression .)
    RPAREN          reduce using rule 105 (expression -> PLUS expression .)
    TO              reduce using rule 105 (expression -> PLUS expression .)
    COLON           reduce using rule 105 (expression -> PLUS expression .)
    ID              reduce using rule 105 (expression -> PLUS expression .)
    COMMA           reduce using rule 105 (expression -> PLUS expression .)
    BY              reduce using rule 105 (expression -> PLUS expression .)
    TIMES           shift and go to state 123
    DIVIDE          shift and go to state 124
    AND             shift and go to state 125
    OR              shift and go to state 126
    LT              shift and go to state 128
    GT              shift and go to state 129
    LE              shift and go to state 130
    GE              shift and go to state 131
    EQ              shift and go to state 132

  ! TIMES           [ reduce using rule 105 (expression -> PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 105 (expression -> PLUS expression .) ]
  ! AND             [ reduce using rule 105 (expression -> PLUS expression .) ]
  ! OR              [ reduce using rule 105 (expression -> PLUS expression .) ]
  ! LT              [ reduce using rule 105 (expression -> PLUS expression .) ]
  ! GT              [ reduce using rule 105 (expression -> PLUS expression .) ]
  ! LE              [ reduce using rule 105 (expression -> PLUS expression .) ]
  ! GE              [ reduce using rule 105 (expression -> PLUS expression .) ]
  ! EQ              [ reduce using rule 105 (expression -> PLUS expression .) ]
  ! PLUS            [ shift and go to state 121 ]
  ! MINUS           [ shift and go to state 122 ]
  ! XOR             [ shift and go to state 127 ]


state 135

    (104) expression -> MINUS expression .
    (90) expression -> expression . PLUS expression
    (91) expression -> expression . MINUS expression
    (92) expression -> expression . TIMES expression
    (93) expression -> expression . DIVIDE expression
    (94) expression -> expression . AND expression
    (95) expression -> expression . OR expression
    (96) expression -> expression . XOR expression
    (97) expression -> expression . LT expression
    (98) expression -> expression . GT expression
    (99) expression -> expression . LE expression
    (100) expression -> expression . GE expression
    (101) expression -> expression . EQ expression

    DO              reduce using rule 104 (expression -> MINUS expression .)
    PLUS            reduce using rule 104 (expression -> MINUS expression .)
    MINUS           reduce using rule 104 (expression -> MINUS expression .)
    XOR             reduce using rule 104 (expression -> MINUS expression .)
    THEN            reduce using rule 104 (expression -> MINUS expression .)
    SEMICOLON       reduce using rule 104 (expression -> MINUS expression .)
    RPAREN          reduce using rule 104 (expression -> MINUS expression .)
    TO              reduce using rule 104 (expression -> MINUS expression .)
    COLON           reduce using rule 104 (expression -> MINUS expression .)
    ID              reduce using rule 104 (expression -> MINUS expression .)
    COMMA           reduce using rule 104 (expression -> MINUS expression .)
    BY              reduce using rule 104 (expression -> MINUS expression .)
    TIMES           shift and go to state 123
    DIVIDE          shift and go to state 124
    AND             shift and go to state 125
    OR              shift and go to state 126
    LT              shift and go to state 128
    GT              shift and go to state 129
    LE              shift and go to state 130
    GE              shift and go to state 131
    EQ              shift and go to state 132

  ! TIMES           [ reduce using rule 104 (expression -> MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 104 (expression -> MINUS expression .) ]
  ! AND             [ reduce using rule 104 (expression -> MINUS expression .) ]
  ! OR              [ reduce using rule 104 (expression -> MINUS expression .) ]
  ! LT              [ reduce using rule 104 (expression -> MINUS expression .) ]
  ! GT              [ reduce using rule 104 (expression -> MINUS expression .) ]
  ! LE              [ reduce using rule 104 (expression -> MINUS expression .) ]
  ! GE              [ reduce using rule 104 (expression -> MINUS expression .) ]
  ! EQ              [ reduce using rule 104 (expression -> MINUS expression .) ]
  ! PLUS            [ shift and go to state 121 ]
  ! MINUS           [ shift and go to state 122 ]
  ! XOR             [ shift and go to state 127 ]


state 136

    (102) expression -> LPAREN expression . RPAREN
    (90) expression -> expression . PLUS expression
    (91) expression -> expression . MINUS expression
    (92) expression -> expression . TIMES expression
    (93) expression -> expression . DIVIDE expression
    (94) expression -> expression . AND expression
    (95) expression -> expression . OR expression
    (96) expression -> expression . XOR expression
    (97) expression -> expression . LT expression
    (98) expression -> expression . GT expression
    (99) expression -> expression . LE expression
    (100) expression -> expression . GE expression
    (101) expression -> expression . EQ expression

    RPAREN          shift and go to state 180
    PLUS            shift and go to state 121
    MINUS           shift and go to state 122
    TIMES           shift and go to state 123
    DIVIDE          shift and go to state 124
    AND             shift and go to state 125
    OR              shift and go to state 126
    XOR             shift and go to state 127
    LT              shift and go to state 128
    GT              shift and go to state 129
    LE              shift and go to state 130
    GE              shift and go to state 131
    EQ              shift and go to state 132


state 137

    (103) expression -> NOT expression .
    (90) expression -> expression . PLUS expression
    (91) expression -> expression . MINUS expression
    (92) expression -> expression . TIMES expression
    (93) expression -> expression . DIVIDE expression
    (94) expression -> expression . AND expression
    (95) expression -> expression . OR expression
    (96) expression -> expression . XOR expression
    (97) expression -> expression . LT expression
    (98) expression -> expression . GT expression
    (99) expression -> expression . LE expression
    (100) expression -> expression . GE expression
    (101) expression -> expression . EQ expression

    DO              reduce using rule 103 (expression -> NOT expression .)
    PLUS            reduce using rule 103 (expression -> NOT expression .)
    MINUS           reduce using rule 103 (expression -> NOT expression .)
    TIMES           reduce using rule 103 (expression -> NOT expression .)
    DIVIDE          reduce using rule 103 (expression -> NOT expression .)
    XOR             reduce using rule 103 (expression -> NOT expression .)
    THEN            reduce using rule 103 (expression -> NOT expression .)
    SEMICOLON       reduce using rule 103 (expression -> NOT expression .)
    RPAREN          reduce using rule 103 (expression -> NOT expression .)
    TO              reduce using rule 103 (expression -> NOT expression .)
    COLON           reduce using rule 103 (expression -> NOT expression .)
    ID              reduce using rule 103 (expression -> NOT expression .)
    COMMA           reduce using rule 103 (expression -> NOT expression .)
    BY              reduce using rule 103 (expression -> NOT expression .)
    AND             shift and go to state 125
    OR              shift and go to state 126
    LT              shift and go to state 128
    GT              shift and go to state 129
    LE              shift and go to state 130
    GE              shift and go to state 131
    EQ              shift and go to state 132

  ! AND             [ reduce using rule 103 (expression -> NOT expression .) ]
  ! OR              [ reduce using rule 103 (expression -> NOT expression .) ]
  ! LT              [ reduce using rule 103 (expression -> NOT expression .) ]
  ! GT              [ reduce using rule 103 (expression -> NOT expression .) ]
  ! LE              [ reduce using rule 103 (expression -> NOT expression .) ]
  ! GE              [ reduce using rule 103 (expression -> NOT expression .) ]
  ! EQ              [ reduce using rule 103 (expression -> NOT expression .) ]
  ! PLUS            [ shift and go to state 121 ]
  ! MINUS           [ shift and go to state 122 ]
  ! TIMES           [ shift and go to state 123 ]
  ! DIVIDE          [ shift and go to state 124 ]
  ! XOR             [ shift and go to state 127 ]


state 138

    (113) log -> LOG LPAREN . expression RPAREN
    (82) expression -> . ID
    (83) expression -> . int_number
    (84) expression -> . float_number
    (85) expression -> . string_number
    (86) expression -> . log
    (87) expression -> . exp
    (88) expression -> . call
    (89) expression -> . eq_string
    (90) expression -> . expression PLUS expression
    (91) expression -> . expression MINUS expression
    (92) expression -> . expression TIMES expression
    (93) expression -> . expression DIVIDE expression
    (94) expression -> . expression AND expression
    (95) expression -> . expression OR expression
    (96) expression -> . expression XOR expression
    (97) expression -> . expression LT expression
    (98) expression -> . expression GT expression
    (99) expression -> . expression LE expression
    (100) expression -> . expression GE expression
    (101) expression -> . expression EQ expression
    (102) expression -> . LPAREN expression RPAREN
    (103) expression -> . NOT expression
    (104) expression -> . MINUS expression
    (105) expression -> . PLUS expression
    (115) int_number -> . INT_NUMBER
    (116) int_number -> . TRUE
    (117) int_number -> . FALSE
    (118) int_number -> . ID
    (119) float_number -> . FLOAT_NUMBER
    (120) float_number -> . ID
    (121) string_number -> . STRING_NUMBER
    (113) log -> . LOG LPAREN expression RPAREN
    (114) log -> . LN LPAREN expression RPAREN
    (112) exp -> . EXP LPAREN expression RPAREN
    (110) call -> . ID DOT ID
    (111) eq_string -> . EQ_STRING LPAREN ID COMMA ID RPAREN

    ID              shift and go to state 85
    LPAREN          shift and go to state 95
    NOT             shift and go to state 96
    MINUS           shift and go to state 94
    PLUS            shift and go to state 93
    INT_NUMBER      shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99
    FLOAT_NUMBER    shift and go to state 100
    STRING_NUMBER   shift and go to state 101
    LOG             shift and go to state 102
    LN              shift and go to state 103
    EXP             shift and go to state 104
    EQ_STRING       shift and go to state 105

    expression                     shift and go to state 181
    int_number                     shift and go to state 86
    float_number                   shift and go to state 87
    string_number                  shift and go to state 88
    log                            shift and go to state 89
    exp                            shift and go to state 90
    call                           shift and go to state 91
    eq_string                      shift and go to state 92

state 139

    (114) log -> LN LPAREN . expression RPAREN
    (82) expression -> . ID
    (83) expression -> . int_number
    (84) expression -> . float_number
    (85) expression -> . string_number
    (86) expression -> . log
    (87) expression -> . exp
    (88) expression -> . call
    (89) expression -> . eq_string
    (90) expression -> . expression PLUS expression
    (91) expression -> . expression MINUS expression
    (92) expression -> . expression TIMES expression
    (93) expression -> . expression DIVIDE expression
    (94) expression -> . expression AND expression
    (95) expression -> . expression OR expression
    (96) expression -> . expression XOR expression
    (97) expression -> . expression LT expression
    (98) expression -> . expression GT expression
    (99) expression -> . expression LE expression
    (100) expression -> . expression GE expression
    (101) expression -> . expression EQ expression
    (102) expression -> . LPAREN expression RPAREN
    (103) expression -> . NOT expression
    (104) expression -> . MINUS expression
    (105) expression -> . PLUS expression
    (115) int_number -> . INT_NUMBER
    (116) int_number -> . TRUE
    (117) int_number -> . FALSE
    (118) int_number -> . ID
    (119) float_number -> . FLOAT_NUMBER
    (120) float_number -> . ID
    (121) string_number -> . STRING_NUMBER
    (113) log -> . LOG LPAREN expression RPAREN
    (114) log -> . LN LPAREN expression RPAREN
    (112) exp -> . EXP LPAREN expression RPAREN
    (110) call -> . ID DOT ID
    (111) eq_string -> . EQ_STRING LPAREN ID COMMA ID RPAREN

    ID              shift and go to state 85
    LPAREN          shift and go to state 95
    NOT             shift and go to state 96
    MINUS           shift and go to state 94
    PLUS            shift and go to state 93
    INT_NUMBER      shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99
    FLOAT_NUMBER    shift and go to state 100
    STRING_NUMBER   shift and go to state 101
    LOG             shift and go to state 102
    LN              shift and go to state 103
    EXP             shift and go to state 104
    EQ_STRING       shift and go to state 105

    expression                     shift and go to state 182
    int_number                     shift and go to state 86
    float_number                   shift and go to state 87
    string_number                  shift and go to state 88
    log                            shift and go to state 89
    exp                            shift and go to state 90
    call                           shift and go to state 91
    eq_string                      shift and go to state 92

state 140

    (112) exp -> EXP LPAREN . expression RPAREN
    (82) expression -> . ID
    (83) expression -> . int_number
    (84) expression -> . float_number
    (85) expression -> . string_number
    (86) expression -> . log
    (87) expression -> . exp
    (88) expression -> . call
    (89) expression -> . eq_string
    (90) expression -> . expression PLUS expression
    (91) expression -> . expression MINUS expression
    (92) expression -> . expression TIMES expression
    (93) expression -> . expression DIVIDE expression
    (94) expression -> . expression AND expression
    (95) expression -> . expression OR expression
    (96) expression -> . expression XOR expression
    (97) expression -> . expression LT expression
    (98) expression -> . expression GT expression
    (99) expression -> . expression LE expression
    (100) expression -> . expression GE expression
    (101) expression -> . expression EQ expression
    (102) expression -> . LPAREN expression RPAREN
    (103) expression -> . NOT expression
    (104) expression -> . MINUS expression
    (105) expression -> . PLUS expression
    (115) int_number -> . INT_NUMBER
    (116) int_number -> . TRUE
    (117) int_number -> . FALSE
    (118) int_number -> . ID
    (119) float_number -> . FLOAT_NUMBER
    (120) float_number -> . ID
    (121) string_number -> . STRING_NUMBER
    (113) log -> . LOG LPAREN expression RPAREN
    (114) log -> . LN LPAREN expression RPAREN
    (112) exp -> . EXP LPAREN expression RPAREN
    (110) call -> . ID DOT ID
    (111) eq_string -> . EQ_STRING LPAREN ID COMMA ID RPAREN

    ID              shift and go to state 85
    LPAREN          shift and go to state 95
    NOT             shift and go to state 96
    MINUS           shift and go to state 94
    PLUS            shift and go to state 93
    INT_NUMBER      shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99
    FLOAT_NUMBER    shift and go to state 100
    STRING_NUMBER   shift and go to state 101
    LOG             shift and go to state 102
    LN              shift and go to state 103
    EXP             shift and go to state 104
    EQ_STRING       shift and go to state 105

    expression                     shift and go to state 183
    int_number                     shift and go to state 86
    float_number                   shift and go to state 87
    string_number                  shift and go to state 88
    log                            shift and go to state 89
    exp                            shift and go to state 90
    call                           shift and go to state 91
    eq_string                      shift and go to state 92

state 141

    (111) eq_string -> EQ_STRING LPAREN . ID COMMA ID RPAREN

    ID              shift and go to state 184


state 142

    (70) if_statement -> IF expression THEN . statement_list END_IF SEMICOLON
    (71) if_statement -> IF expression THEN . statement_list elsif_statement_list END_IF SEMICOLON
    (72) if_statement -> IF expression THEN . statement_list else_statement END_IF SEMICOLON
    (73) if_statement -> IF expression THEN . statement_list elsif_statement_list else_statement END_IF SEMICOLON
    (34) statement_list -> .
    (35) statement_list -> . statement_list assign_statement
    (36) statement_list -> . statement_list while_statement
    (37) statement_list -> . statement_list if_statement
    (38) statement_list -> . statement_list for_statement
    (39) statement_list -> . statement_list call_statement
    (40) statement_list -> . statement_list case_statement

    END_IF          reduce using rule 34 (statement_list -> .)
    ELSE            reduce using rule 34 (statement_list -> .)
    ID              reduce using rule 34 (statement_list -> .)
    WHILE           reduce using rule 34 (statement_list -> .)
    IF              reduce using rule 34 (statement_list -> .)
    FOR             reduce using rule 34 (statement_list -> .)
    CASE            reduce using rule 34 (statement_list -> .)
    ELSIF           reduce using rule 34 (statement_list -> .)

    statement_list                 shift and go to state 185

state 143

    (78) for_statement -> FOR ID ASSIGN . expression TO expression DO statement_list END_FOR SEMICOLON
    (79) for_statement -> FOR ID ASSIGN . expression TO expression BY expression DO statement_list END_FOR SEMICOLON
    (82) expression -> . ID
    (83) expression -> . int_number
    (84) expression -> . float_number
    (85) expression -> . string_number
    (86) expression -> . log
    (87) expression -> . exp
    (88) expression -> . call
    (89) expression -> . eq_string
    (90) expression -> . expression PLUS expression
    (91) expression -> . expression MINUS expression
    (92) expression -> . expression TIMES expression
    (93) expression -> . expression DIVIDE expression
    (94) expression -> . expression AND expression
    (95) expression -> . expression OR expression
    (96) expression -> . expression XOR expression
    (97) expression -> . expression LT expression
    (98) expression -> . expression GT expression
    (99) expression -> . expression LE expression
    (100) expression -> . expression GE expression
    (101) expression -> . expression EQ expression
    (102) expression -> . LPAREN expression RPAREN
    (103) expression -> . NOT expression
    (104) expression -> . MINUS expression
    (105) expression -> . PLUS expression
    (115) int_number -> . INT_NUMBER
    (116) int_number -> . TRUE
    (117) int_number -> . FALSE
    (118) int_number -> . ID
    (119) float_number -> . FLOAT_NUMBER
    (120) float_number -> . ID
    (121) string_number -> . STRING_NUMBER
    (113) log -> . LOG LPAREN expression RPAREN
    (114) log -> . LN LPAREN expression RPAREN
    (112) exp -> . EXP LPAREN expression RPAREN
    (110) call -> . ID DOT ID
    (111) eq_string -> . EQ_STRING LPAREN ID COMMA ID RPAREN

    ID              shift and go to state 85
    LPAREN          shift and go to state 95
    NOT             shift and go to state 96
    MINUS           shift and go to state 94
    PLUS            shift and go to state 93
    INT_NUMBER      shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99
    FLOAT_NUMBER    shift and go to state 100
    STRING_NUMBER   shift and go to state 101
    LOG             shift and go to state 102
    LN              shift and go to state 103
    EXP             shift and go to state 104
    EQ_STRING       shift and go to state 105

    expression                     shift and go to state 186
    int_number                     shift and go to state 86
    float_number                   shift and go to state 87
    string_number                  shift and go to state 88
    log                            shift and go to state 89
    exp                            shift and go to state 90
    call                           shift and go to state 91
    eq_string                      shift and go to state 92

state 144

    (67) case_statement -> CASE ID OF . case_list END_CASE SEMICOLON
    (68) case_list -> . expression COLON statement_list
    (69) case_list -> . case_list expression COLON statement_list
    (82) expression -> . ID
    (83) expression -> . int_number
    (84) expression -> . float_number
    (85) expression -> . string_number
    (86) expression -> . log
    (87) expression -> . exp
    (88) expression -> . call
    (89) expression -> . eq_string
    (90) expression -> . expression PLUS expression
    (91) expression -> . expression MINUS expression
    (92) expression -> . expression TIMES expression
    (93) expression -> . expression DIVIDE expression
    (94) expression -> . expression AND expression
    (95) expression -> . expression OR expression
    (96) expression -> . expression XOR expression
    (97) expression -> . expression LT expression
    (98) expression -> . expression GT expression
    (99) expression -> . expression LE expression
    (100) expression -> . expression GE expression
    (101) expression -> . expression EQ expression
    (102) expression -> . LPAREN expression RPAREN
    (103) expression -> . NOT expression
    (104) expression -> . MINUS expression
    (105) expression -> . PLUS expression
    (115) int_number -> . INT_NUMBER
    (116) int_number -> . TRUE
    (117) int_number -> . FALSE
    (118) int_number -> . ID
    (119) float_number -> . FLOAT_NUMBER
    (120) float_number -> . ID
    (121) string_number -> . STRING_NUMBER
    (113) log -> . LOG LPAREN expression RPAREN
    (114) log -> . LN LPAREN expression RPAREN
    (112) exp -> . EXP LPAREN expression RPAREN
    (110) call -> . ID DOT ID
    (111) eq_string -> . EQ_STRING LPAREN ID COMMA ID RPAREN

    ID              shift and go to state 85
    LPAREN          shift and go to state 95
    NOT             shift and go to state 96
    MINUS           shift and go to state 94
    PLUS            shift and go to state 93
    INT_NUMBER      shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99
    FLOAT_NUMBER    shift and go to state 100
    STRING_NUMBER   shift and go to state 101
    LOG             shift and go to state 102
    LN              shift and go to state 103
    EXP             shift and go to state 104
    EQ_STRING       shift and go to state 105

    case_list                      shift and go to state 187
    expression                     shift and go to state 188
    int_number                     shift and go to state 86
    float_number                   shift and go to state 87
    string_number                  shift and go to state 88
    log                            shift and go to state 89
    exp                            shift and go to state 90
    call                           shift and go to state 91
    eq_string                      shift and go to state 92

state 145

    (49) declare_int_statement -> ID COLON INT . ASSIGN int_number SEMICOLON
    (57) declare_int_statement -> ID COLON INT . SEMICOLON

    ASSIGN          shift and go to state 189
    SEMICOLON       shift and go to state 190


state 146

    (50) declare_int_statement -> ID COLON BOOL . ASSIGN int_number SEMICOLON
    (58) declare_int_statement -> ID COLON BOOL . SEMICOLON

    ASSIGN          shift and go to state 191
    SEMICOLON       shift and go to state 192


state 147

    (51) declare_int_statement -> ID COLON BYTE . ASSIGN int_number SEMICOLON
    (55) declare_int_statement -> ID COLON BYTE . ASSIGN ID SEMICOLON
    (59) declare_int_statement -> ID COLON BYTE . SEMICOLON

    ASSIGN          shift and go to state 193
    SEMICOLON       shift and go to state 194


state 148

    (52) declare_int_statement -> ID COLON TIME . ASSIGN int_number SEMICOLON
    (56) declare_int_statement -> ID COLON TIME . ASSIGN ID SEMICOLON
    (60) declare_int_statement -> ID COLON TIME . SEMICOLON

    ASSIGN          shift and go to state 195
    SEMICOLON       shift and go to state 196


state 149

    (53) declare_int_statement -> ID COLON DWORD . ASSIGN int_number SEMICOLON
    (61) declare_int_statement -> ID COLON DWORD . SEMICOLON

    ASSIGN          shift and go to state 197
    SEMICOLON       shift and go to state 198


state 150

    (54) declare_int_statement -> ID COLON STRING . ASSIGN string_number SEMICOLON
    (62) declare_int_statement -> ID COLON STRING . SEMICOLON

    ASSIGN          shift and go to state 199
    SEMICOLON       shift and go to state 200


state 151

    (63) declare_float_statement -> ID COLON FLOAT . ASSIGN float_number SEMICOLON
    (64) declare_float_statement -> ID COLON FLOAT . SEMICOLON

    ASSIGN          shift and go to state 201
    SEMICOLON       shift and go to state 202


state 152

    (65) declare_float_statement -> ID COLON REAL . ASSIGN float_number SEMICOLON
    (66) declare_float_statement -> ID COLON REAL . SEMICOLON

    ASSIGN          shift and go to state 203
    SEMICOLON       shift and go to state 204


state 153

    (45) declare_timer_statement -> ID COLON TP . SEMICOLON

    SEMICOLON       shift and go to state 205


state 154

    (46) declare_timer_statement -> ID COLON TON . SEMICOLON

    SEMICOLON       shift and go to state 206


state 155

    (47) declare_timer_statement -> ID COLON TOF . SEMICOLON

    SEMICOLON       shift and go to state 207


state 156

    (48) declare_timer_statement -> ID COLON RTC . SEMICOLON

    SEMICOLON       shift and go to state 208


state 157

    (11) function_definition -> FUNCTION ID COLON INT var_list statement_list END_FUNCTION .

    FUNCTION_BLOCK  reduce using rule 11 (function_definition -> FUNCTION ID COLON INT var_list statement_list END_FUNCTION .)
    FUNCTION        reduce using rule 11 (function_definition -> FUNCTION ID COLON INT var_list statement_list END_FUNCTION .)
    PROGRAM         reduce using rule 11 (function_definition -> FUNCTION ID COLON INT var_list statement_list END_FUNCTION .)
    $end            reduce using rule 11 (function_definition -> FUNCTION ID COLON INT var_list statement_list END_FUNCTION .)


state 158

    (12) function_definition -> FUNCTION ID COLON BOOL var_list statement_list END_FUNCTION .

    FUNCTION_BLOCK  reduce using rule 12 (function_definition -> FUNCTION ID COLON BOOL var_list statement_list END_FUNCTION .)
    FUNCTION        reduce using rule 12 (function_definition -> FUNCTION ID COLON BOOL var_list statement_list END_FUNCTION .)
    PROGRAM         reduce using rule 12 (function_definition -> FUNCTION ID COLON BOOL var_list statement_list END_FUNCTION .)
    $end            reduce using rule 12 (function_definition -> FUNCTION ID COLON BOOL var_list statement_list END_FUNCTION .)


state 159

    (13) function_definition -> FUNCTION ID COLON REAL var_list statement_list END_FUNCTION .

    FUNCTION_BLOCK  reduce using rule 13 (function_definition -> FUNCTION ID COLON REAL var_list statement_list END_FUNCTION .)
    FUNCTION        reduce using rule 13 (function_definition -> FUNCTION ID COLON REAL var_list statement_list END_FUNCTION .)
    PROGRAM         reduce using rule 13 (function_definition -> FUNCTION ID COLON REAL var_list statement_list END_FUNCTION .)
    $end            reduce using rule 13 (function_definition -> FUNCTION ID COLON REAL var_list statement_list END_FUNCTION .)


state 160

    (14) function_definition -> FUNCTION ID COLON FLOAT var_list statement_list END_FUNCTION .

    FUNCTION_BLOCK  reduce using rule 14 (function_definition -> FUNCTION ID COLON FLOAT var_list statement_list END_FUNCTION .)
    FUNCTION        reduce using rule 14 (function_definition -> FUNCTION ID COLON FLOAT var_list statement_list END_FUNCTION .)
    PROGRAM         reduce using rule 14 (function_definition -> FUNCTION ID COLON FLOAT var_list statement_list END_FUNCTION .)
    $end            reduce using rule 14 (function_definition -> FUNCTION ID COLON FLOAT var_list statement_list END_FUNCTION .)


state 161

    (15) function_definition -> FUNCTION ID COLON BYTE var_list statement_list END_FUNCTION .

    FUNCTION_BLOCK  reduce using rule 15 (function_definition -> FUNCTION ID COLON BYTE var_list statement_list END_FUNCTION .)
    FUNCTION        reduce using rule 15 (function_definition -> FUNCTION ID COLON BYTE var_list statement_list END_FUNCTION .)
    PROGRAM         reduce using rule 15 (function_definition -> FUNCTION ID COLON BYTE var_list statement_list END_FUNCTION .)
    $end            reduce using rule 15 (function_definition -> FUNCTION ID COLON BYTE var_list statement_list END_FUNCTION .)


state 162

    (81) assign_statement -> ID ASSIGN expression SEMICOLON .

    END_PROGRAM     reduce using rule 81 (assign_statement -> ID ASSIGN expression SEMICOLON .)
    ID              reduce using rule 81 (assign_statement -> ID ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 81 (assign_statement -> ID ASSIGN expression SEMICOLON .)
    IF              reduce using rule 81 (assign_statement -> ID ASSIGN expression SEMICOLON .)
    FOR             reduce using rule 81 (assign_statement -> ID ASSIGN expression SEMICOLON .)
    CASE            reduce using rule 81 (assign_statement -> ID ASSIGN expression SEMICOLON .)
    END_FUNCTION_BLOCK reduce using rule 81 (assign_statement -> ID ASSIGN expression SEMICOLON .)
    END_FUNCTION    reduce using rule 81 (assign_statement -> ID ASSIGN expression SEMICOLON .)
    END_WHILE       reduce using rule 81 (assign_statement -> ID ASSIGN expression SEMICOLON .)
    END_IF          reduce using rule 81 (assign_statement -> ID ASSIGN expression SEMICOLON .)
    ELSE            reduce using rule 81 (assign_statement -> ID ASSIGN expression SEMICOLON .)
    ELSIF           reduce using rule 81 (assign_statement -> ID ASSIGN expression SEMICOLON .)
    END_CASE        reduce using rule 81 (assign_statement -> ID ASSIGN expression SEMICOLON .)
    LPAREN          reduce using rule 81 (assign_statement -> ID ASSIGN expression SEMICOLON .)
    NOT             reduce using rule 81 (assign_statement -> ID ASSIGN expression SEMICOLON .)
    MINUS           reduce using rule 81 (assign_statement -> ID ASSIGN expression SEMICOLON .)
    PLUS            reduce using rule 81 (assign_statement -> ID ASSIGN expression SEMICOLON .)
    INT_NUMBER      reduce using rule 81 (assign_statement -> ID ASSIGN expression SEMICOLON .)
    TRUE            reduce using rule 81 (assign_statement -> ID ASSIGN expression SEMICOLON .)
    FALSE           reduce using rule 81 (assign_statement -> ID ASSIGN expression SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 81 (assign_statement -> ID ASSIGN expression SEMICOLON .)
    STRING_NUMBER   reduce using rule 81 (assign_statement -> ID ASSIGN expression SEMICOLON .)
    LOG             reduce using rule 81 (assign_statement -> ID ASSIGN expression SEMICOLON .)
    LN              reduce using rule 81 (assign_statement -> ID ASSIGN expression SEMICOLON .)
    EXP             reduce using rule 81 (assign_statement -> ID ASSIGN expression SEMICOLON .)
    EQ_STRING       reduce using rule 81 (assign_statement -> ID ASSIGN expression SEMICOLON .)
    END_FOR         reduce using rule 81 (assign_statement -> ID ASSIGN expression SEMICOLON .)


state 163

    (108) argument -> argument ID ASSIGN . expression
    (82) expression -> . ID
    (83) expression -> . int_number
    (84) expression -> . float_number
    (85) expression -> . string_number
    (86) expression -> . log
    (87) expression -> . exp
    (88) expression -> . call
    (89) expression -> . eq_string
    (90) expression -> . expression PLUS expression
    (91) expression -> . expression MINUS expression
    (92) expression -> . expression TIMES expression
    (93) expression -> . expression DIVIDE expression
    (94) expression -> . expression AND expression
    (95) expression -> . expression OR expression
    (96) expression -> . expression XOR expression
    (97) expression -> . expression LT expression
    (98) expression -> . expression GT expression
    (99) expression -> . expression LE expression
    (100) expression -> . expression GE expression
    (101) expression -> . expression EQ expression
    (102) expression -> . LPAREN expression RPAREN
    (103) expression -> . NOT expression
    (104) expression -> . MINUS expression
    (105) expression -> . PLUS expression
    (115) int_number -> . INT_NUMBER
    (116) int_number -> . TRUE
    (117) int_number -> . FALSE
    (118) int_number -> . ID
    (119) float_number -> . FLOAT_NUMBER
    (120) float_number -> . ID
    (121) string_number -> . STRING_NUMBER
    (113) log -> . LOG LPAREN expression RPAREN
    (114) log -> . LN LPAREN expression RPAREN
    (112) exp -> . EXP LPAREN expression RPAREN
    (110) call -> . ID DOT ID
    (111) eq_string -> . EQ_STRING LPAREN ID COMMA ID RPAREN

    ID              shift and go to state 85
    LPAREN          shift and go to state 95
    NOT             shift and go to state 96
    MINUS           shift and go to state 94
    PLUS            shift and go to state 93
    INT_NUMBER      shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99
    FLOAT_NUMBER    shift and go to state 100
    STRING_NUMBER   shift and go to state 101
    LOG             shift and go to state 102
    LN              shift and go to state 103
    EXP             shift and go to state 104
    EQ_STRING       shift and go to state 105

    expression                     shift and go to state 209
    int_number                     shift and go to state 86
    float_number                   shift and go to state 87
    string_number                  shift and go to state 88
    log                            shift and go to state 89
    exp                            shift and go to state 90
    call                           shift and go to state 91
    eq_string                      shift and go to state 92

state 164

    (106) call_statement -> ID argument RPAREN SEMICOLON .

    END_PROGRAM     reduce using rule 106 (call_statement -> ID argument RPAREN SEMICOLON .)
    ID              reduce using rule 106 (call_statement -> ID argument RPAREN SEMICOLON .)
    WHILE           reduce using rule 106 (call_statement -> ID argument RPAREN SEMICOLON .)
    IF              reduce using rule 106 (call_statement -> ID argument RPAREN SEMICOLON .)
    FOR             reduce using rule 106 (call_statement -> ID argument RPAREN SEMICOLON .)
    CASE            reduce using rule 106 (call_statement -> ID argument RPAREN SEMICOLON .)
    END_FUNCTION_BLOCK reduce using rule 106 (call_statement -> ID argument RPAREN SEMICOLON .)
    END_FUNCTION    reduce using rule 106 (call_statement -> ID argument RPAREN SEMICOLON .)
    END_WHILE       reduce using rule 106 (call_statement -> ID argument RPAREN SEMICOLON .)
    END_IF          reduce using rule 106 (call_statement -> ID argument RPAREN SEMICOLON .)
    ELSE            reduce using rule 106 (call_statement -> ID argument RPAREN SEMICOLON .)
    ELSIF           reduce using rule 106 (call_statement -> ID argument RPAREN SEMICOLON .)
    END_CASE        reduce using rule 106 (call_statement -> ID argument RPAREN SEMICOLON .)
    LPAREN          reduce using rule 106 (call_statement -> ID argument RPAREN SEMICOLON .)
    NOT             reduce using rule 106 (call_statement -> ID argument RPAREN SEMICOLON .)
    MINUS           reduce using rule 106 (call_statement -> ID argument RPAREN SEMICOLON .)
    PLUS            reduce using rule 106 (call_statement -> ID argument RPAREN SEMICOLON .)
    INT_NUMBER      reduce using rule 106 (call_statement -> ID argument RPAREN SEMICOLON .)
    TRUE            reduce using rule 106 (call_statement -> ID argument RPAREN SEMICOLON .)
    FALSE           reduce using rule 106 (call_statement -> ID argument RPAREN SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 106 (call_statement -> ID argument RPAREN SEMICOLON .)
    STRING_NUMBER   reduce using rule 106 (call_statement -> ID argument RPAREN SEMICOLON .)
    LOG             reduce using rule 106 (call_statement -> ID argument RPAREN SEMICOLON .)
    LN              reduce using rule 106 (call_statement -> ID argument RPAREN SEMICOLON .)
    EXP             reduce using rule 106 (call_statement -> ID argument RPAREN SEMICOLON .)
    EQ_STRING       reduce using rule 106 (call_statement -> ID argument RPAREN SEMICOLON .)
    END_FOR         reduce using rule 106 (call_statement -> ID argument RPAREN SEMICOLON .)


state 165

    (109) argument -> argument COMMA ID . ASSIGN expression

    ASSIGN          shift and go to state 210


state 166

    (80) while_statement -> WHILE expression DO statement_list . END_WHILE
    (35) statement_list -> statement_list . assign_statement
    (36) statement_list -> statement_list . while_statement
    (37) statement_list -> statement_list . if_statement
    (38) statement_list -> statement_list . for_statement
    (39) statement_list -> statement_list . call_statement
    (40) statement_list -> statement_list . case_statement
    (81) assign_statement -> . ID ASSIGN expression SEMICOLON
    (80) while_statement -> . WHILE expression DO statement_list END_WHILE
    (70) if_statement -> . IF expression THEN statement_list END_IF SEMICOLON
    (71) if_statement -> . IF expression THEN statement_list elsif_statement_list END_IF SEMICOLON
    (72) if_statement -> . IF expression THEN statement_list else_statement END_IF SEMICOLON
    (73) if_statement -> . IF expression THEN statement_list elsif_statement_list else_statement END_IF SEMICOLON
    (78) for_statement -> . FOR ID ASSIGN expression TO expression DO statement_list END_FOR SEMICOLON
    (79) for_statement -> . FOR ID ASSIGN expression TO expression BY expression DO statement_list END_FOR SEMICOLON
    (106) call_statement -> . ID argument RPAREN SEMICOLON
    (67) case_statement -> . CASE ID OF case_list END_CASE SEMICOLON

    END_WHILE       shift and go to state 211
    ID              shift and go to state 51
    WHILE           shift and go to state 59
    IF              shift and go to state 60
    FOR             shift and go to state 61
    CASE            shift and go to state 62

    assign_statement               shift and go to state 53
    while_statement                shift and go to state 54
    if_statement                   shift and go to state 55
    for_statement                  shift and go to state 56
    call_statement                 shift and go to state 57
    case_statement                 shift and go to state 58

state 167

    (90) expression -> expression PLUS expression .
    (90) expression -> expression . PLUS expression
    (91) expression -> expression . MINUS expression
    (92) expression -> expression . TIMES expression
    (93) expression -> expression . DIVIDE expression
    (94) expression -> expression . AND expression
    (95) expression -> expression . OR expression
    (96) expression -> expression . XOR expression
    (97) expression -> expression . LT expression
    (98) expression -> expression . GT expression
    (99) expression -> expression . LE expression
    (100) expression -> expression . GE expression
    (101) expression -> expression . EQ expression

    DO              reduce using rule 90 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 90 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 90 (expression -> expression PLUS expression .)
    XOR             reduce using rule 90 (expression -> expression PLUS expression .)
    THEN            reduce using rule 90 (expression -> expression PLUS expression .)
    SEMICOLON       reduce using rule 90 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 90 (expression -> expression PLUS expression .)
    TO              reduce using rule 90 (expression -> expression PLUS expression .)
    COLON           reduce using rule 90 (expression -> expression PLUS expression .)
    ID              reduce using rule 90 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 90 (expression -> expression PLUS expression .)
    BY              reduce using rule 90 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 123
    DIVIDE          shift and go to state 124
    AND             shift and go to state 125
    OR              shift and go to state 126
    LT              shift and go to state 128
    GT              shift and go to state 129
    LE              shift and go to state 130
    GE              shift and go to state 131
    EQ              shift and go to state 132

  ! TIMES           [ reduce using rule 90 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 90 (expression -> expression PLUS expression .) ]
  ! AND             [ reduce using rule 90 (expression -> expression PLUS expression .) ]
  ! OR              [ reduce using rule 90 (expression -> expression PLUS expression .) ]
  ! LT              [ reduce using rule 90 (expression -> expression PLUS expression .) ]
  ! GT              [ reduce using rule 90 (expression -> expression PLUS expression .) ]
  ! LE              [ reduce using rule 90 (expression -> expression PLUS expression .) ]
  ! GE              [ reduce using rule 90 (expression -> expression PLUS expression .) ]
  ! EQ              [ reduce using rule 90 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 121 ]
  ! MINUS           [ shift and go to state 122 ]
  ! XOR             [ shift and go to state 127 ]


state 168

    (91) expression -> expression MINUS expression .
    (90) expression -> expression . PLUS expression
    (91) expression -> expression . MINUS expression
    (92) expression -> expression . TIMES expression
    (93) expression -> expression . DIVIDE expression
    (94) expression -> expression . AND expression
    (95) expression -> expression . OR expression
    (96) expression -> expression . XOR expression
    (97) expression -> expression . LT expression
    (98) expression -> expression . GT expression
    (99) expression -> expression . LE expression
    (100) expression -> expression . GE expression
    (101) expression -> expression . EQ expression

    DO              reduce using rule 91 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 91 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 91 (expression -> expression MINUS expression .)
    XOR             reduce using rule 91 (expression -> expression MINUS expression .)
    THEN            reduce using rule 91 (expression -> expression MINUS expression .)
    SEMICOLON       reduce using rule 91 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 91 (expression -> expression MINUS expression .)
    TO              reduce using rule 91 (expression -> expression MINUS expression .)
    COLON           reduce using rule 91 (expression -> expression MINUS expression .)
    ID              reduce using rule 91 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 91 (expression -> expression MINUS expression .)
    BY              reduce using rule 91 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 123
    DIVIDE          shift and go to state 124
    AND             shift and go to state 125
    OR              shift and go to state 126
    LT              shift and go to state 128
    GT              shift and go to state 129
    LE              shift and go to state 130
    GE              shift and go to state 131
    EQ              shift and go to state 132

  ! TIMES           [ reduce using rule 91 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 91 (expression -> expression MINUS expression .) ]
  ! AND             [ reduce using rule 91 (expression -> expression MINUS expression .) ]
  ! OR              [ reduce using rule 91 (expression -> expression MINUS expression .) ]
  ! LT              [ reduce using rule 91 (expression -> expression MINUS expression .) ]
  ! GT              [ reduce using rule 91 (expression -> expression MINUS expression .) ]
  ! LE              [ reduce using rule 91 (expression -> expression MINUS expression .) ]
  ! GE              [ reduce using rule 91 (expression -> expression MINUS expression .) ]
  ! EQ              [ reduce using rule 91 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 121 ]
  ! MINUS           [ shift and go to state 122 ]
  ! XOR             [ shift and go to state 127 ]


state 169

    (92) expression -> expression TIMES expression .
    (90) expression -> expression . PLUS expression
    (91) expression -> expression . MINUS expression
    (92) expression -> expression . TIMES expression
    (93) expression -> expression . DIVIDE expression
    (94) expression -> expression . AND expression
    (95) expression -> expression . OR expression
    (96) expression -> expression . XOR expression
    (97) expression -> expression . LT expression
    (98) expression -> expression . GT expression
    (99) expression -> expression . LE expression
    (100) expression -> expression . GE expression
    (101) expression -> expression . EQ expression

    DO              reduce using rule 92 (expression -> expression TIMES expression .)
    PLUS            reduce using rule 92 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 92 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 92 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 92 (expression -> expression TIMES expression .)
    XOR             reduce using rule 92 (expression -> expression TIMES expression .)
    THEN            reduce using rule 92 (expression -> expression TIMES expression .)
    SEMICOLON       reduce using rule 92 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 92 (expression -> expression TIMES expression .)
    TO              reduce using rule 92 (expression -> expression TIMES expression .)
    COLON           reduce using rule 92 (expression -> expression TIMES expression .)
    ID              reduce using rule 92 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 92 (expression -> expression TIMES expression .)
    BY              reduce using rule 92 (expression -> expression TIMES expression .)
    AND             shift and go to state 125
    OR              shift and go to state 126
    LT              shift and go to state 128
    GT              shift and go to state 129
    LE              shift and go to state 130
    GE              shift and go to state 131
    EQ              shift and go to state 132

  ! AND             [ reduce using rule 92 (expression -> expression TIMES expression .) ]
  ! OR              [ reduce using rule 92 (expression -> expression TIMES expression .) ]
  ! LT              [ reduce using rule 92 (expression -> expression TIMES expression .) ]
  ! GT              [ reduce using rule 92 (expression -> expression TIMES expression .) ]
  ! LE              [ reduce using rule 92 (expression -> expression TIMES expression .) ]
  ! GE              [ reduce using rule 92 (expression -> expression TIMES expression .) ]
  ! EQ              [ reduce using rule 92 (expression -> expression TIMES expression .) ]
  ! PLUS            [ shift and go to state 121 ]
  ! MINUS           [ shift and go to state 122 ]
  ! TIMES           [ shift and go to state 123 ]
  ! DIVIDE          [ shift and go to state 124 ]
  ! XOR             [ shift and go to state 127 ]


state 170

    (93) expression -> expression DIVIDE expression .
    (90) expression -> expression . PLUS expression
    (91) expression -> expression . MINUS expression
    (92) expression -> expression . TIMES expression
    (93) expression -> expression . DIVIDE expression
    (94) expression -> expression . AND expression
    (95) expression -> expression . OR expression
    (96) expression -> expression . XOR expression
    (97) expression -> expression . LT expression
    (98) expression -> expression . GT expression
    (99) expression -> expression . LE expression
    (100) expression -> expression . GE expression
    (101) expression -> expression . EQ expression

    DO              reduce using rule 93 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 93 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 93 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 93 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 93 (expression -> expression DIVIDE expression .)
    XOR             reduce using rule 93 (expression -> expression DIVIDE expression .)
    THEN            reduce using rule 93 (expression -> expression DIVIDE expression .)
    SEMICOLON       reduce using rule 93 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 93 (expression -> expression DIVIDE expression .)
    TO              reduce using rule 93 (expression -> expression DIVIDE expression .)
    COLON           reduce using rule 93 (expression -> expression DIVIDE expression .)
    ID              reduce using rule 93 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 93 (expression -> expression DIVIDE expression .)
    BY              reduce using rule 93 (expression -> expression DIVIDE expression .)
    AND             shift and go to state 125
    OR              shift and go to state 126
    LT              shift and go to state 128
    GT              shift and go to state 129
    LE              shift and go to state 130
    GE              shift and go to state 131
    EQ              shift and go to state 132

  ! AND             [ reduce using rule 93 (expression -> expression DIVIDE expression .) ]
  ! OR              [ reduce using rule 93 (expression -> expression DIVIDE expression .) ]
  ! LT              [ reduce using rule 93 (expression -> expression DIVIDE expression .) ]
  ! GT              [ reduce using rule 93 (expression -> expression DIVIDE expression .) ]
  ! LE              [ reduce using rule 93 (expression -> expression DIVIDE expression .) ]
  ! GE              [ reduce using rule 93 (expression -> expression DIVIDE expression .) ]
  ! EQ              [ reduce using rule 93 (expression -> expression DIVIDE expression .) ]
  ! PLUS            [ shift and go to state 121 ]
  ! MINUS           [ shift and go to state 122 ]
  ! TIMES           [ shift and go to state 123 ]
  ! DIVIDE          [ shift and go to state 124 ]
  ! XOR             [ shift and go to state 127 ]


state 171

    (94) expression -> expression AND expression .
    (90) expression -> expression . PLUS expression
    (91) expression -> expression . MINUS expression
    (92) expression -> expression . TIMES expression
    (93) expression -> expression . DIVIDE expression
    (94) expression -> expression . AND expression
    (95) expression -> expression . OR expression
    (96) expression -> expression . XOR expression
    (97) expression -> expression . LT expression
    (98) expression -> expression . GT expression
    (99) expression -> expression . LE expression
    (100) expression -> expression . GE expression
    (101) expression -> expression . EQ expression

    DO              reduce using rule 94 (expression -> expression AND expression .)
    PLUS            reduce using rule 94 (expression -> expression AND expression .)
    MINUS           reduce using rule 94 (expression -> expression AND expression .)
    TIMES           reduce using rule 94 (expression -> expression AND expression .)
    DIVIDE          reduce using rule 94 (expression -> expression AND expression .)
    AND             reduce using rule 94 (expression -> expression AND expression .)
    OR              reduce using rule 94 (expression -> expression AND expression .)
    XOR             reduce using rule 94 (expression -> expression AND expression .)
    THEN            reduce using rule 94 (expression -> expression AND expression .)
    SEMICOLON       reduce using rule 94 (expression -> expression AND expression .)
    RPAREN          reduce using rule 94 (expression -> expression AND expression .)
    TO              reduce using rule 94 (expression -> expression AND expression .)
    COLON           reduce using rule 94 (expression -> expression AND expression .)
    ID              reduce using rule 94 (expression -> expression AND expression .)
    COMMA           reduce using rule 94 (expression -> expression AND expression .)
    BY              reduce using rule 94 (expression -> expression AND expression .)
    LT              shift and go to state 128
    GT              shift and go to state 129
    LE              shift and go to state 130
    GE              shift and go to state 131
    EQ              shift and go to state 132

  ! LT              [ reduce using rule 94 (expression -> expression AND expression .) ]
  ! GT              [ reduce using rule 94 (expression -> expression AND expression .) ]
  ! LE              [ reduce using rule 94 (expression -> expression AND expression .) ]
  ! GE              [ reduce using rule 94 (expression -> expression AND expression .) ]
  ! EQ              [ reduce using rule 94 (expression -> expression AND expression .) ]
  ! PLUS            [ shift and go to state 121 ]
  ! MINUS           [ shift and go to state 122 ]
  ! TIMES           [ shift and go to state 123 ]
  ! DIVIDE          [ shift and go to state 124 ]
  ! AND             [ shift and go to state 125 ]
  ! OR              [ shift and go to state 126 ]
  ! XOR             [ shift and go to state 127 ]


state 172

    (95) expression -> expression OR expression .
    (90) expression -> expression . PLUS expression
    (91) expression -> expression . MINUS expression
    (92) expression -> expression . TIMES expression
    (93) expression -> expression . DIVIDE expression
    (94) expression -> expression . AND expression
    (95) expression -> expression . OR expression
    (96) expression -> expression . XOR expression
    (97) expression -> expression . LT expression
    (98) expression -> expression . GT expression
    (99) expression -> expression . LE expression
    (100) expression -> expression . GE expression
    (101) expression -> expression . EQ expression

    DO              reduce using rule 95 (expression -> expression OR expression .)
    PLUS            reduce using rule 95 (expression -> expression OR expression .)
    MINUS           reduce using rule 95 (expression -> expression OR expression .)
    TIMES           reduce using rule 95 (expression -> expression OR expression .)
    DIVIDE          reduce using rule 95 (expression -> expression OR expression .)
    AND             reduce using rule 95 (expression -> expression OR expression .)
    OR              reduce using rule 95 (expression -> expression OR expression .)
    XOR             reduce using rule 95 (expression -> expression OR expression .)
    THEN            reduce using rule 95 (expression -> expression OR expression .)
    SEMICOLON       reduce using rule 95 (expression -> expression OR expression .)
    RPAREN          reduce using rule 95 (expression -> expression OR expression .)
    TO              reduce using rule 95 (expression -> expression OR expression .)
    COLON           reduce using rule 95 (expression -> expression OR expression .)
    ID              reduce using rule 95 (expression -> expression OR expression .)
    COMMA           reduce using rule 95 (expression -> expression OR expression .)
    BY              reduce using rule 95 (expression -> expression OR expression .)
    LT              shift and go to state 128
    GT              shift and go to state 129
    LE              shift and go to state 130
    GE              shift and go to state 131
    EQ              shift and go to state 132

  ! LT              [ reduce using rule 95 (expression -> expression OR expression .) ]
  ! GT              [ reduce using rule 95 (expression -> expression OR expression .) ]
  ! LE              [ reduce using rule 95 (expression -> expression OR expression .) ]
  ! GE              [ reduce using rule 95 (expression -> expression OR expression .) ]
  ! EQ              [ reduce using rule 95 (expression -> expression OR expression .) ]
  ! PLUS            [ shift and go to state 121 ]
  ! MINUS           [ shift and go to state 122 ]
  ! TIMES           [ shift and go to state 123 ]
  ! DIVIDE          [ shift and go to state 124 ]
  ! AND             [ shift and go to state 125 ]
  ! OR              [ shift and go to state 126 ]
  ! XOR             [ shift and go to state 127 ]


state 173

    (96) expression -> expression XOR expression .
    (90) expression -> expression . PLUS expression
    (91) expression -> expression . MINUS expression
    (92) expression -> expression . TIMES expression
    (93) expression -> expression . DIVIDE expression
    (94) expression -> expression . AND expression
    (95) expression -> expression . OR expression
    (96) expression -> expression . XOR expression
    (97) expression -> expression . LT expression
    (98) expression -> expression . GT expression
    (99) expression -> expression . LE expression
    (100) expression -> expression . GE expression
    (101) expression -> expression . EQ expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
    DO              reduce using rule 96 (expression -> expression XOR expression .)
    THEN            reduce using rule 96 (expression -> expression XOR expression .)
    SEMICOLON       reduce using rule 96 (expression -> expression XOR expression .)
    RPAREN          reduce using rule 96 (expression -> expression XOR expression .)
    TO              reduce using rule 96 (expression -> expression XOR expression .)
    COLON           reduce using rule 96 (expression -> expression XOR expression .)
    ID              reduce using rule 96 (expression -> expression XOR expression .)
    COMMA           reduce using rule 96 (expression -> expression XOR expression .)
    BY              reduce using rule 96 (expression -> expression XOR expression .)
    PLUS            shift and go to state 121
    MINUS           shift and go to state 122
    TIMES           shift and go to state 123
    DIVIDE          shift and go to state 124
    AND             shift and go to state 125
    OR              shift and go to state 126
    XOR             shift and go to state 127
    LT              shift and go to state 128
    GT              shift and go to state 129
    LE              shift and go to state 130
    GE              shift and go to state 131
    EQ              shift and go to state 132

  ! PLUS            [ reduce using rule 96 (expression -> expression XOR expression .) ]
  ! MINUS           [ reduce using rule 96 (expression -> expression XOR expression .) ]
  ! TIMES           [ reduce using rule 96 (expression -> expression XOR expression .) ]
  ! DIVIDE          [ reduce using rule 96 (expression -> expression XOR expression .) ]
  ! AND             [ reduce using rule 96 (expression -> expression XOR expression .) ]
  ! OR              [ reduce using rule 96 (expression -> expression XOR expression .) ]
  ! XOR             [ reduce using rule 96 (expression -> expression XOR expression .) ]
  ! LT              [ reduce using rule 96 (expression -> expression XOR expression .) ]
  ! GT              [ reduce using rule 96 (expression -> expression XOR expression .) ]
  ! LE              [ reduce using rule 96 (expression -> expression XOR expression .) ]
  ! GE              [ reduce using rule 96 (expression -> expression XOR expression .) ]
  ! EQ              [ reduce using rule 96 (expression -> expression XOR expression .) ]


state 174

    (97) expression -> expression LT expression .
    (90) expression -> expression . PLUS expression
    (91) expression -> expression . MINUS expression
    (92) expression -> expression . TIMES expression
    (93) expression -> expression . DIVIDE expression
    (94) expression -> expression . AND expression
    (95) expression -> expression . OR expression
    (96) expression -> expression . XOR expression
    (97) expression -> expression . LT expression
    (98) expression -> expression . GT expression
    (99) expression -> expression . LE expression
    (100) expression -> expression . GE expression
    (101) expression -> expression . EQ expression

    DO              reduce using rule 97 (expression -> expression LT expression .)
    PLUS            reduce using rule 97 (expression -> expression LT expression .)
    MINUS           reduce using rule 97 (expression -> expression LT expression .)
    TIMES           reduce using rule 97 (expression -> expression LT expression .)
    DIVIDE          reduce using rule 97 (expression -> expression LT expression .)
    AND             reduce using rule 97 (expression -> expression LT expression .)
    OR              reduce using rule 97 (expression -> expression LT expression .)
    XOR             reduce using rule 97 (expression -> expression LT expression .)
    LT              reduce using rule 97 (expression -> expression LT expression .)
    GT              reduce using rule 97 (expression -> expression LT expression .)
    LE              reduce using rule 97 (expression -> expression LT expression .)
    GE              reduce using rule 97 (expression -> expression LT expression .)
    EQ              reduce using rule 97 (expression -> expression LT expression .)
    THEN            reduce using rule 97 (expression -> expression LT expression .)
    SEMICOLON       reduce using rule 97 (expression -> expression LT expression .)
    RPAREN          reduce using rule 97 (expression -> expression LT expression .)
    TO              reduce using rule 97 (expression -> expression LT expression .)
    COLON           reduce using rule 97 (expression -> expression LT expression .)
    ID              reduce using rule 97 (expression -> expression LT expression .)
    COMMA           reduce using rule 97 (expression -> expression LT expression .)
    BY              reduce using rule 97 (expression -> expression LT expression .)

  ! PLUS            [ shift and go to state 121 ]
  ! MINUS           [ shift and go to state 122 ]
  ! TIMES           [ shift and go to state 123 ]
  ! DIVIDE          [ shift and go to state 124 ]
  ! AND             [ shift and go to state 125 ]
  ! OR              [ shift and go to state 126 ]
  ! XOR             [ shift and go to state 127 ]
  ! LT              [ shift and go to state 128 ]
  ! GT              [ shift and go to state 129 ]
  ! LE              [ shift and go to state 130 ]
  ! GE              [ shift and go to state 131 ]
  ! EQ              [ shift and go to state 132 ]


state 175

    (98) expression -> expression GT expression .
    (90) expression -> expression . PLUS expression
    (91) expression -> expression . MINUS expression
    (92) expression -> expression . TIMES expression
    (93) expression -> expression . DIVIDE expression
    (94) expression -> expression . AND expression
    (95) expression -> expression . OR expression
    (96) expression -> expression . XOR expression
    (97) expression -> expression . LT expression
    (98) expression -> expression . GT expression
    (99) expression -> expression . LE expression
    (100) expression -> expression . GE expression
    (101) expression -> expression . EQ expression

    DO              reduce using rule 98 (expression -> expression GT expression .)
    PLUS            reduce using rule 98 (expression -> expression GT expression .)
    MINUS           reduce using rule 98 (expression -> expression GT expression .)
    TIMES           reduce using rule 98 (expression -> expression GT expression .)
    DIVIDE          reduce using rule 98 (expression -> expression GT expression .)
    AND             reduce using rule 98 (expression -> expression GT expression .)
    OR              reduce using rule 98 (expression -> expression GT expression .)
    XOR             reduce using rule 98 (expression -> expression GT expression .)
    LT              reduce using rule 98 (expression -> expression GT expression .)
    GT              reduce using rule 98 (expression -> expression GT expression .)
    LE              reduce using rule 98 (expression -> expression GT expression .)
    GE              reduce using rule 98 (expression -> expression GT expression .)
    EQ              reduce using rule 98 (expression -> expression GT expression .)
    THEN            reduce using rule 98 (expression -> expression GT expression .)
    SEMICOLON       reduce using rule 98 (expression -> expression GT expression .)
    RPAREN          reduce using rule 98 (expression -> expression GT expression .)
    TO              reduce using rule 98 (expression -> expression GT expression .)
    COLON           reduce using rule 98 (expression -> expression GT expression .)
    ID              reduce using rule 98 (expression -> expression GT expression .)
    COMMA           reduce using rule 98 (expression -> expression GT expression .)
    BY              reduce using rule 98 (expression -> expression GT expression .)

  ! PLUS            [ shift and go to state 121 ]
  ! MINUS           [ shift and go to state 122 ]
  ! TIMES           [ shift and go to state 123 ]
  ! DIVIDE          [ shift and go to state 124 ]
  ! AND             [ shift and go to state 125 ]
  ! OR              [ shift and go to state 126 ]
  ! XOR             [ shift and go to state 127 ]
  ! LT              [ shift and go to state 128 ]
  ! GT              [ shift and go to state 129 ]
  ! LE              [ shift and go to state 130 ]
  ! GE              [ shift and go to state 131 ]
  ! EQ              [ shift and go to state 132 ]


state 176

    (99) expression -> expression LE expression .
    (90) expression -> expression . PLUS expression
    (91) expression -> expression . MINUS expression
    (92) expression -> expression . TIMES expression
    (93) expression -> expression . DIVIDE expression
    (94) expression -> expression . AND expression
    (95) expression -> expression . OR expression
    (96) expression -> expression . XOR expression
    (97) expression -> expression . LT expression
    (98) expression -> expression . GT expression
    (99) expression -> expression . LE expression
    (100) expression -> expression . GE expression
    (101) expression -> expression . EQ expression

    DO              reduce using rule 99 (expression -> expression LE expression .)
    PLUS            reduce using rule 99 (expression -> expression LE expression .)
    MINUS           reduce using rule 99 (expression -> expression LE expression .)
    TIMES           reduce using rule 99 (expression -> expression LE expression .)
    DIVIDE          reduce using rule 99 (expression -> expression LE expression .)
    AND             reduce using rule 99 (expression -> expression LE expression .)
    OR              reduce using rule 99 (expression -> expression LE expression .)
    XOR             reduce using rule 99 (expression -> expression LE expression .)
    LT              reduce using rule 99 (expression -> expression LE expression .)
    GT              reduce using rule 99 (expression -> expression LE expression .)
    LE              reduce using rule 99 (expression -> expression LE expression .)
    GE              reduce using rule 99 (expression -> expression LE expression .)
    EQ              reduce using rule 99 (expression -> expression LE expression .)
    THEN            reduce using rule 99 (expression -> expression LE expression .)
    SEMICOLON       reduce using rule 99 (expression -> expression LE expression .)
    RPAREN          reduce using rule 99 (expression -> expression LE expression .)
    TO              reduce using rule 99 (expression -> expression LE expression .)
    COLON           reduce using rule 99 (expression -> expression LE expression .)
    ID              reduce using rule 99 (expression -> expression LE expression .)
    COMMA           reduce using rule 99 (expression -> expression LE expression .)
    BY              reduce using rule 99 (expression -> expression LE expression .)

  ! PLUS            [ shift and go to state 121 ]
  ! MINUS           [ shift and go to state 122 ]
  ! TIMES           [ shift and go to state 123 ]
  ! DIVIDE          [ shift and go to state 124 ]
  ! AND             [ shift and go to state 125 ]
  ! OR              [ shift and go to state 126 ]
  ! XOR             [ shift and go to state 127 ]
  ! LT              [ shift and go to state 128 ]
  ! GT              [ shift and go to state 129 ]
  ! LE              [ shift and go to state 130 ]
  ! GE              [ shift and go to state 131 ]
  ! EQ              [ shift and go to state 132 ]


state 177

    (100) expression -> expression GE expression .
    (90) expression -> expression . PLUS expression
    (91) expression -> expression . MINUS expression
    (92) expression -> expression . TIMES expression
    (93) expression -> expression . DIVIDE expression
    (94) expression -> expression . AND expression
    (95) expression -> expression . OR expression
    (96) expression -> expression . XOR expression
    (97) expression -> expression . LT expression
    (98) expression -> expression . GT expression
    (99) expression -> expression . LE expression
    (100) expression -> expression . GE expression
    (101) expression -> expression . EQ expression

    DO              reduce using rule 100 (expression -> expression GE expression .)
    PLUS            reduce using rule 100 (expression -> expression GE expression .)
    MINUS           reduce using rule 100 (expression -> expression GE expression .)
    TIMES           reduce using rule 100 (expression -> expression GE expression .)
    DIVIDE          reduce using rule 100 (expression -> expression GE expression .)
    AND             reduce using rule 100 (expression -> expression GE expression .)
    OR              reduce using rule 100 (expression -> expression GE expression .)
    XOR             reduce using rule 100 (expression -> expression GE expression .)
    LT              reduce using rule 100 (expression -> expression GE expression .)
    GT              reduce using rule 100 (expression -> expression GE expression .)
    LE              reduce using rule 100 (expression -> expression GE expression .)
    GE              reduce using rule 100 (expression -> expression GE expression .)
    EQ              reduce using rule 100 (expression -> expression GE expression .)
    THEN            reduce using rule 100 (expression -> expression GE expression .)
    SEMICOLON       reduce using rule 100 (expression -> expression GE expression .)
    RPAREN          reduce using rule 100 (expression -> expression GE expression .)
    TO              reduce using rule 100 (expression -> expression GE expression .)
    COLON           reduce using rule 100 (expression -> expression GE expression .)
    ID              reduce using rule 100 (expression -> expression GE expression .)
    COMMA           reduce using rule 100 (expression -> expression GE expression .)
    BY              reduce using rule 100 (expression -> expression GE expression .)

  ! PLUS            [ shift and go to state 121 ]
  ! MINUS           [ shift and go to state 122 ]
  ! TIMES           [ shift and go to state 123 ]
  ! DIVIDE          [ shift and go to state 124 ]
  ! AND             [ shift and go to state 125 ]
  ! OR              [ shift and go to state 126 ]
  ! XOR             [ shift and go to state 127 ]
  ! LT              [ shift and go to state 128 ]
  ! GT              [ shift and go to state 129 ]
  ! LE              [ shift and go to state 130 ]
  ! GE              [ shift and go to state 131 ]
  ! EQ              [ shift and go to state 132 ]


state 178

    (101) expression -> expression EQ expression .
    (90) expression -> expression . PLUS expression
    (91) expression -> expression . MINUS expression
    (92) expression -> expression . TIMES expression
    (93) expression -> expression . DIVIDE expression
    (94) expression -> expression . AND expression
    (95) expression -> expression . OR expression
    (96) expression -> expression . XOR expression
    (97) expression -> expression . LT expression
    (98) expression -> expression . GT expression
    (99) expression -> expression . LE expression
    (100) expression -> expression . GE expression
    (101) expression -> expression . EQ expression

    DO              reduce using rule 101 (expression -> expression EQ expression .)
    PLUS            reduce using rule 101 (expression -> expression EQ expression .)
    MINUS           reduce using rule 101 (expression -> expression EQ expression .)
    TIMES           reduce using rule 101 (expression -> expression EQ expression .)
    DIVIDE          reduce using rule 101 (expression -> expression EQ expression .)
    AND             reduce using rule 101 (expression -> expression EQ expression .)
    OR              reduce using rule 101 (expression -> expression EQ expression .)
    XOR             reduce using rule 101 (expression -> expression EQ expression .)
    LT              reduce using rule 101 (expression -> expression EQ expression .)
    GT              reduce using rule 101 (expression -> expression EQ expression .)
    LE              reduce using rule 101 (expression -> expression EQ expression .)
    GE              reduce using rule 101 (expression -> expression EQ expression .)
    EQ              reduce using rule 101 (expression -> expression EQ expression .)
    THEN            reduce using rule 101 (expression -> expression EQ expression .)
    SEMICOLON       reduce using rule 101 (expression -> expression EQ expression .)
    RPAREN          reduce using rule 101 (expression -> expression EQ expression .)
    TO              reduce using rule 101 (expression -> expression EQ expression .)
    COLON           reduce using rule 101 (expression -> expression EQ expression .)
    ID              reduce using rule 101 (expression -> expression EQ expression .)
    COMMA           reduce using rule 101 (expression -> expression EQ expression .)
    BY              reduce using rule 101 (expression -> expression EQ expression .)

  ! PLUS            [ shift and go to state 121 ]
  ! MINUS           [ shift and go to state 122 ]
  ! TIMES           [ shift and go to state 123 ]
  ! DIVIDE          [ shift and go to state 124 ]
  ! AND             [ shift and go to state 125 ]
  ! OR              [ shift and go to state 126 ]
  ! XOR             [ shift and go to state 127 ]
  ! LT              [ shift and go to state 128 ]
  ! GT              [ shift and go to state 129 ]
  ! LE              [ shift and go to state 130 ]
  ! GE              [ shift and go to state 131 ]
  ! EQ              [ shift and go to state 132 ]


state 179

    (110) call -> ID DOT ID .

    DO              reduce using rule 110 (call -> ID DOT ID .)
    PLUS            reduce using rule 110 (call -> ID DOT ID .)
    MINUS           reduce using rule 110 (call -> ID DOT ID .)
    TIMES           reduce using rule 110 (call -> ID DOT ID .)
    DIVIDE          reduce using rule 110 (call -> ID DOT ID .)
    AND             reduce using rule 110 (call -> ID DOT ID .)
    OR              reduce using rule 110 (call -> ID DOT ID .)
    XOR             reduce using rule 110 (call -> ID DOT ID .)
    LT              reduce using rule 110 (call -> ID DOT ID .)
    GT              reduce using rule 110 (call -> ID DOT ID .)
    LE              reduce using rule 110 (call -> ID DOT ID .)
    GE              reduce using rule 110 (call -> ID DOT ID .)
    EQ              reduce using rule 110 (call -> ID DOT ID .)
    THEN            reduce using rule 110 (call -> ID DOT ID .)
    SEMICOLON       reduce using rule 110 (call -> ID DOT ID .)
    RPAREN          reduce using rule 110 (call -> ID DOT ID .)
    TO              reduce using rule 110 (call -> ID DOT ID .)
    COLON           reduce using rule 110 (call -> ID DOT ID .)
    ID              reduce using rule 110 (call -> ID DOT ID .)
    COMMA           reduce using rule 110 (call -> ID DOT ID .)
    BY              reduce using rule 110 (call -> ID DOT ID .)


state 180

    (102) expression -> LPAREN expression RPAREN .

    DO              reduce using rule 102 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 102 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 102 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 102 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 102 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 102 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 102 (expression -> LPAREN expression RPAREN .)
    XOR             reduce using rule 102 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 102 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 102 (expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 102 (expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 102 (expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 102 (expression -> LPAREN expression RPAREN .)
    THEN            reduce using rule 102 (expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 102 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 102 (expression -> LPAREN expression RPAREN .)
    TO              reduce using rule 102 (expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 102 (expression -> LPAREN expression RPAREN .)
    ID              reduce using rule 102 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 102 (expression -> LPAREN expression RPAREN .)
    BY              reduce using rule 102 (expression -> LPAREN expression RPAREN .)


state 181

    (113) log -> LOG LPAREN expression . RPAREN
    (90) expression -> expression . PLUS expression
    (91) expression -> expression . MINUS expression
    (92) expression -> expression . TIMES expression
    (93) expression -> expression . DIVIDE expression
    (94) expression -> expression . AND expression
    (95) expression -> expression . OR expression
    (96) expression -> expression . XOR expression
    (97) expression -> expression . LT expression
    (98) expression -> expression . GT expression
    (99) expression -> expression . LE expression
    (100) expression -> expression . GE expression
    (101) expression -> expression . EQ expression

    RPAREN          shift and go to state 212
    PLUS            shift and go to state 121
    MINUS           shift and go to state 122
    TIMES           shift and go to state 123
    DIVIDE          shift and go to state 124
    AND             shift and go to state 125
    OR              shift and go to state 126
    XOR             shift and go to state 127
    LT              shift and go to state 128
    GT              shift and go to state 129
    LE              shift and go to state 130
    GE              shift and go to state 131
    EQ              shift and go to state 132


state 182

    (114) log -> LN LPAREN expression . RPAREN
    (90) expression -> expression . PLUS expression
    (91) expression -> expression . MINUS expression
    (92) expression -> expression . TIMES expression
    (93) expression -> expression . DIVIDE expression
    (94) expression -> expression . AND expression
    (95) expression -> expression . OR expression
    (96) expression -> expression . XOR expression
    (97) expression -> expression . LT expression
    (98) expression -> expression . GT expression
    (99) expression -> expression . LE expression
    (100) expression -> expression . GE expression
    (101) expression -> expression . EQ expression

    RPAREN          shift and go to state 213
    PLUS            shift and go to state 121
    MINUS           shift and go to state 122
    TIMES           shift and go to state 123
    DIVIDE          shift and go to state 124
    AND             shift and go to state 125
    OR              shift and go to state 126
    XOR             shift and go to state 127
    LT              shift and go to state 128
    GT              shift and go to state 129
    LE              shift and go to state 130
    GE              shift and go to state 131
    EQ              shift and go to state 132


state 183

    (112) exp -> EXP LPAREN expression . RPAREN
    (90) expression -> expression . PLUS expression
    (91) expression -> expression . MINUS expression
    (92) expression -> expression . TIMES expression
    (93) expression -> expression . DIVIDE expression
    (94) expression -> expression . AND expression
    (95) expression -> expression . OR expression
    (96) expression -> expression . XOR expression
    (97) expression -> expression . LT expression
    (98) expression -> expression . GT expression
    (99) expression -> expression . LE expression
    (100) expression -> expression . GE expression
    (101) expression -> expression . EQ expression

    RPAREN          shift and go to state 214
    PLUS            shift and go to state 121
    MINUS           shift and go to state 122
    TIMES           shift and go to state 123
    DIVIDE          shift and go to state 124
    AND             shift and go to state 125
    OR              shift and go to state 126
    XOR             shift and go to state 127
    LT              shift and go to state 128
    GT              shift and go to state 129
    LE              shift and go to state 130
    GE              shift and go to state 131
    EQ              shift and go to state 132


state 184

    (111) eq_string -> EQ_STRING LPAREN ID . COMMA ID RPAREN

    COMMA           shift and go to state 215


state 185

    (70) if_statement -> IF expression THEN statement_list . END_IF SEMICOLON
    (71) if_statement -> IF expression THEN statement_list . elsif_statement_list END_IF SEMICOLON
    (72) if_statement -> IF expression THEN statement_list . else_statement END_IF SEMICOLON
    (73) if_statement -> IF expression THEN statement_list . elsif_statement_list else_statement END_IF SEMICOLON
    (35) statement_list -> statement_list . assign_statement
    (36) statement_list -> statement_list . while_statement
    (37) statement_list -> statement_list . if_statement
    (38) statement_list -> statement_list . for_statement
    (39) statement_list -> statement_list . call_statement
    (40) statement_list -> statement_list . case_statement
    (74) elsif_statement_list -> . elsif_statement
    (75) elsif_statement_list -> . elsif_statement_list elsif_statement
    (77) else_statement -> . ELSE statement_list
    (81) assign_statement -> . ID ASSIGN expression SEMICOLON
    (80) while_statement -> . WHILE expression DO statement_list END_WHILE
    (70) if_statement -> . IF expression THEN statement_list END_IF SEMICOLON
    (71) if_statement -> . IF expression THEN statement_list elsif_statement_list END_IF SEMICOLON
    (72) if_statement -> . IF expression THEN statement_list else_statement END_IF SEMICOLON
    (73) if_statement -> . IF expression THEN statement_list elsif_statement_list else_statement END_IF SEMICOLON
    (78) for_statement -> . FOR ID ASSIGN expression TO expression DO statement_list END_FOR SEMICOLON
    (79) for_statement -> . FOR ID ASSIGN expression TO expression BY expression DO statement_list END_FOR SEMICOLON
    (106) call_statement -> . ID argument RPAREN SEMICOLON
    (67) case_statement -> . CASE ID OF case_list END_CASE SEMICOLON
    (76) elsif_statement -> . ELSIF expression THEN statement_list

    END_IF          shift and go to state 216
    ELSE            shift and go to state 220
    ID              shift and go to state 51
    WHILE           shift and go to state 59
    IF              shift and go to state 60
    FOR             shift and go to state 61
    CASE            shift and go to state 62
    ELSIF           shift and go to state 221

    elsif_statement_list           shift and go to state 217
    else_statement                 shift and go to state 218
    assign_statement               shift and go to state 53
    while_statement                shift and go to state 54
    if_statement                   shift and go to state 55
    for_statement                  shift and go to state 56
    call_statement                 shift and go to state 57
    case_statement                 shift and go to state 58
    elsif_statement                shift and go to state 219

state 186

    (78) for_statement -> FOR ID ASSIGN expression . TO expression DO statement_list END_FOR SEMICOLON
    (79) for_statement -> FOR ID ASSIGN expression . TO expression BY expression DO statement_list END_FOR SEMICOLON
    (90) expression -> expression . PLUS expression
    (91) expression -> expression . MINUS expression
    (92) expression -> expression . TIMES expression
    (93) expression -> expression . DIVIDE expression
    (94) expression -> expression . AND expression
    (95) expression -> expression . OR expression
    (96) expression -> expression . XOR expression
    (97) expression -> expression . LT expression
    (98) expression -> expression . GT expression
    (99) expression -> expression . LE expression
    (100) expression -> expression . GE expression
    (101) expression -> expression . EQ expression

    TO              shift and go to state 222
    PLUS            shift and go to state 121
    MINUS           shift and go to state 122
    TIMES           shift and go to state 123
    DIVIDE          shift and go to state 124
    AND             shift and go to state 125
    OR              shift and go to state 126
    XOR             shift and go to state 127
    LT              shift and go to state 128
    GT              shift and go to state 129
    LE              shift and go to state 130
    GE              shift and go to state 131
    EQ              shift and go to state 132


state 187

    (67) case_statement -> CASE ID OF case_list . END_CASE SEMICOLON
    (69) case_list -> case_list . expression COLON statement_list
    (82) expression -> . ID
    (83) expression -> . int_number
    (84) expression -> . float_number
    (85) expression -> . string_number
    (86) expression -> . log
    (87) expression -> . exp
    (88) expression -> . call
    (89) expression -> . eq_string
    (90) expression -> . expression PLUS expression
    (91) expression -> . expression MINUS expression
    (92) expression -> . expression TIMES expression
    (93) expression -> . expression DIVIDE expression
    (94) expression -> . expression AND expression
    (95) expression -> . expression OR expression
    (96) expression -> . expression XOR expression
    (97) expression -> . expression LT expression
    (98) expression -> . expression GT expression
    (99) expression -> . expression LE expression
    (100) expression -> . expression GE expression
    (101) expression -> . expression EQ expression
    (102) expression -> . LPAREN expression RPAREN
    (103) expression -> . NOT expression
    (104) expression -> . MINUS expression
    (105) expression -> . PLUS expression
    (115) int_number -> . INT_NUMBER
    (116) int_number -> . TRUE
    (117) int_number -> . FALSE
    (118) int_number -> . ID
    (119) float_number -> . FLOAT_NUMBER
    (120) float_number -> . ID
    (121) string_number -> . STRING_NUMBER
    (113) log -> . LOG LPAREN expression RPAREN
    (114) log -> . LN LPAREN expression RPAREN
    (112) exp -> . EXP LPAREN expression RPAREN
    (110) call -> . ID DOT ID
    (111) eq_string -> . EQ_STRING LPAREN ID COMMA ID RPAREN

    END_CASE        shift and go to state 223
    ID              shift and go to state 85
    LPAREN          shift and go to state 95
    NOT             shift and go to state 96
    MINUS           shift and go to state 94
    PLUS            shift and go to state 93
    INT_NUMBER      shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99
    FLOAT_NUMBER    shift and go to state 100
    STRING_NUMBER   shift and go to state 101
    LOG             shift and go to state 102
    LN              shift and go to state 103
    EXP             shift and go to state 104
    EQ_STRING       shift and go to state 105

    expression                     shift and go to state 224
    int_number                     shift and go to state 86
    float_number                   shift and go to state 87
    string_number                  shift and go to state 88
    log                            shift and go to state 89
    exp                            shift and go to state 90
    call                           shift and go to state 91
    eq_string                      shift and go to state 92

state 188

    (68) case_list -> expression . COLON statement_list
    (90) expression -> expression . PLUS expression
    (91) expression -> expression . MINUS expression
    (92) expression -> expression . TIMES expression
    (93) expression -> expression . DIVIDE expression
    (94) expression -> expression . AND expression
    (95) expression -> expression . OR expression
    (96) expression -> expression . XOR expression
    (97) expression -> expression . LT expression
    (98) expression -> expression . GT expression
    (99) expression -> expression . LE expression
    (100) expression -> expression . GE expression
    (101) expression -> expression . EQ expression

    COLON           shift and go to state 225
    PLUS            shift and go to state 121
    MINUS           shift and go to state 122
    TIMES           shift and go to state 123
    DIVIDE          shift and go to state 124
    AND             shift and go to state 125
    OR              shift and go to state 126
    XOR             shift and go to state 127
    LT              shift and go to state 128
    GT              shift and go to state 129
    LE              shift and go to state 130
    GE              shift and go to state 131
    EQ              shift and go to state 132


state 189

    (49) declare_int_statement -> ID COLON INT ASSIGN . int_number SEMICOLON
    (115) int_number -> . INT_NUMBER
    (116) int_number -> . TRUE
    (117) int_number -> . FALSE
    (118) int_number -> . ID

    INT_NUMBER      shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99
    ID              shift and go to state 226

    int_number                     shift and go to state 227

state 190

    (57) declare_int_statement -> ID COLON INT SEMICOLON .

    END_VAR         reduce using rule 57 (declare_int_statement -> ID COLON INT SEMICOLON .)
    ID              reduce using rule 57 (declare_int_statement -> ID COLON INT SEMICOLON .)
    END_CONST       reduce using rule 57 (declare_int_statement -> ID COLON INT SEMICOLON .)


state 191

    (50) declare_int_statement -> ID COLON BOOL ASSIGN . int_number SEMICOLON
    (115) int_number -> . INT_NUMBER
    (116) int_number -> . TRUE
    (117) int_number -> . FALSE
    (118) int_number -> . ID

    INT_NUMBER      shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99
    ID              shift and go to state 226

    int_number                     shift and go to state 228

state 192

    (58) declare_int_statement -> ID COLON BOOL SEMICOLON .

    END_VAR         reduce using rule 58 (declare_int_statement -> ID COLON BOOL SEMICOLON .)
    ID              reduce using rule 58 (declare_int_statement -> ID COLON BOOL SEMICOLON .)
    END_CONST       reduce using rule 58 (declare_int_statement -> ID COLON BOOL SEMICOLON .)


state 193

    (51) declare_int_statement -> ID COLON BYTE ASSIGN . int_number SEMICOLON
    (55) declare_int_statement -> ID COLON BYTE ASSIGN . ID SEMICOLON
    (115) int_number -> . INT_NUMBER
    (116) int_number -> . TRUE
    (117) int_number -> . FALSE
    (118) int_number -> . ID

    ID              shift and go to state 229
    INT_NUMBER      shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99

    int_number                     shift and go to state 230

state 194

    (59) declare_int_statement -> ID COLON BYTE SEMICOLON .

    END_VAR         reduce using rule 59 (declare_int_statement -> ID COLON BYTE SEMICOLON .)
    ID              reduce using rule 59 (declare_int_statement -> ID COLON BYTE SEMICOLON .)
    END_CONST       reduce using rule 59 (declare_int_statement -> ID COLON BYTE SEMICOLON .)


state 195

    (52) declare_int_statement -> ID COLON TIME ASSIGN . int_number SEMICOLON
    (56) declare_int_statement -> ID COLON TIME ASSIGN . ID SEMICOLON
    (115) int_number -> . INT_NUMBER
    (116) int_number -> . TRUE
    (117) int_number -> . FALSE
    (118) int_number -> . ID

    ID              shift and go to state 231
    INT_NUMBER      shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99

    int_number                     shift and go to state 232

state 196

    (60) declare_int_statement -> ID COLON TIME SEMICOLON .

    END_VAR         reduce using rule 60 (declare_int_statement -> ID COLON TIME SEMICOLON .)
    ID              reduce using rule 60 (declare_int_statement -> ID COLON TIME SEMICOLON .)
    END_CONST       reduce using rule 60 (declare_int_statement -> ID COLON TIME SEMICOLON .)


state 197

    (53) declare_int_statement -> ID COLON DWORD ASSIGN . int_number SEMICOLON
    (115) int_number -> . INT_NUMBER
    (116) int_number -> . TRUE
    (117) int_number -> . FALSE
    (118) int_number -> . ID

    INT_NUMBER      shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99
    ID              shift and go to state 226

    int_number                     shift and go to state 233

state 198

    (61) declare_int_statement -> ID COLON DWORD SEMICOLON .

    END_VAR         reduce using rule 61 (declare_int_statement -> ID COLON DWORD SEMICOLON .)
    ID              reduce using rule 61 (declare_int_statement -> ID COLON DWORD SEMICOLON .)
    END_CONST       reduce using rule 61 (declare_int_statement -> ID COLON DWORD SEMICOLON .)


state 199

    (54) declare_int_statement -> ID COLON STRING ASSIGN . string_number SEMICOLON
    (121) string_number -> . STRING_NUMBER

    STRING_NUMBER   shift and go to state 101

    string_number                  shift and go to state 234

state 200

    (62) declare_int_statement -> ID COLON STRING SEMICOLON .

    END_VAR         reduce using rule 62 (declare_int_statement -> ID COLON STRING SEMICOLON .)
    ID              reduce using rule 62 (declare_int_statement -> ID COLON STRING SEMICOLON .)
    END_CONST       reduce using rule 62 (declare_int_statement -> ID COLON STRING SEMICOLON .)


state 201

    (63) declare_float_statement -> ID COLON FLOAT ASSIGN . float_number SEMICOLON
    (119) float_number -> . FLOAT_NUMBER
    (120) float_number -> . ID

    FLOAT_NUMBER    shift and go to state 100
    ID              shift and go to state 235

    float_number                   shift and go to state 236

state 202

    (64) declare_float_statement -> ID COLON FLOAT SEMICOLON .

    END_VAR         reduce using rule 64 (declare_float_statement -> ID COLON FLOAT SEMICOLON .)
    ID              reduce using rule 64 (declare_float_statement -> ID COLON FLOAT SEMICOLON .)
    END_CONST       reduce using rule 64 (declare_float_statement -> ID COLON FLOAT SEMICOLON .)


state 203

    (65) declare_float_statement -> ID COLON REAL ASSIGN . float_number SEMICOLON
    (119) float_number -> . FLOAT_NUMBER
    (120) float_number -> . ID

    FLOAT_NUMBER    shift and go to state 100
    ID              shift and go to state 235

    float_number                   shift and go to state 237

state 204

    (66) declare_float_statement -> ID COLON REAL SEMICOLON .

    END_VAR         reduce using rule 66 (declare_float_statement -> ID COLON REAL SEMICOLON .)
    ID              reduce using rule 66 (declare_float_statement -> ID COLON REAL SEMICOLON .)
    END_CONST       reduce using rule 66 (declare_float_statement -> ID COLON REAL SEMICOLON .)


state 205

    (45) declare_timer_statement -> ID COLON TP SEMICOLON .

    END_VAR         reduce using rule 45 (declare_timer_statement -> ID COLON TP SEMICOLON .)
    ID              reduce using rule 45 (declare_timer_statement -> ID COLON TP SEMICOLON .)
    END_CONST       reduce using rule 45 (declare_timer_statement -> ID COLON TP SEMICOLON .)


state 206

    (46) declare_timer_statement -> ID COLON TON SEMICOLON .

    END_VAR         reduce using rule 46 (declare_timer_statement -> ID COLON TON SEMICOLON .)
    ID              reduce using rule 46 (declare_timer_statement -> ID COLON TON SEMICOLON .)
    END_CONST       reduce using rule 46 (declare_timer_statement -> ID COLON TON SEMICOLON .)


state 207

    (47) declare_timer_statement -> ID COLON TOF SEMICOLON .

    END_VAR         reduce using rule 47 (declare_timer_statement -> ID COLON TOF SEMICOLON .)
    ID              reduce using rule 47 (declare_timer_statement -> ID COLON TOF SEMICOLON .)
    END_CONST       reduce using rule 47 (declare_timer_statement -> ID COLON TOF SEMICOLON .)


state 208

    (48) declare_timer_statement -> ID COLON RTC SEMICOLON .

    END_VAR         reduce using rule 48 (declare_timer_statement -> ID COLON RTC SEMICOLON .)
    ID              reduce using rule 48 (declare_timer_statement -> ID COLON RTC SEMICOLON .)
    END_CONST       reduce using rule 48 (declare_timer_statement -> ID COLON RTC SEMICOLON .)


state 209

    (108) argument -> argument ID ASSIGN expression .
    (90) expression -> expression . PLUS expression
    (91) expression -> expression . MINUS expression
    (92) expression -> expression . TIMES expression
    (93) expression -> expression . DIVIDE expression
    (94) expression -> expression . AND expression
    (95) expression -> expression . OR expression
    (96) expression -> expression . XOR expression
    (97) expression -> expression . LT expression
    (98) expression -> expression . GT expression
    (99) expression -> expression . LE expression
    (100) expression -> expression . GE expression
    (101) expression -> expression . EQ expression

    RPAREN          reduce using rule 108 (argument -> argument ID ASSIGN expression .)
    ID              reduce using rule 108 (argument -> argument ID ASSIGN expression .)
    COMMA           reduce using rule 108 (argument -> argument ID ASSIGN expression .)
    PLUS            shift and go to state 121
    MINUS           shift and go to state 122
    TIMES           shift and go to state 123
    DIVIDE          shift and go to state 124
    AND             shift and go to state 125
    OR              shift and go to state 126
    XOR             shift and go to state 127
    LT              shift and go to state 128
    GT              shift and go to state 129
    LE              shift and go to state 130
    GE              shift and go to state 131
    EQ              shift and go to state 132


state 210

    (109) argument -> argument COMMA ID ASSIGN . expression
    (82) expression -> . ID
    (83) expression -> . int_number
    (84) expression -> . float_number
    (85) expression -> . string_number
    (86) expression -> . log
    (87) expression -> . exp
    (88) expression -> . call
    (89) expression -> . eq_string
    (90) expression -> . expression PLUS expression
    (91) expression -> . expression MINUS expression
    (92) expression -> . expression TIMES expression
    (93) expression -> . expression DIVIDE expression
    (94) expression -> . expression AND expression
    (95) expression -> . expression OR expression
    (96) expression -> . expression XOR expression
    (97) expression -> . expression LT expression
    (98) expression -> . expression GT expression
    (99) expression -> . expression LE expression
    (100) expression -> . expression GE expression
    (101) expression -> . expression EQ expression
    (102) expression -> . LPAREN expression RPAREN
    (103) expression -> . NOT expression
    (104) expression -> . MINUS expression
    (105) expression -> . PLUS expression
    (115) int_number -> . INT_NUMBER
    (116) int_number -> . TRUE
    (117) int_number -> . FALSE
    (118) int_number -> . ID
    (119) float_number -> . FLOAT_NUMBER
    (120) float_number -> . ID
    (121) string_number -> . STRING_NUMBER
    (113) log -> . LOG LPAREN expression RPAREN
    (114) log -> . LN LPAREN expression RPAREN
    (112) exp -> . EXP LPAREN expression RPAREN
    (110) call -> . ID DOT ID
    (111) eq_string -> . EQ_STRING LPAREN ID COMMA ID RPAREN

    ID              shift and go to state 85
    LPAREN          shift and go to state 95
    NOT             shift and go to state 96
    MINUS           shift and go to state 94
    PLUS            shift and go to state 93
    INT_NUMBER      shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99
    FLOAT_NUMBER    shift and go to state 100
    STRING_NUMBER   shift and go to state 101
    LOG             shift and go to state 102
    LN              shift and go to state 103
    EXP             shift and go to state 104
    EQ_STRING       shift and go to state 105

    expression                     shift and go to state 238
    int_number                     shift and go to state 86
    float_number                   shift and go to state 87
    string_number                  shift and go to state 88
    log                            shift and go to state 89
    exp                            shift and go to state 90
    call                           shift and go to state 91
    eq_string                      shift and go to state 92

state 211

    (80) while_statement -> WHILE expression DO statement_list END_WHILE .

    END_PROGRAM     reduce using rule 80 (while_statement -> WHILE expression DO statement_list END_WHILE .)
    ID              reduce using rule 80 (while_statement -> WHILE expression DO statement_list END_WHILE .)
    WHILE           reduce using rule 80 (while_statement -> WHILE expression DO statement_list END_WHILE .)
    IF              reduce using rule 80 (while_statement -> WHILE expression DO statement_list END_WHILE .)
    FOR             reduce using rule 80 (while_statement -> WHILE expression DO statement_list END_WHILE .)
    CASE            reduce using rule 80 (while_statement -> WHILE expression DO statement_list END_WHILE .)
    END_FUNCTION_BLOCK reduce using rule 80 (while_statement -> WHILE expression DO statement_list END_WHILE .)
    END_FUNCTION    reduce using rule 80 (while_statement -> WHILE expression DO statement_list END_WHILE .)
    END_WHILE       reduce using rule 80 (while_statement -> WHILE expression DO statement_list END_WHILE .)
    END_IF          reduce using rule 80 (while_statement -> WHILE expression DO statement_list END_WHILE .)
    ELSE            reduce using rule 80 (while_statement -> WHILE expression DO statement_list END_WHILE .)
    ELSIF           reduce using rule 80 (while_statement -> WHILE expression DO statement_list END_WHILE .)
    END_CASE        reduce using rule 80 (while_statement -> WHILE expression DO statement_list END_WHILE .)
    LPAREN          reduce using rule 80 (while_statement -> WHILE expression DO statement_list END_WHILE .)
    NOT             reduce using rule 80 (while_statement -> WHILE expression DO statement_list END_WHILE .)
    MINUS           reduce using rule 80 (while_statement -> WHILE expression DO statement_list END_WHILE .)
    PLUS            reduce using rule 80 (while_statement -> WHILE expression DO statement_list END_WHILE .)
    INT_NUMBER      reduce using rule 80 (while_statement -> WHILE expression DO statement_list END_WHILE .)
    TRUE            reduce using rule 80 (while_statement -> WHILE expression DO statement_list END_WHILE .)
    FALSE           reduce using rule 80 (while_statement -> WHILE expression DO statement_list END_WHILE .)
    FLOAT_NUMBER    reduce using rule 80 (while_statement -> WHILE expression DO statement_list END_WHILE .)
    STRING_NUMBER   reduce using rule 80 (while_statement -> WHILE expression DO statement_list END_WHILE .)
    LOG             reduce using rule 80 (while_statement -> WHILE expression DO statement_list END_WHILE .)
    LN              reduce using rule 80 (while_statement -> WHILE expression DO statement_list END_WHILE .)
    EXP             reduce using rule 80 (while_statement -> WHILE expression DO statement_list END_WHILE .)
    EQ_STRING       reduce using rule 80 (while_statement -> WHILE expression DO statement_list END_WHILE .)
    END_FOR         reduce using rule 80 (while_statement -> WHILE expression DO statement_list END_WHILE .)


state 212

    (113) log -> LOG LPAREN expression RPAREN .

    DO              reduce using rule 113 (log -> LOG LPAREN expression RPAREN .)
    PLUS            reduce using rule 113 (log -> LOG LPAREN expression RPAREN .)
    MINUS           reduce using rule 113 (log -> LOG LPAREN expression RPAREN .)
    TIMES           reduce using rule 113 (log -> LOG LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 113 (log -> LOG LPAREN expression RPAREN .)
    AND             reduce using rule 113 (log -> LOG LPAREN expression RPAREN .)
    OR              reduce using rule 113 (log -> LOG LPAREN expression RPAREN .)
    XOR             reduce using rule 113 (log -> LOG LPAREN expression RPAREN .)
    LT              reduce using rule 113 (log -> LOG LPAREN expression RPAREN .)
    GT              reduce using rule 113 (log -> LOG LPAREN expression RPAREN .)
    LE              reduce using rule 113 (log -> LOG LPAREN expression RPAREN .)
    GE              reduce using rule 113 (log -> LOG LPAREN expression RPAREN .)
    EQ              reduce using rule 113 (log -> LOG LPAREN expression RPAREN .)
    THEN            reduce using rule 113 (log -> LOG LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 113 (log -> LOG LPAREN expression RPAREN .)
    RPAREN          reduce using rule 113 (log -> LOG LPAREN expression RPAREN .)
    TO              reduce using rule 113 (log -> LOG LPAREN expression RPAREN .)
    COLON           reduce using rule 113 (log -> LOG LPAREN expression RPAREN .)
    ID              reduce using rule 113 (log -> LOG LPAREN expression RPAREN .)
    COMMA           reduce using rule 113 (log -> LOG LPAREN expression RPAREN .)
    BY              reduce using rule 113 (log -> LOG LPAREN expression RPAREN .)


state 213

    (114) log -> LN LPAREN expression RPAREN .

    DO              reduce using rule 114 (log -> LN LPAREN expression RPAREN .)
    PLUS            reduce using rule 114 (log -> LN LPAREN expression RPAREN .)
    MINUS           reduce using rule 114 (log -> LN LPAREN expression RPAREN .)
    TIMES           reduce using rule 114 (log -> LN LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 114 (log -> LN LPAREN expression RPAREN .)
    AND             reduce using rule 114 (log -> LN LPAREN expression RPAREN .)
    OR              reduce using rule 114 (log -> LN LPAREN expression RPAREN .)
    XOR             reduce using rule 114 (log -> LN LPAREN expression RPAREN .)
    LT              reduce using rule 114 (log -> LN LPAREN expression RPAREN .)
    GT              reduce using rule 114 (log -> LN LPAREN expression RPAREN .)
    LE              reduce using rule 114 (log -> LN LPAREN expression RPAREN .)
    GE              reduce using rule 114 (log -> LN LPAREN expression RPAREN .)
    EQ              reduce using rule 114 (log -> LN LPAREN expression RPAREN .)
    THEN            reduce using rule 114 (log -> LN LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 114 (log -> LN LPAREN expression RPAREN .)
    RPAREN          reduce using rule 114 (log -> LN LPAREN expression RPAREN .)
    TO              reduce using rule 114 (log -> LN LPAREN expression RPAREN .)
    COLON           reduce using rule 114 (log -> LN LPAREN expression RPAREN .)
    ID              reduce using rule 114 (log -> LN LPAREN expression RPAREN .)
    COMMA           reduce using rule 114 (log -> LN LPAREN expression RPAREN .)
    BY              reduce using rule 114 (log -> LN LPAREN expression RPAREN .)


state 214

    (112) exp -> EXP LPAREN expression RPAREN .

    DO              reduce using rule 112 (exp -> EXP LPAREN expression RPAREN .)
    PLUS            reduce using rule 112 (exp -> EXP LPAREN expression RPAREN .)
    MINUS           reduce using rule 112 (exp -> EXP LPAREN expression RPAREN .)
    TIMES           reduce using rule 112 (exp -> EXP LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 112 (exp -> EXP LPAREN expression RPAREN .)
    AND             reduce using rule 112 (exp -> EXP LPAREN expression RPAREN .)
    OR              reduce using rule 112 (exp -> EXP LPAREN expression RPAREN .)
    XOR             reduce using rule 112 (exp -> EXP LPAREN expression RPAREN .)
    LT              reduce using rule 112 (exp -> EXP LPAREN expression RPAREN .)
    GT              reduce using rule 112 (exp -> EXP LPAREN expression RPAREN .)
    LE              reduce using rule 112 (exp -> EXP LPAREN expression RPAREN .)
    GE              reduce using rule 112 (exp -> EXP LPAREN expression RPAREN .)
    EQ              reduce using rule 112 (exp -> EXP LPAREN expression RPAREN .)
    THEN            reduce using rule 112 (exp -> EXP LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 112 (exp -> EXP LPAREN expression RPAREN .)
    RPAREN          reduce using rule 112 (exp -> EXP LPAREN expression RPAREN .)
    TO              reduce using rule 112 (exp -> EXP LPAREN expression RPAREN .)
    COLON           reduce using rule 112 (exp -> EXP LPAREN expression RPAREN .)
    ID              reduce using rule 112 (exp -> EXP LPAREN expression RPAREN .)
    COMMA           reduce using rule 112 (exp -> EXP LPAREN expression RPAREN .)
    BY              reduce using rule 112 (exp -> EXP LPAREN expression RPAREN .)


state 215

    (111) eq_string -> EQ_STRING LPAREN ID COMMA . ID RPAREN

    ID              shift and go to state 239


state 216

    (70) if_statement -> IF expression THEN statement_list END_IF . SEMICOLON

    SEMICOLON       shift and go to state 240


state 217

    (71) if_statement -> IF expression THEN statement_list elsif_statement_list . END_IF SEMICOLON
    (73) if_statement -> IF expression THEN statement_list elsif_statement_list . else_statement END_IF SEMICOLON
    (75) elsif_statement_list -> elsif_statement_list . elsif_statement
    (77) else_statement -> . ELSE statement_list
    (76) elsif_statement -> . ELSIF expression THEN statement_list

    END_IF          shift and go to state 241
    ELSE            shift and go to state 220
    ELSIF           shift and go to state 221

    else_statement                 shift and go to state 242
    elsif_statement                shift and go to state 243

state 218

    (72) if_statement -> IF expression THEN statement_list else_statement . END_IF SEMICOLON

    END_IF          shift and go to state 244


state 219

    (74) elsif_statement_list -> elsif_statement .

    END_IF          reduce using rule 74 (elsif_statement_list -> elsif_statement .)
    ELSE            reduce using rule 74 (elsif_statement_list -> elsif_statement .)
    ELSIF           reduce using rule 74 (elsif_statement_list -> elsif_statement .)


state 220

    (77) else_statement -> ELSE . statement_list
    (34) statement_list -> .
    (35) statement_list -> . statement_list assign_statement
    (36) statement_list -> . statement_list while_statement
    (37) statement_list -> . statement_list if_statement
    (38) statement_list -> . statement_list for_statement
    (39) statement_list -> . statement_list call_statement
    (40) statement_list -> . statement_list case_statement

    ID              reduce using rule 34 (statement_list -> .)
    WHILE           reduce using rule 34 (statement_list -> .)
    IF              reduce using rule 34 (statement_list -> .)
    FOR             reduce using rule 34 (statement_list -> .)
    CASE            reduce using rule 34 (statement_list -> .)
    END_IF          reduce using rule 34 (statement_list -> .)

    statement_list                 shift and go to state 245

state 221

    (76) elsif_statement -> ELSIF . expression THEN statement_list
    (82) expression -> . ID
    (83) expression -> . int_number
    (84) expression -> . float_number
    (85) expression -> . string_number
    (86) expression -> . log
    (87) expression -> . exp
    (88) expression -> . call
    (89) expression -> . eq_string
    (90) expression -> . expression PLUS expression
    (91) expression -> . expression MINUS expression
    (92) expression -> . expression TIMES expression
    (93) expression -> . expression DIVIDE expression
    (94) expression -> . expression AND expression
    (95) expression -> . expression OR expression
    (96) expression -> . expression XOR expression
    (97) expression -> . expression LT expression
    (98) expression -> . expression GT expression
    (99) expression -> . expression LE expression
    (100) expression -> . expression GE expression
    (101) expression -> . expression EQ expression
    (102) expression -> . LPAREN expression RPAREN
    (103) expression -> . NOT expression
    (104) expression -> . MINUS expression
    (105) expression -> . PLUS expression
    (115) int_number -> . INT_NUMBER
    (116) int_number -> . TRUE
    (117) int_number -> . FALSE
    (118) int_number -> . ID
    (119) float_number -> . FLOAT_NUMBER
    (120) float_number -> . ID
    (121) string_number -> . STRING_NUMBER
    (113) log -> . LOG LPAREN expression RPAREN
    (114) log -> . LN LPAREN expression RPAREN
    (112) exp -> . EXP LPAREN expression RPAREN
    (110) call -> . ID DOT ID
    (111) eq_string -> . EQ_STRING LPAREN ID COMMA ID RPAREN

    ID              shift and go to state 85
    LPAREN          shift and go to state 95
    NOT             shift and go to state 96
    MINUS           shift and go to state 94
    PLUS            shift and go to state 93
    INT_NUMBER      shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99
    FLOAT_NUMBER    shift and go to state 100
    STRING_NUMBER   shift and go to state 101
    LOG             shift and go to state 102
    LN              shift and go to state 103
    EXP             shift and go to state 104
    EQ_STRING       shift and go to state 105

    expression                     shift and go to state 246
    int_number                     shift and go to state 86
    float_number                   shift and go to state 87
    string_number                  shift and go to state 88
    log                            shift and go to state 89
    exp                            shift and go to state 90
    call                           shift and go to state 91
    eq_string                      shift and go to state 92

state 222

    (78) for_statement -> FOR ID ASSIGN expression TO . expression DO statement_list END_FOR SEMICOLON
    (79) for_statement -> FOR ID ASSIGN expression TO . expression BY expression DO statement_list END_FOR SEMICOLON
    (82) expression -> . ID
    (83) expression -> . int_number
    (84) expression -> . float_number
    (85) expression -> . string_number
    (86) expression -> . log
    (87) expression -> . exp
    (88) expression -> . call
    (89) expression -> . eq_string
    (90) expression -> . expression PLUS expression
    (91) expression -> . expression MINUS expression
    (92) expression -> . expression TIMES expression
    (93) expression -> . expression DIVIDE expression
    (94) expression -> . expression AND expression
    (95) expression -> . expression OR expression
    (96) expression -> . expression XOR expression
    (97) expression -> . expression LT expression
    (98) expression -> . expression GT expression
    (99) expression -> . expression LE expression
    (100) expression -> . expression GE expression
    (101) expression -> . expression EQ expression
    (102) expression -> . LPAREN expression RPAREN
    (103) expression -> . NOT expression
    (104) expression -> . MINUS expression
    (105) expression -> . PLUS expression
    (115) int_number -> . INT_NUMBER
    (116) int_number -> . TRUE
    (117) int_number -> . FALSE
    (118) int_number -> . ID
    (119) float_number -> . FLOAT_NUMBER
    (120) float_number -> . ID
    (121) string_number -> . STRING_NUMBER
    (113) log -> . LOG LPAREN expression RPAREN
    (114) log -> . LN LPAREN expression RPAREN
    (112) exp -> . EXP LPAREN expression RPAREN
    (110) call -> . ID DOT ID
    (111) eq_string -> . EQ_STRING LPAREN ID COMMA ID RPAREN

    ID              shift and go to state 85
    LPAREN          shift and go to state 95
    NOT             shift and go to state 96
    MINUS           shift and go to state 94
    PLUS            shift and go to state 93
    INT_NUMBER      shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99
    FLOAT_NUMBER    shift and go to state 100
    STRING_NUMBER   shift and go to state 101
    LOG             shift and go to state 102
    LN              shift and go to state 103
    EXP             shift and go to state 104
    EQ_STRING       shift and go to state 105

    expression                     shift and go to state 247
    int_number                     shift and go to state 86
    float_number                   shift and go to state 87
    string_number                  shift and go to state 88
    log                            shift and go to state 89
    exp                            shift and go to state 90
    call                           shift and go to state 91
    eq_string                      shift and go to state 92

state 223

    (67) case_statement -> CASE ID OF case_list END_CASE . SEMICOLON

    SEMICOLON       shift and go to state 248


state 224

    (69) case_list -> case_list expression . COLON statement_list
    (90) expression -> expression . PLUS expression
    (91) expression -> expression . MINUS expression
    (92) expression -> expression . TIMES expression
    (93) expression -> expression . DIVIDE expression
    (94) expression -> expression . AND expression
    (95) expression -> expression . OR expression
    (96) expression -> expression . XOR expression
    (97) expression -> expression . LT expression
    (98) expression -> expression . GT expression
    (99) expression -> expression . LE expression
    (100) expression -> expression . GE expression
    (101) expression -> expression . EQ expression

    COLON           shift and go to state 249
    PLUS            shift and go to state 121
    MINUS           shift and go to state 122
    TIMES           shift and go to state 123
    DIVIDE          shift and go to state 124
    AND             shift and go to state 125
    OR              shift and go to state 126
    XOR             shift and go to state 127
    LT              shift and go to state 128
    GT              shift and go to state 129
    LE              shift and go to state 130
    GE              shift and go to state 131
    EQ              shift and go to state 132


state 225

    (68) case_list -> expression COLON . statement_list
    (34) statement_list -> .
    (35) statement_list -> . statement_list assign_statement
    (36) statement_list -> . statement_list while_statement
    (37) statement_list -> . statement_list if_statement
    (38) statement_list -> . statement_list for_statement
    (39) statement_list -> . statement_list call_statement
    (40) statement_list -> . statement_list case_statement

    ID              reduce using rule 34 (statement_list -> .)
    WHILE           reduce using rule 34 (statement_list -> .)
    IF              reduce using rule 34 (statement_list -> .)
    FOR             reduce using rule 34 (statement_list -> .)
    CASE            reduce using rule 34 (statement_list -> .)
    END_CASE        reduce using rule 34 (statement_list -> .)
    LPAREN          reduce using rule 34 (statement_list -> .)
    NOT             reduce using rule 34 (statement_list -> .)
    MINUS           reduce using rule 34 (statement_list -> .)
    PLUS            reduce using rule 34 (statement_list -> .)
    INT_NUMBER      reduce using rule 34 (statement_list -> .)
    TRUE            reduce using rule 34 (statement_list -> .)
    FALSE           reduce using rule 34 (statement_list -> .)
    FLOAT_NUMBER    reduce using rule 34 (statement_list -> .)
    STRING_NUMBER   reduce using rule 34 (statement_list -> .)
    LOG             reduce using rule 34 (statement_list -> .)
    LN              reduce using rule 34 (statement_list -> .)
    EXP             reduce using rule 34 (statement_list -> .)
    EQ_STRING       reduce using rule 34 (statement_list -> .)

    statement_list                 shift and go to state 250

state 226

    (118) int_number -> ID .

    SEMICOLON       reduce using rule 118 (int_number -> ID .)


state 227

    (49) declare_int_statement -> ID COLON INT ASSIGN int_number . SEMICOLON

    SEMICOLON       shift and go to state 251


state 228

    (50) declare_int_statement -> ID COLON BOOL ASSIGN int_number . SEMICOLON

    SEMICOLON       shift and go to state 252


state 229

    (55) declare_int_statement -> ID COLON BYTE ASSIGN ID . SEMICOLON
    (118) int_number -> ID .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 253

  ! SEMICOLON       [ reduce using rule 118 (int_number -> ID .) ]


state 230

    (51) declare_int_statement -> ID COLON BYTE ASSIGN int_number . SEMICOLON

    SEMICOLON       shift and go to state 254


state 231

    (56) declare_int_statement -> ID COLON TIME ASSIGN ID . SEMICOLON
    (118) int_number -> ID .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 255

  ! SEMICOLON       [ reduce using rule 118 (int_number -> ID .) ]


state 232

    (52) declare_int_statement -> ID COLON TIME ASSIGN int_number . SEMICOLON

    SEMICOLON       shift and go to state 256


state 233

    (53) declare_int_statement -> ID COLON DWORD ASSIGN int_number . SEMICOLON

    SEMICOLON       shift and go to state 257


state 234

    (54) declare_int_statement -> ID COLON STRING ASSIGN string_number . SEMICOLON

    SEMICOLON       shift and go to state 258


state 235

    (120) float_number -> ID .

    SEMICOLON       reduce using rule 120 (float_number -> ID .)


state 236

    (63) declare_float_statement -> ID COLON FLOAT ASSIGN float_number . SEMICOLON

    SEMICOLON       shift and go to state 259


state 237

    (65) declare_float_statement -> ID COLON REAL ASSIGN float_number . SEMICOLON

    SEMICOLON       shift and go to state 260


state 238

    (109) argument -> argument COMMA ID ASSIGN expression .
    (90) expression -> expression . PLUS expression
    (91) expression -> expression . MINUS expression
    (92) expression -> expression . TIMES expression
    (93) expression -> expression . DIVIDE expression
    (94) expression -> expression . AND expression
    (95) expression -> expression . OR expression
    (96) expression -> expression . XOR expression
    (97) expression -> expression . LT expression
    (98) expression -> expression . GT expression
    (99) expression -> expression . LE expression
    (100) expression -> expression . GE expression
    (101) expression -> expression . EQ expression

    RPAREN          reduce using rule 109 (argument -> argument COMMA ID ASSIGN expression .)
    ID              reduce using rule 109 (argument -> argument COMMA ID ASSIGN expression .)
    COMMA           reduce using rule 109 (argument -> argument COMMA ID ASSIGN expression .)
    PLUS            shift and go to state 121
    MINUS           shift and go to state 122
    TIMES           shift and go to state 123
    DIVIDE          shift and go to state 124
    AND             shift and go to state 125
    OR              shift and go to state 126
    XOR             shift and go to state 127
    LT              shift and go to state 128
    GT              shift and go to state 129
    LE              shift and go to state 130
    GE              shift and go to state 131
    EQ              shift and go to state 132


state 239

    (111) eq_string -> EQ_STRING LPAREN ID COMMA ID . RPAREN

    RPAREN          shift and go to state 261


state 240

    (70) if_statement -> IF expression THEN statement_list END_IF SEMICOLON .

    END_PROGRAM     reduce using rule 70 (if_statement -> IF expression THEN statement_list END_IF SEMICOLON .)
    ID              reduce using rule 70 (if_statement -> IF expression THEN statement_list END_IF SEMICOLON .)
    WHILE           reduce using rule 70 (if_statement -> IF expression THEN statement_list END_IF SEMICOLON .)
    IF              reduce using rule 70 (if_statement -> IF expression THEN statement_list END_IF SEMICOLON .)
    FOR             reduce using rule 70 (if_statement -> IF expression THEN statement_list END_IF SEMICOLON .)
    CASE            reduce using rule 70 (if_statement -> IF expression THEN statement_list END_IF SEMICOLON .)
    END_FUNCTION_BLOCK reduce using rule 70 (if_statement -> IF expression THEN statement_list END_IF SEMICOLON .)
    END_FUNCTION    reduce using rule 70 (if_statement -> IF expression THEN statement_list END_IF SEMICOLON .)
    END_WHILE       reduce using rule 70 (if_statement -> IF expression THEN statement_list END_IF SEMICOLON .)
    END_IF          reduce using rule 70 (if_statement -> IF expression THEN statement_list END_IF SEMICOLON .)
    ELSE            reduce using rule 70 (if_statement -> IF expression THEN statement_list END_IF SEMICOLON .)
    ELSIF           reduce using rule 70 (if_statement -> IF expression THEN statement_list END_IF SEMICOLON .)
    END_CASE        reduce using rule 70 (if_statement -> IF expression THEN statement_list END_IF SEMICOLON .)
    LPAREN          reduce using rule 70 (if_statement -> IF expression THEN statement_list END_IF SEMICOLON .)
    NOT             reduce using rule 70 (if_statement -> IF expression THEN statement_list END_IF SEMICOLON .)
    MINUS           reduce using rule 70 (if_statement -> IF expression THEN statement_list END_IF SEMICOLON .)
    PLUS            reduce using rule 70 (if_statement -> IF expression THEN statement_list END_IF SEMICOLON .)
    INT_NUMBER      reduce using rule 70 (if_statement -> IF expression THEN statement_list END_IF SEMICOLON .)
    TRUE            reduce using rule 70 (if_statement -> IF expression THEN statement_list END_IF SEMICOLON .)
    FALSE           reduce using rule 70 (if_statement -> IF expression THEN statement_list END_IF SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 70 (if_statement -> IF expression THEN statement_list END_IF SEMICOLON .)
    STRING_NUMBER   reduce using rule 70 (if_statement -> IF expression THEN statement_list END_IF SEMICOLON .)
    LOG             reduce using rule 70 (if_statement -> IF expression THEN statement_list END_IF SEMICOLON .)
    LN              reduce using rule 70 (if_statement -> IF expression THEN statement_list END_IF SEMICOLON .)
    EXP             reduce using rule 70 (if_statement -> IF expression THEN statement_list END_IF SEMICOLON .)
    EQ_STRING       reduce using rule 70 (if_statement -> IF expression THEN statement_list END_IF SEMICOLON .)
    END_FOR         reduce using rule 70 (if_statement -> IF expression THEN statement_list END_IF SEMICOLON .)


state 241

    (71) if_statement -> IF expression THEN statement_list elsif_statement_list END_IF . SEMICOLON

    SEMICOLON       shift and go to state 262


state 242

    (73) if_statement -> IF expression THEN statement_list elsif_statement_list else_statement . END_IF SEMICOLON

    END_IF          shift and go to state 263


state 243

    (75) elsif_statement_list -> elsif_statement_list elsif_statement .

    END_IF          reduce using rule 75 (elsif_statement_list -> elsif_statement_list elsif_statement .)
    ELSE            reduce using rule 75 (elsif_statement_list -> elsif_statement_list elsif_statement .)
    ELSIF           reduce using rule 75 (elsif_statement_list -> elsif_statement_list elsif_statement .)


state 244

    (72) if_statement -> IF expression THEN statement_list else_statement END_IF . SEMICOLON

    SEMICOLON       shift and go to state 264


state 245

    (77) else_statement -> ELSE statement_list .
    (35) statement_list -> statement_list . assign_statement
    (36) statement_list -> statement_list . while_statement
    (37) statement_list -> statement_list . if_statement
    (38) statement_list -> statement_list . for_statement
    (39) statement_list -> statement_list . call_statement
    (40) statement_list -> statement_list . case_statement
    (81) assign_statement -> . ID ASSIGN expression SEMICOLON
    (80) while_statement -> . WHILE expression DO statement_list END_WHILE
    (70) if_statement -> . IF expression THEN statement_list END_IF SEMICOLON
    (71) if_statement -> . IF expression THEN statement_list elsif_statement_list END_IF SEMICOLON
    (72) if_statement -> . IF expression THEN statement_list else_statement END_IF SEMICOLON
    (73) if_statement -> . IF expression THEN statement_list elsif_statement_list else_statement END_IF SEMICOLON
    (78) for_statement -> . FOR ID ASSIGN expression TO expression DO statement_list END_FOR SEMICOLON
    (79) for_statement -> . FOR ID ASSIGN expression TO expression BY expression DO statement_list END_FOR SEMICOLON
    (106) call_statement -> . ID argument RPAREN SEMICOLON
    (67) case_statement -> . CASE ID OF case_list END_CASE SEMICOLON

    END_IF          reduce using rule 77 (else_statement -> ELSE statement_list .)
    ID              shift and go to state 51
    WHILE           shift and go to state 59
    IF              shift and go to state 60
    FOR             shift and go to state 61
    CASE            shift and go to state 62

    assign_statement               shift and go to state 53
    while_statement                shift and go to state 54
    if_statement                   shift and go to state 55
    for_statement                  shift and go to state 56
    call_statement                 shift and go to state 57
    case_statement                 shift and go to state 58

state 246

    (76) elsif_statement -> ELSIF expression . THEN statement_list
    (90) expression -> expression . PLUS expression
    (91) expression -> expression . MINUS expression
    (92) expression -> expression . TIMES expression
    (93) expression -> expression . DIVIDE expression
    (94) expression -> expression . AND expression
    (95) expression -> expression . OR expression
    (96) expression -> expression . XOR expression
    (97) expression -> expression . LT expression
    (98) expression -> expression . GT expression
    (99) expression -> expression . LE expression
    (100) expression -> expression . GE expression
    (101) expression -> expression . EQ expression

    THEN            shift and go to state 265
    PLUS            shift and go to state 121
    MINUS           shift and go to state 122
    TIMES           shift and go to state 123
    DIVIDE          shift and go to state 124
    AND             shift and go to state 125
    OR              shift and go to state 126
    XOR             shift and go to state 127
    LT              shift and go to state 128
    GT              shift and go to state 129
    LE              shift and go to state 130
    GE              shift and go to state 131
    EQ              shift and go to state 132


state 247

    (78) for_statement -> FOR ID ASSIGN expression TO expression . DO statement_list END_FOR SEMICOLON
    (79) for_statement -> FOR ID ASSIGN expression TO expression . BY expression DO statement_list END_FOR SEMICOLON
    (90) expression -> expression . PLUS expression
    (91) expression -> expression . MINUS expression
    (92) expression -> expression . TIMES expression
    (93) expression -> expression . DIVIDE expression
    (94) expression -> expression . AND expression
    (95) expression -> expression . OR expression
    (96) expression -> expression . XOR expression
    (97) expression -> expression . LT expression
    (98) expression -> expression . GT expression
    (99) expression -> expression . LE expression
    (100) expression -> expression . GE expression
    (101) expression -> expression . EQ expression

    DO              shift and go to state 266
    BY              shift and go to state 267
    PLUS            shift and go to state 121
    MINUS           shift and go to state 122
    TIMES           shift and go to state 123
    DIVIDE          shift and go to state 124
    AND             shift and go to state 125
    OR              shift and go to state 126
    XOR             shift and go to state 127
    LT              shift and go to state 128
    GT              shift and go to state 129
    LE              shift and go to state 130
    GE              shift and go to state 131
    EQ              shift and go to state 132


state 248

    (67) case_statement -> CASE ID OF case_list END_CASE SEMICOLON .

    END_PROGRAM     reduce using rule 67 (case_statement -> CASE ID OF case_list END_CASE SEMICOLON .)
    ID              reduce using rule 67 (case_statement -> CASE ID OF case_list END_CASE SEMICOLON .)
    WHILE           reduce using rule 67 (case_statement -> CASE ID OF case_list END_CASE SEMICOLON .)
    IF              reduce using rule 67 (case_statement -> CASE ID OF case_list END_CASE SEMICOLON .)
    FOR             reduce using rule 67 (case_statement -> CASE ID OF case_list END_CASE SEMICOLON .)
    CASE            reduce using rule 67 (case_statement -> CASE ID OF case_list END_CASE SEMICOLON .)
    END_FUNCTION_BLOCK reduce using rule 67 (case_statement -> CASE ID OF case_list END_CASE SEMICOLON .)
    END_FUNCTION    reduce using rule 67 (case_statement -> CASE ID OF case_list END_CASE SEMICOLON .)
    END_WHILE       reduce using rule 67 (case_statement -> CASE ID OF case_list END_CASE SEMICOLON .)
    END_IF          reduce using rule 67 (case_statement -> CASE ID OF case_list END_CASE SEMICOLON .)
    ELSE            reduce using rule 67 (case_statement -> CASE ID OF case_list END_CASE SEMICOLON .)
    ELSIF           reduce using rule 67 (case_statement -> CASE ID OF case_list END_CASE SEMICOLON .)
    END_CASE        reduce using rule 67 (case_statement -> CASE ID OF case_list END_CASE SEMICOLON .)
    LPAREN          reduce using rule 67 (case_statement -> CASE ID OF case_list END_CASE SEMICOLON .)
    NOT             reduce using rule 67 (case_statement -> CASE ID OF case_list END_CASE SEMICOLON .)
    MINUS           reduce using rule 67 (case_statement -> CASE ID OF case_list END_CASE SEMICOLON .)
    PLUS            reduce using rule 67 (case_statement -> CASE ID OF case_list END_CASE SEMICOLON .)
    INT_NUMBER      reduce using rule 67 (case_statement -> CASE ID OF case_list END_CASE SEMICOLON .)
    TRUE            reduce using rule 67 (case_statement -> CASE ID OF case_list END_CASE SEMICOLON .)
    FALSE           reduce using rule 67 (case_statement -> CASE ID OF case_list END_CASE SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 67 (case_statement -> CASE ID OF case_list END_CASE SEMICOLON .)
    STRING_NUMBER   reduce using rule 67 (case_statement -> CASE ID OF case_list END_CASE SEMICOLON .)
    LOG             reduce using rule 67 (case_statement -> CASE ID OF case_list END_CASE SEMICOLON .)
    LN              reduce using rule 67 (case_statement -> CASE ID OF case_list END_CASE SEMICOLON .)
    EXP             reduce using rule 67 (case_statement -> CASE ID OF case_list END_CASE SEMICOLON .)
    EQ_STRING       reduce using rule 67 (case_statement -> CASE ID OF case_list END_CASE SEMICOLON .)
    END_FOR         reduce using rule 67 (case_statement -> CASE ID OF case_list END_CASE SEMICOLON .)


state 249

    (69) case_list -> case_list expression COLON . statement_list
    (34) statement_list -> .
    (35) statement_list -> . statement_list assign_statement
    (36) statement_list -> . statement_list while_statement
    (37) statement_list -> . statement_list if_statement
    (38) statement_list -> . statement_list for_statement
    (39) statement_list -> . statement_list call_statement
    (40) statement_list -> . statement_list case_statement

    ID              reduce using rule 34 (statement_list -> .)
    WHILE           reduce using rule 34 (statement_list -> .)
    IF              reduce using rule 34 (statement_list -> .)
    FOR             reduce using rule 34 (statement_list -> .)
    CASE            reduce using rule 34 (statement_list -> .)
    END_CASE        reduce using rule 34 (statement_list -> .)
    LPAREN          reduce using rule 34 (statement_list -> .)
    NOT             reduce using rule 34 (statement_list -> .)
    MINUS           reduce using rule 34 (statement_list -> .)
    PLUS            reduce using rule 34 (statement_list -> .)
    INT_NUMBER      reduce using rule 34 (statement_list -> .)
    TRUE            reduce using rule 34 (statement_list -> .)
    FALSE           reduce using rule 34 (statement_list -> .)
    FLOAT_NUMBER    reduce using rule 34 (statement_list -> .)
    STRING_NUMBER   reduce using rule 34 (statement_list -> .)
    LOG             reduce using rule 34 (statement_list -> .)
    LN              reduce using rule 34 (statement_list -> .)
    EXP             reduce using rule 34 (statement_list -> .)
    EQ_STRING       reduce using rule 34 (statement_list -> .)

    statement_list                 shift and go to state 268

state 250

    (68) case_list -> expression COLON statement_list .
    (35) statement_list -> statement_list . assign_statement
    (36) statement_list -> statement_list . while_statement
    (37) statement_list -> statement_list . if_statement
    (38) statement_list -> statement_list . for_statement
    (39) statement_list -> statement_list . call_statement
    (40) statement_list -> statement_list . case_statement
    (81) assign_statement -> . ID ASSIGN expression SEMICOLON
    (80) while_statement -> . WHILE expression DO statement_list END_WHILE
    (70) if_statement -> . IF expression THEN statement_list END_IF SEMICOLON
    (71) if_statement -> . IF expression THEN statement_list elsif_statement_list END_IF SEMICOLON
    (72) if_statement -> . IF expression THEN statement_list else_statement END_IF SEMICOLON
    (73) if_statement -> . IF expression THEN statement_list elsif_statement_list else_statement END_IF SEMICOLON
    (78) for_statement -> . FOR ID ASSIGN expression TO expression DO statement_list END_FOR SEMICOLON
    (79) for_statement -> . FOR ID ASSIGN expression TO expression BY expression DO statement_list END_FOR SEMICOLON
    (106) call_statement -> . ID argument RPAREN SEMICOLON
    (67) case_statement -> . CASE ID OF case_list END_CASE SEMICOLON

  ! shift/reduce conflict for ID resolved as shift
    END_CASE        reduce using rule 68 (case_list -> expression COLON statement_list .)
    LPAREN          reduce using rule 68 (case_list -> expression COLON statement_list .)
    NOT             reduce using rule 68 (case_list -> expression COLON statement_list .)
    MINUS           reduce using rule 68 (case_list -> expression COLON statement_list .)
    PLUS            reduce using rule 68 (case_list -> expression COLON statement_list .)
    INT_NUMBER      reduce using rule 68 (case_list -> expression COLON statement_list .)
    TRUE            reduce using rule 68 (case_list -> expression COLON statement_list .)
    FALSE           reduce using rule 68 (case_list -> expression COLON statement_list .)
    FLOAT_NUMBER    reduce using rule 68 (case_list -> expression COLON statement_list .)
    STRING_NUMBER   reduce using rule 68 (case_list -> expression COLON statement_list .)
    LOG             reduce using rule 68 (case_list -> expression COLON statement_list .)
    LN              reduce using rule 68 (case_list -> expression COLON statement_list .)
    EXP             reduce using rule 68 (case_list -> expression COLON statement_list .)
    EQ_STRING       reduce using rule 68 (case_list -> expression COLON statement_list .)
    ID              shift and go to state 51
    WHILE           shift and go to state 59
    IF              shift and go to state 60
    FOR             shift and go to state 61
    CASE            shift and go to state 62

  ! ID              [ reduce using rule 68 (case_list -> expression COLON statement_list .) ]

    assign_statement               shift and go to state 53
    while_statement                shift and go to state 54
    if_statement                   shift and go to state 55
    for_statement                  shift and go to state 56
    call_statement                 shift and go to state 57
    case_statement                 shift and go to state 58

state 251

    (49) declare_int_statement -> ID COLON INT ASSIGN int_number SEMICOLON .

    END_VAR         reduce using rule 49 (declare_int_statement -> ID COLON INT ASSIGN int_number SEMICOLON .)
    ID              reduce using rule 49 (declare_int_statement -> ID COLON INT ASSIGN int_number SEMICOLON .)
    END_CONST       reduce using rule 49 (declare_int_statement -> ID COLON INT ASSIGN int_number SEMICOLON .)


state 252

    (50) declare_int_statement -> ID COLON BOOL ASSIGN int_number SEMICOLON .

    END_VAR         reduce using rule 50 (declare_int_statement -> ID COLON BOOL ASSIGN int_number SEMICOLON .)
    ID              reduce using rule 50 (declare_int_statement -> ID COLON BOOL ASSIGN int_number SEMICOLON .)
    END_CONST       reduce using rule 50 (declare_int_statement -> ID COLON BOOL ASSIGN int_number SEMICOLON .)


state 253

    (55) declare_int_statement -> ID COLON BYTE ASSIGN ID SEMICOLON .

    END_VAR         reduce using rule 55 (declare_int_statement -> ID COLON BYTE ASSIGN ID SEMICOLON .)
    ID              reduce using rule 55 (declare_int_statement -> ID COLON BYTE ASSIGN ID SEMICOLON .)
    END_CONST       reduce using rule 55 (declare_int_statement -> ID COLON BYTE ASSIGN ID SEMICOLON .)


state 254

    (51) declare_int_statement -> ID COLON BYTE ASSIGN int_number SEMICOLON .

    END_VAR         reduce using rule 51 (declare_int_statement -> ID COLON BYTE ASSIGN int_number SEMICOLON .)
    ID              reduce using rule 51 (declare_int_statement -> ID COLON BYTE ASSIGN int_number SEMICOLON .)
    END_CONST       reduce using rule 51 (declare_int_statement -> ID COLON BYTE ASSIGN int_number SEMICOLON .)


state 255

    (56) declare_int_statement -> ID COLON TIME ASSIGN ID SEMICOLON .

    END_VAR         reduce using rule 56 (declare_int_statement -> ID COLON TIME ASSIGN ID SEMICOLON .)
    ID              reduce using rule 56 (declare_int_statement -> ID COLON TIME ASSIGN ID SEMICOLON .)
    END_CONST       reduce using rule 56 (declare_int_statement -> ID COLON TIME ASSIGN ID SEMICOLON .)


state 256

    (52) declare_int_statement -> ID COLON TIME ASSIGN int_number SEMICOLON .

    END_VAR         reduce using rule 52 (declare_int_statement -> ID COLON TIME ASSIGN int_number SEMICOLON .)
    ID              reduce using rule 52 (declare_int_statement -> ID COLON TIME ASSIGN int_number SEMICOLON .)
    END_CONST       reduce using rule 52 (declare_int_statement -> ID COLON TIME ASSIGN int_number SEMICOLON .)


state 257

    (53) declare_int_statement -> ID COLON DWORD ASSIGN int_number SEMICOLON .

    END_VAR         reduce using rule 53 (declare_int_statement -> ID COLON DWORD ASSIGN int_number SEMICOLON .)
    ID              reduce using rule 53 (declare_int_statement -> ID COLON DWORD ASSIGN int_number SEMICOLON .)
    END_CONST       reduce using rule 53 (declare_int_statement -> ID COLON DWORD ASSIGN int_number SEMICOLON .)


state 258

    (54) declare_int_statement -> ID COLON STRING ASSIGN string_number SEMICOLON .

    END_VAR         reduce using rule 54 (declare_int_statement -> ID COLON STRING ASSIGN string_number SEMICOLON .)
    ID              reduce using rule 54 (declare_int_statement -> ID COLON STRING ASSIGN string_number SEMICOLON .)
    END_CONST       reduce using rule 54 (declare_int_statement -> ID COLON STRING ASSIGN string_number SEMICOLON .)


state 259

    (63) declare_float_statement -> ID COLON FLOAT ASSIGN float_number SEMICOLON .

    END_VAR         reduce using rule 63 (declare_float_statement -> ID COLON FLOAT ASSIGN float_number SEMICOLON .)
    ID              reduce using rule 63 (declare_float_statement -> ID COLON FLOAT ASSIGN float_number SEMICOLON .)
    END_CONST       reduce using rule 63 (declare_float_statement -> ID COLON FLOAT ASSIGN float_number SEMICOLON .)


state 260

    (65) declare_float_statement -> ID COLON REAL ASSIGN float_number SEMICOLON .

    END_VAR         reduce using rule 65 (declare_float_statement -> ID COLON REAL ASSIGN float_number SEMICOLON .)
    ID              reduce using rule 65 (declare_float_statement -> ID COLON REAL ASSIGN float_number SEMICOLON .)
    END_CONST       reduce using rule 65 (declare_float_statement -> ID COLON REAL ASSIGN float_number SEMICOLON .)


state 261

    (111) eq_string -> EQ_STRING LPAREN ID COMMA ID RPAREN .

    DO              reduce using rule 111 (eq_string -> EQ_STRING LPAREN ID COMMA ID RPAREN .)
    PLUS            reduce using rule 111 (eq_string -> EQ_STRING LPAREN ID COMMA ID RPAREN .)
    MINUS           reduce using rule 111 (eq_string -> EQ_STRING LPAREN ID COMMA ID RPAREN .)
    TIMES           reduce using rule 111 (eq_string -> EQ_STRING LPAREN ID COMMA ID RPAREN .)
    DIVIDE          reduce using rule 111 (eq_string -> EQ_STRING LPAREN ID COMMA ID RPAREN .)
    AND             reduce using rule 111 (eq_string -> EQ_STRING LPAREN ID COMMA ID RPAREN .)
    OR              reduce using rule 111 (eq_string -> EQ_STRING LPAREN ID COMMA ID RPAREN .)
    XOR             reduce using rule 111 (eq_string -> EQ_STRING LPAREN ID COMMA ID RPAREN .)
    LT              reduce using rule 111 (eq_string -> EQ_STRING LPAREN ID COMMA ID RPAREN .)
    GT              reduce using rule 111 (eq_string -> EQ_STRING LPAREN ID COMMA ID RPAREN .)
    LE              reduce using rule 111 (eq_string -> EQ_STRING LPAREN ID COMMA ID RPAREN .)
    GE              reduce using rule 111 (eq_string -> EQ_STRING LPAREN ID COMMA ID RPAREN .)
    EQ              reduce using rule 111 (eq_string -> EQ_STRING LPAREN ID COMMA ID RPAREN .)
    THEN            reduce using rule 111 (eq_string -> EQ_STRING LPAREN ID COMMA ID RPAREN .)
    SEMICOLON       reduce using rule 111 (eq_string -> EQ_STRING LPAREN ID COMMA ID RPAREN .)
    RPAREN          reduce using rule 111 (eq_string -> EQ_STRING LPAREN ID COMMA ID RPAREN .)
    TO              reduce using rule 111 (eq_string -> EQ_STRING LPAREN ID COMMA ID RPAREN .)
    COLON           reduce using rule 111 (eq_string -> EQ_STRING LPAREN ID COMMA ID RPAREN .)
    ID              reduce using rule 111 (eq_string -> EQ_STRING LPAREN ID COMMA ID RPAREN .)
    COMMA           reduce using rule 111 (eq_string -> EQ_STRING LPAREN ID COMMA ID RPAREN .)
    BY              reduce using rule 111 (eq_string -> EQ_STRING LPAREN ID COMMA ID RPAREN .)


state 262

    (71) if_statement -> IF expression THEN statement_list elsif_statement_list END_IF SEMICOLON .

    END_PROGRAM     reduce using rule 71 (if_statement -> IF expression THEN statement_list elsif_statement_list END_IF SEMICOLON .)
    ID              reduce using rule 71 (if_statement -> IF expression THEN statement_list elsif_statement_list END_IF SEMICOLON .)
    WHILE           reduce using rule 71 (if_statement -> IF expression THEN statement_list elsif_statement_list END_IF SEMICOLON .)
    IF              reduce using rule 71 (if_statement -> IF expression THEN statement_list elsif_statement_list END_IF SEMICOLON .)
    FOR             reduce using rule 71 (if_statement -> IF expression THEN statement_list elsif_statement_list END_IF SEMICOLON .)
    CASE            reduce using rule 71 (if_statement -> IF expression THEN statement_list elsif_statement_list END_IF SEMICOLON .)
    END_FUNCTION_BLOCK reduce using rule 71 (if_statement -> IF expression THEN statement_list elsif_statement_list END_IF SEMICOLON .)
    END_FUNCTION    reduce using rule 71 (if_statement -> IF expression THEN statement_list elsif_statement_list END_IF SEMICOLON .)
    END_WHILE       reduce using rule 71 (if_statement -> IF expression THEN statement_list elsif_statement_list END_IF SEMICOLON .)
    END_IF          reduce using rule 71 (if_statement -> IF expression THEN statement_list elsif_statement_list END_IF SEMICOLON .)
    ELSE            reduce using rule 71 (if_statement -> IF expression THEN statement_list elsif_statement_list END_IF SEMICOLON .)
    ELSIF           reduce using rule 71 (if_statement -> IF expression THEN statement_list elsif_statement_list END_IF SEMICOLON .)
    END_CASE        reduce using rule 71 (if_statement -> IF expression THEN statement_list elsif_statement_list END_IF SEMICOLON .)
    LPAREN          reduce using rule 71 (if_statement -> IF expression THEN statement_list elsif_statement_list END_IF SEMICOLON .)
    NOT             reduce using rule 71 (if_statement -> IF expression THEN statement_list elsif_statement_list END_IF SEMICOLON .)
    MINUS           reduce using rule 71 (if_statement -> IF expression THEN statement_list elsif_statement_list END_IF SEMICOLON .)
    PLUS            reduce using rule 71 (if_statement -> IF expression THEN statement_list elsif_statement_list END_IF SEMICOLON .)
    INT_NUMBER      reduce using rule 71 (if_statement -> IF expression THEN statement_list elsif_statement_list END_IF SEMICOLON .)
    TRUE            reduce using rule 71 (if_statement -> IF expression THEN statement_list elsif_statement_list END_IF SEMICOLON .)
    FALSE           reduce using rule 71 (if_statement -> IF expression THEN statement_list elsif_statement_list END_IF SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 71 (if_statement -> IF expression THEN statement_list elsif_statement_list END_IF SEMICOLON .)
    STRING_NUMBER   reduce using rule 71 (if_statement -> IF expression THEN statement_list elsif_statement_list END_IF SEMICOLON .)
    LOG             reduce using rule 71 (if_statement -> IF expression THEN statement_list elsif_statement_list END_IF SEMICOLON .)
    LN              reduce using rule 71 (if_statement -> IF expression THEN statement_list elsif_statement_list END_IF SEMICOLON .)
    EXP             reduce using rule 71 (if_statement -> IF expression THEN statement_list elsif_statement_list END_IF SEMICOLON .)
    EQ_STRING       reduce using rule 71 (if_statement -> IF expression THEN statement_list elsif_statement_list END_IF SEMICOLON .)
    END_FOR         reduce using rule 71 (if_statement -> IF expression THEN statement_list elsif_statement_list END_IF SEMICOLON .)


state 263

    (73) if_statement -> IF expression THEN statement_list elsif_statement_list else_statement END_IF . SEMICOLON

    SEMICOLON       shift and go to state 269


state 264

    (72) if_statement -> IF expression THEN statement_list else_statement END_IF SEMICOLON .

    END_PROGRAM     reduce using rule 72 (if_statement -> IF expression THEN statement_list else_statement END_IF SEMICOLON .)
    ID              reduce using rule 72 (if_statement -> IF expression THEN statement_list else_statement END_IF SEMICOLON .)
    WHILE           reduce using rule 72 (if_statement -> IF expression THEN statement_list else_statement END_IF SEMICOLON .)
    IF              reduce using rule 72 (if_statement -> IF expression THEN statement_list else_statement END_IF SEMICOLON .)
    FOR             reduce using rule 72 (if_statement -> IF expression THEN statement_list else_statement END_IF SEMICOLON .)
    CASE            reduce using rule 72 (if_statement -> IF expression THEN statement_list else_statement END_IF SEMICOLON .)
    END_FUNCTION_BLOCK reduce using rule 72 (if_statement -> IF expression THEN statement_list else_statement END_IF SEMICOLON .)
    END_FUNCTION    reduce using rule 72 (if_statement -> IF expression THEN statement_list else_statement END_IF SEMICOLON .)
    END_WHILE       reduce using rule 72 (if_statement -> IF expression THEN statement_list else_statement END_IF SEMICOLON .)
    END_IF          reduce using rule 72 (if_statement -> IF expression THEN statement_list else_statement END_IF SEMICOLON .)
    ELSE            reduce using rule 72 (if_statement -> IF expression THEN statement_list else_statement END_IF SEMICOLON .)
    ELSIF           reduce using rule 72 (if_statement -> IF expression THEN statement_list else_statement END_IF SEMICOLON .)
    END_CASE        reduce using rule 72 (if_statement -> IF expression THEN statement_list else_statement END_IF SEMICOLON .)
    LPAREN          reduce using rule 72 (if_statement -> IF expression THEN statement_list else_statement END_IF SEMICOLON .)
    NOT             reduce using rule 72 (if_statement -> IF expression THEN statement_list else_statement END_IF SEMICOLON .)
    MINUS           reduce using rule 72 (if_statement -> IF expression THEN statement_list else_statement END_IF SEMICOLON .)
    PLUS            reduce using rule 72 (if_statement -> IF expression THEN statement_list else_statement END_IF SEMICOLON .)
    INT_NUMBER      reduce using rule 72 (if_statement -> IF expression THEN statement_list else_statement END_IF SEMICOLON .)
    TRUE            reduce using rule 72 (if_statement -> IF expression THEN statement_list else_statement END_IF SEMICOLON .)
    FALSE           reduce using rule 72 (if_statement -> IF expression THEN statement_list else_statement END_IF SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 72 (if_statement -> IF expression THEN statement_list else_statement END_IF SEMICOLON .)
    STRING_NUMBER   reduce using rule 72 (if_statement -> IF expression THEN statement_list else_statement END_IF SEMICOLON .)
    LOG             reduce using rule 72 (if_statement -> IF expression THEN statement_list else_statement END_IF SEMICOLON .)
    LN              reduce using rule 72 (if_statement -> IF expression THEN statement_list else_statement END_IF SEMICOLON .)
    EXP             reduce using rule 72 (if_statement -> IF expression THEN statement_list else_statement END_IF SEMICOLON .)
    EQ_STRING       reduce using rule 72 (if_statement -> IF expression THEN statement_list else_statement END_IF SEMICOLON .)
    END_FOR         reduce using rule 72 (if_statement -> IF expression THEN statement_list else_statement END_IF SEMICOLON .)


state 265

    (76) elsif_statement -> ELSIF expression THEN . statement_list
    (34) statement_list -> .
    (35) statement_list -> . statement_list assign_statement
    (36) statement_list -> . statement_list while_statement
    (37) statement_list -> . statement_list if_statement
    (38) statement_list -> . statement_list for_statement
    (39) statement_list -> . statement_list call_statement
    (40) statement_list -> . statement_list case_statement

    ID              reduce using rule 34 (statement_list -> .)
    WHILE           reduce using rule 34 (statement_list -> .)
    IF              reduce using rule 34 (statement_list -> .)
    FOR             reduce using rule 34 (statement_list -> .)
    CASE            reduce using rule 34 (statement_list -> .)
    END_IF          reduce using rule 34 (statement_list -> .)
    ELSE            reduce using rule 34 (statement_list -> .)
    ELSIF           reduce using rule 34 (statement_list -> .)

    statement_list                 shift and go to state 270

state 266

    (78) for_statement -> FOR ID ASSIGN expression TO expression DO . statement_list END_FOR SEMICOLON
    (34) statement_list -> .
    (35) statement_list -> . statement_list assign_statement
    (36) statement_list -> . statement_list while_statement
    (37) statement_list -> . statement_list if_statement
    (38) statement_list -> . statement_list for_statement
    (39) statement_list -> . statement_list call_statement
    (40) statement_list -> . statement_list case_statement

    END_FOR         reduce using rule 34 (statement_list -> .)
    ID              reduce using rule 34 (statement_list -> .)
    WHILE           reduce using rule 34 (statement_list -> .)
    IF              reduce using rule 34 (statement_list -> .)
    FOR             reduce using rule 34 (statement_list -> .)
    CASE            reduce using rule 34 (statement_list -> .)

    statement_list                 shift and go to state 271

state 267

    (79) for_statement -> FOR ID ASSIGN expression TO expression BY . expression DO statement_list END_FOR SEMICOLON
    (82) expression -> . ID
    (83) expression -> . int_number
    (84) expression -> . float_number
    (85) expression -> . string_number
    (86) expression -> . log
    (87) expression -> . exp
    (88) expression -> . call
    (89) expression -> . eq_string
    (90) expression -> . expression PLUS expression
    (91) expression -> . expression MINUS expression
    (92) expression -> . expression TIMES expression
    (93) expression -> . expression DIVIDE expression
    (94) expression -> . expression AND expression
    (95) expression -> . expression OR expression
    (96) expression -> . expression XOR expression
    (97) expression -> . expression LT expression
    (98) expression -> . expression GT expression
    (99) expression -> . expression LE expression
    (100) expression -> . expression GE expression
    (101) expression -> . expression EQ expression
    (102) expression -> . LPAREN expression RPAREN
    (103) expression -> . NOT expression
    (104) expression -> . MINUS expression
    (105) expression -> . PLUS expression
    (115) int_number -> . INT_NUMBER
    (116) int_number -> . TRUE
    (117) int_number -> . FALSE
    (118) int_number -> . ID
    (119) float_number -> . FLOAT_NUMBER
    (120) float_number -> . ID
    (121) string_number -> . STRING_NUMBER
    (113) log -> . LOG LPAREN expression RPAREN
    (114) log -> . LN LPAREN expression RPAREN
    (112) exp -> . EXP LPAREN expression RPAREN
    (110) call -> . ID DOT ID
    (111) eq_string -> . EQ_STRING LPAREN ID COMMA ID RPAREN

    ID              shift and go to state 85
    LPAREN          shift and go to state 95
    NOT             shift and go to state 96
    MINUS           shift and go to state 94
    PLUS            shift and go to state 93
    INT_NUMBER      shift and go to state 97
    TRUE            shift and go to state 98
    FALSE           shift and go to state 99
    FLOAT_NUMBER    shift and go to state 100
    STRING_NUMBER   shift and go to state 101
    LOG             shift and go to state 102
    LN              shift and go to state 103
    EXP             shift and go to state 104
    EQ_STRING       shift and go to state 105

    expression                     shift and go to state 272
    int_number                     shift and go to state 86
    float_number                   shift and go to state 87
    string_number                  shift and go to state 88
    log                            shift and go to state 89
    exp                            shift and go to state 90
    call                           shift and go to state 91
    eq_string                      shift and go to state 92

state 268

    (69) case_list -> case_list expression COLON statement_list .
    (35) statement_list -> statement_list . assign_statement
    (36) statement_list -> statement_list . while_statement
    (37) statement_list -> statement_list . if_statement
    (38) statement_list -> statement_list . for_statement
    (39) statement_list -> statement_list . call_statement
    (40) statement_list -> statement_list . case_statement
    (81) assign_statement -> . ID ASSIGN expression SEMICOLON
    (80) while_statement -> . WHILE expression DO statement_list END_WHILE
    (70) if_statement -> . IF expression THEN statement_list END_IF SEMICOLON
    (71) if_statement -> . IF expression THEN statement_list elsif_statement_list END_IF SEMICOLON
    (72) if_statement -> . IF expression THEN statement_list else_statement END_IF SEMICOLON
    (73) if_statement -> . IF expression THEN statement_list elsif_statement_list else_statement END_IF SEMICOLON
    (78) for_statement -> . FOR ID ASSIGN expression TO expression DO statement_list END_FOR SEMICOLON
    (79) for_statement -> . FOR ID ASSIGN expression TO expression BY expression DO statement_list END_FOR SEMICOLON
    (106) call_statement -> . ID argument RPAREN SEMICOLON
    (67) case_statement -> . CASE ID OF case_list END_CASE SEMICOLON

  ! shift/reduce conflict for ID resolved as shift
    END_CASE        reduce using rule 69 (case_list -> case_list expression COLON statement_list .)
    LPAREN          reduce using rule 69 (case_list -> case_list expression COLON statement_list .)
    NOT             reduce using rule 69 (case_list -> case_list expression COLON statement_list .)
    MINUS           reduce using rule 69 (case_list -> case_list expression COLON statement_list .)
    PLUS            reduce using rule 69 (case_list -> case_list expression COLON statement_list .)
    INT_NUMBER      reduce using rule 69 (case_list -> case_list expression COLON statement_list .)
    TRUE            reduce using rule 69 (case_list -> case_list expression COLON statement_list .)
    FALSE           reduce using rule 69 (case_list -> case_list expression COLON statement_list .)
    FLOAT_NUMBER    reduce using rule 69 (case_list -> case_list expression COLON statement_list .)
    STRING_NUMBER   reduce using rule 69 (case_list -> case_list expression COLON statement_list .)
    LOG             reduce using rule 69 (case_list -> case_list expression COLON statement_list .)
    LN              reduce using rule 69 (case_list -> case_list expression COLON statement_list .)
    EXP             reduce using rule 69 (case_list -> case_list expression COLON statement_list .)
    EQ_STRING       reduce using rule 69 (case_list -> case_list expression COLON statement_list .)
    ID              shift and go to state 51
    WHILE           shift and go to state 59
    IF              shift and go to state 60
    FOR             shift and go to state 61
    CASE            shift and go to state 62

  ! ID              [ reduce using rule 69 (case_list -> case_list expression COLON statement_list .) ]

    assign_statement               shift and go to state 53
    while_statement                shift and go to state 54
    if_statement                   shift and go to state 55
    for_statement                  shift and go to state 56
    call_statement                 shift and go to state 57
    case_statement                 shift and go to state 58

state 269

    (73) if_statement -> IF expression THEN statement_list elsif_statement_list else_statement END_IF SEMICOLON .

    END_PROGRAM     reduce using rule 73 (if_statement -> IF expression THEN statement_list elsif_statement_list else_statement END_IF SEMICOLON .)
    ID              reduce using rule 73 (if_statement -> IF expression THEN statement_list elsif_statement_list else_statement END_IF SEMICOLON .)
    WHILE           reduce using rule 73 (if_statement -> IF expression THEN statement_list elsif_statement_list else_statement END_IF SEMICOLON .)
    IF              reduce using rule 73 (if_statement -> IF expression THEN statement_list elsif_statement_list else_statement END_IF SEMICOLON .)
    FOR             reduce using rule 73 (if_statement -> IF expression THEN statement_list elsif_statement_list else_statement END_IF SEMICOLON .)
    CASE            reduce using rule 73 (if_statement -> IF expression THEN statement_list elsif_statement_list else_statement END_IF SEMICOLON .)
    END_FUNCTION_BLOCK reduce using rule 73 (if_statement -> IF expression THEN statement_list elsif_statement_list else_statement END_IF SEMICOLON .)
    END_FUNCTION    reduce using rule 73 (if_statement -> IF expression THEN statement_list elsif_statement_list else_statement END_IF SEMICOLON .)
    END_WHILE       reduce using rule 73 (if_statement -> IF expression THEN statement_list elsif_statement_list else_statement END_IF SEMICOLON .)
    END_IF          reduce using rule 73 (if_statement -> IF expression THEN statement_list elsif_statement_list else_statement END_IF SEMICOLON .)
    ELSE            reduce using rule 73 (if_statement -> IF expression THEN statement_list elsif_statement_list else_statement END_IF SEMICOLON .)
    ELSIF           reduce using rule 73 (if_statement -> IF expression THEN statement_list elsif_statement_list else_statement END_IF SEMICOLON .)
    END_CASE        reduce using rule 73 (if_statement -> IF expression THEN statement_list elsif_statement_list else_statement END_IF SEMICOLON .)
    LPAREN          reduce using rule 73 (if_statement -> IF expression THEN statement_list elsif_statement_list else_statement END_IF SEMICOLON .)
    NOT             reduce using rule 73 (if_statement -> IF expression THEN statement_list elsif_statement_list else_statement END_IF SEMICOLON .)
    MINUS           reduce using rule 73 (if_statement -> IF expression THEN statement_list elsif_statement_list else_statement END_IF SEMICOLON .)
    PLUS            reduce using rule 73 (if_statement -> IF expression THEN statement_list elsif_statement_list else_statement END_IF SEMICOLON .)
    INT_NUMBER      reduce using rule 73 (if_statement -> IF expression THEN statement_list elsif_statement_list else_statement END_IF SEMICOLON .)
    TRUE            reduce using rule 73 (if_statement -> IF expression THEN statement_list elsif_statement_list else_statement END_IF SEMICOLON .)
    FALSE           reduce using rule 73 (if_statement -> IF expression THEN statement_list elsif_statement_list else_statement END_IF SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 73 (if_statement -> IF expression THEN statement_list elsif_statement_list else_statement END_IF SEMICOLON .)
    STRING_NUMBER   reduce using rule 73 (if_statement -> IF expression THEN statement_list elsif_statement_list else_statement END_IF SEMICOLON .)
    LOG             reduce using rule 73 (if_statement -> IF expression THEN statement_list elsif_statement_list else_statement END_IF SEMICOLON .)
    LN              reduce using rule 73 (if_statement -> IF expression THEN statement_list elsif_statement_list else_statement END_IF SEMICOLON .)
    EXP             reduce using rule 73 (if_statement -> IF expression THEN statement_list elsif_statement_list else_statement END_IF SEMICOLON .)
    EQ_STRING       reduce using rule 73 (if_statement -> IF expression THEN statement_list elsif_statement_list else_statement END_IF SEMICOLON .)
    END_FOR         reduce using rule 73 (if_statement -> IF expression THEN statement_list elsif_statement_list else_statement END_IF SEMICOLON .)


state 270

    (76) elsif_statement -> ELSIF expression THEN statement_list .
    (35) statement_list -> statement_list . assign_statement
    (36) statement_list -> statement_list . while_statement
    (37) statement_list -> statement_list . if_statement
    (38) statement_list -> statement_list . for_statement
    (39) statement_list -> statement_list . call_statement
    (40) statement_list -> statement_list . case_statement
    (81) assign_statement -> . ID ASSIGN expression SEMICOLON
    (80) while_statement -> . WHILE expression DO statement_list END_WHILE
    (70) if_statement -> . IF expression THEN statement_list END_IF SEMICOLON
    (71) if_statement -> . IF expression THEN statement_list elsif_statement_list END_IF SEMICOLON
    (72) if_statement -> . IF expression THEN statement_list else_statement END_IF SEMICOLON
    (73) if_statement -> . IF expression THEN statement_list elsif_statement_list else_statement END_IF SEMICOLON
    (78) for_statement -> . FOR ID ASSIGN expression TO expression DO statement_list END_FOR SEMICOLON
    (79) for_statement -> . FOR ID ASSIGN expression TO expression BY expression DO statement_list END_FOR SEMICOLON
    (106) call_statement -> . ID argument RPAREN SEMICOLON
    (67) case_statement -> . CASE ID OF case_list END_CASE SEMICOLON

    END_IF          reduce using rule 76 (elsif_statement -> ELSIF expression THEN statement_list .)
    ELSE            reduce using rule 76 (elsif_statement -> ELSIF expression THEN statement_list .)
    ELSIF           reduce using rule 76 (elsif_statement -> ELSIF expression THEN statement_list .)
    ID              shift and go to state 51
    WHILE           shift and go to state 59
    IF              shift and go to state 60
    FOR             shift and go to state 61
    CASE            shift and go to state 62

    assign_statement               shift and go to state 53
    while_statement                shift and go to state 54
    if_statement                   shift and go to state 55
    for_statement                  shift and go to state 56
    call_statement                 shift and go to state 57
    case_statement                 shift and go to state 58

state 271

    (78) for_statement -> FOR ID ASSIGN expression TO expression DO statement_list . END_FOR SEMICOLON
    (35) statement_list -> statement_list . assign_statement
    (36) statement_list -> statement_list . while_statement
    (37) statement_list -> statement_list . if_statement
    (38) statement_list -> statement_list . for_statement
    (39) statement_list -> statement_list . call_statement
    (40) statement_list -> statement_list . case_statement
    (81) assign_statement -> . ID ASSIGN expression SEMICOLON
    (80) while_statement -> . WHILE expression DO statement_list END_WHILE
    (70) if_statement -> . IF expression THEN statement_list END_IF SEMICOLON
    (71) if_statement -> . IF expression THEN statement_list elsif_statement_list END_IF SEMICOLON
    (72) if_statement -> . IF expression THEN statement_list else_statement END_IF SEMICOLON
    (73) if_statement -> . IF expression THEN statement_list elsif_statement_list else_statement END_IF SEMICOLON
    (78) for_statement -> . FOR ID ASSIGN expression TO expression DO statement_list END_FOR SEMICOLON
    (79) for_statement -> . FOR ID ASSIGN expression TO expression BY expression DO statement_list END_FOR SEMICOLON
    (106) call_statement -> . ID argument RPAREN SEMICOLON
    (67) case_statement -> . CASE ID OF case_list END_CASE SEMICOLON

    END_FOR         shift and go to state 273
    ID              shift and go to state 51
    WHILE           shift and go to state 59
    IF              shift and go to state 60
    FOR             shift and go to state 61
    CASE            shift and go to state 62

    assign_statement               shift and go to state 53
    while_statement                shift and go to state 54
    if_statement                   shift and go to state 55
    for_statement                  shift and go to state 56
    call_statement                 shift and go to state 57
    case_statement                 shift and go to state 58

state 272

    (79) for_statement -> FOR ID ASSIGN expression TO expression BY expression . DO statement_list END_FOR SEMICOLON
    (90) expression -> expression . PLUS expression
    (91) expression -> expression . MINUS expression
    (92) expression -> expression . TIMES expression
    (93) expression -> expression . DIVIDE expression
    (94) expression -> expression . AND expression
    (95) expression -> expression . OR expression
    (96) expression -> expression . XOR expression
    (97) expression -> expression . LT expression
    (98) expression -> expression . GT expression
    (99) expression -> expression . LE expression
    (100) expression -> expression . GE expression
    (101) expression -> expression . EQ expression

    DO              shift and go to state 274
    PLUS            shift and go to state 121
    MINUS           shift and go to state 122
    TIMES           shift and go to state 123
    DIVIDE          shift and go to state 124
    AND             shift and go to state 125
    OR              shift and go to state 126
    XOR             shift and go to state 127
    LT              shift and go to state 128
    GT              shift and go to state 129
    LE              shift and go to state 130
    GE              shift and go to state 131
    EQ              shift and go to state 132


state 273

    (78) for_statement -> FOR ID ASSIGN expression TO expression DO statement_list END_FOR . SEMICOLON

    SEMICOLON       shift and go to state 275


state 274

    (79) for_statement -> FOR ID ASSIGN expression TO expression BY expression DO . statement_list END_FOR SEMICOLON
    (34) statement_list -> .
    (35) statement_list -> . statement_list assign_statement
    (36) statement_list -> . statement_list while_statement
    (37) statement_list -> . statement_list if_statement
    (38) statement_list -> . statement_list for_statement
    (39) statement_list -> . statement_list call_statement
    (40) statement_list -> . statement_list case_statement

    END_FOR         reduce using rule 34 (statement_list -> .)
    ID              reduce using rule 34 (statement_list -> .)
    WHILE           reduce using rule 34 (statement_list -> .)
    IF              reduce using rule 34 (statement_list -> .)
    FOR             reduce using rule 34 (statement_list -> .)
    CASE            reduce using rule 34 (statement_list -> .)

    statement_list                 shift and go to state 276

state 275

    (78) for_statement -> FOR ID ASSIGN expression TO expression DO statement_list END_FOR SEMICOLON .

    END_PROGRAM     reduce using rule 78 (for_statement -> FOR ID ASSIGN expression TO expression DO statement_list END_FOR SEMICOLON .)
    ID              reduce using rule 78 (for_statement -> FOR ID ASSIGN expression TO expression DO statement_list END_FOR SEMICOLON .)
    WHILE           reduce using rule 78 (for_statement -> FOR ID ASSIGN expression TO expression DO statement_list END_FOR SEMICOLON .)
    IF              reduce using rule 78 (for_statement -> FOR ID ASSIGN expression TO expression DO statement_list END_FOR SEMICOLON .)
    FOR             reduce using rule 78 (for_statement -> FOR ID ASSIGN expression TO expression DO statement_list END_FOR SEMICOLON .)
    CASE            reduce using rule 78 (for_statement -> FOR ID ASSIGN expression TO expression DO statement_list END_FOR SEMICOLON .)
    END_FUNCTION_BLOCK reduce using rule 78 (for_statement -> FOR ID ASSIGN expression TO expression DO statement_list END_FOR SEMICOLON .)
    END_FUNCTION    reduce using rule 78 (for_statement -> FOR ID ASSIGN expression TO expression DO statement_list END_FOR SEMICOLON .)
    END_WHILE       reduce using rule 78 (for_statement -> FOR ID ASSIGN expression TO expression DO statement_list END_FOR SEMICOLON .)
    END_IF          reduce using rule 78 (for_statement -> FOR ID ASSIGN expression TO expression DO statement_list END_FOR SEMICOLON .)
    ELSE            reduce using rule 78 (for_statement -> FOR ID ASSIGN expression TO expression DO statement_list END_FOR SEMICOLON .)
    ELSIF           reduce using rule 78 (for_statement -> FOR ID ASSIGN expression TO expression DO statement_list END_FOR SEMICOLON .)
    END_CASE        reduce using rule 78 (for_statement -> FOR ID ASSIGN expression TO expression DO statement_list END_FOR SEMICOLON .)
    LPAREN          reduce using rule 78 (for_statement -> FOR ID ASSIGN expression TO expression DO statement_list END_FOR SEMICOLON .)
    NOT             reduce using rule 78 (for_statement -> FOR ID ASSIGN expression TO expression DO statement_list END_FOR SEMICOLON .)
    MINUS           reduce using rule 78 (for_statement -> FOR ID ASSIGN expression TO expression DO statement_list END_FOR SEMICOLON .)
    PLUS            reduce using rule 78 (for_statement -> FOR ID ASSIGN expression TO expression DO statement_list END_FOR SEMICOLON .)
    INT_NUMBER      reduce using rule 78 (for_statement -> FOR ID ASSIGN expression TO expression DO statement_list END_FOR SEMICOLON .)
    TRUE            reduce using rule 78 (for_statement -> FOR ID ASSIGN expression TO expression DO statement_list END_FOR SEMICOLON .)
    FALSE           reduce using rule 78 (for_statement -> FOR ID ASSIGN expression TO expression DO statement_list END_FOR SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 78 (for_statement -> FOR ID ASSIGN expression TO expression DO statement_list END_FOR SEMICOLON .)
    STRING_NUMBER   reduce using rule 78 (for_statement -> FOR ID ASSIGN expression TO expression DO statement_list END_FOR SEMICOLON .)
    LOG             reduce using rule 78 (for_statement -> FOR ID ASSIGN expression TO expression DO statement_list END_FOR SEMICOLON .)
    LN              reduce using rule 78 (for_statement -> FOR ID ASSIGN expression TO expression DO statement_list END_FOR SEMICOLON .)
    EXP             reduce using rule 78 (for_statement -> FOR ID ASSIGN expression TO expression DO statement_list END_FOR SEMICOLON .)
    EQ_STRING       reduce using rule 78 (for_statement -> FOR ID ASSIGN expression TO expression DO statement_list END_FOR SEMICOLON .)
    END_FOR         reduce using rule 78 (for_statement -> FOR ID ASSIGN expression TO expression DO statement_list END_FOR SEMICOLON .)


state 276

    (79) for_statement -> FOR ID ASSIGN expression TO expression BY expression DO statement_list . END_FOR SEMICOLON
    (35) statement_list -> statement_list . assign_statement
    (36) statement_list -> statement_list . while_statement
    (37) statement_list -> statement_list . if_statement
    (38) statement_list -> statement_list . for_statement
    (39) statement_list -> statement_list . call_statement
    (40) statement_list -> statement_list . case_statement
    (81) assign_statement -> . ID ASSIGN expression SEMICOLON
    (80) while_statement -> . WHILE expression DO statement_list END_WHILE
    (70) if_statement -> . IF expression THEN statement_list END_IF SEMICOLON
    (71) if_statement -> . IF expression THEN statement_list elsif_statement_list END_IF SEMICOLON
    (72) if_statement -> . IF expression THEN statement_list else_statement END_IF SEMICOLON
    (73) if_statement -> . IF expression THEN statement_list elsif_statement_list else_statement END_IF SEMICOLON
    (78) for_statement -> . FOR ID ASSIGN expression TO expression DO statement_list END_FOR SEMICOLON
    (79) for_statement -> . FOR ID ASSIGN expression TO expression BY expression DO statement_list END_FOR SEMICOLON
    (106) call_statement -> . ID argument RPAREN SEMICOLON
    (67) case_statement -> . CASE ID OF case_list END_CASE SEMICOLON

    END_FOR         shift and go to state 277
    ID              shift and go to state 51
    WHILE           shift and go to state 59
    IF              shift and go to state 60
    FOR             shift and go to state 61
    CASE            shift and go to state 62

    assign_statement               shift and go to state 53
    while_statement                shift and go to state 54
    if_statement                   shift and go to state 55
    for_statement                  shift and go to state 56
    call_statement                 shift and go to state 57
    case_statement                 shift and go to state 58

state 277

    (79) for_statement -> FOR ID ASSIGN expression TO expression BY expression DO statement_list END_FOR . SEMICOLON

    SEMICOLON       shift and go to state 278


state 278

    (79) for_statement -> FOR ID ASSIGN expression TO expression BY expression DO statement_list END_FOR SEMICOLON .

    END_PROGRAM     reduce using rule 79 (for_statement -> FOR ID ASSIGN expression TO expression BY expression DO statement_list END_FOR SEMICOLON .)
    ID              reduce using rule 79 (for_statement -> FOR ID ASSIGN expression TO expression BY expression DO statement_list END_FOR SEMICOLON .)
    WHILE           reduce using rule 79 (for_statement -> FOR ID ASSIGN expression TO expression BY expression DO statement_list END_FOR SEMICOLON .)
    IF              reduce using rule 79 (for_statement -> FOR ID ASSIGN expression TO expression BY expression DO statement_list END_FOR SEMICOLON .)
    FOR             reduce using rule 79 (for_statement -> FOR ID ASSIGN expression TO expression BY expression DO statement_list END_FOR SEMICOLON .)
    CASE            reduce using rule 79 (for_statement -> FOR ID ASSIGN expression TO expression BY expression DO statement_list END_FOR SEMICOLON .)
    END_FUNCTION_BLOCK reduce using rule 79 (for_statement -> FOR ID ASSIGN expression TO expression BY expression DO statement_list END_FOR SEMICOLON .)
    END_FUNCTION    reduce using rule 79 (for_statement -> FOR ID ASSIGN expression TO expression BY expression DO statement_list END_FOR SEMICOLON .)
    END_WHILE       reduce using rule 79 (for_statement -> FOR ID ASSIGN expression TO expression BY expression DO statement_list END_FOR SEMICOLON .)
    END_IF          reduce using rule 79 (for_statement -> FOR ID ASSIGN expression TO expression BY expression DO statement_list END_FOR SEMICOLON .)
    ELSE            reduce using rule 79 (for_statement -> FOR ID ASSIGN expression TO expression BY expression DO statement_list END_FOR SEMICOLON .)
    ELSIF           reduce using rule 79 (for_statement -> FOR ID ASSIGN expression TO expression BY expression DO statement_list END_FOR SEMICOLON .)
    END_CASE        reduce using rule 79 (for_statement -> FOR ID ASSIGN expression TO expression BY expression DO statement_list END_FOR SEMICOLON .)
    LPAREN          reduce using rule 79 (for_statement -> FOR ID ASSIGN expression TO expression BY expression DO statement_list END_FOR SEMICOLON .)
    NOT             reduce using rule 79 (for_statement -> FOR ID ASSIGN expression TO expression BY expression DO statement_list END_FOR SEMICOLON .)
    MINUS           reduce using rule 79 (for_statement -> FOR ID ASSIGN expression TO expression BY expression DO statement_list END_FOR SEMICOLON .)
    PLUS            reduce using rule 79 (for_statement -> FOR ID ASSIGN expression TO expression BY expression DO statement_list END_FOR SEMICOLON .)
    INT_NUMBER      reduce using rule 79 (for_statement -> FOR ID ASSIGN expression TO expression BY expression DO statement_list END_FOR SEMICOLON .)
    TRUE            reduce using rule 79 (for_statement -> FOR ID ASSIGN expression TO expression BY expression DO statement_list END_FOR SEMICOLON .)
    FALSE           reduce using rule 79 (for_statement -> FOR ID ASSIGN expression TO expression BY expression DO statement_list END_FOR SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 79 (for_statement -> FOR ID ASSIGN expression TO expression BY expression DO statement_list END_FOR SEMICOLON .)
    STRING_NUMBER   reduce using rule 79 (for_statement -> FOR ID ASSIGN expression TO expression BY expression DO statement_list END_FOR SEMICOLON .)
    LOG             reduce using rule 79 (for_statement -> FOR ID ASSIGN expression TO expression BY expression DO statement_list END_FOR SEMICOLON .)
    LN              reduce using rule 79 (for_statement -> FOR ID ASSIGN expression TO expression BY expression DO statement_list END_FOR SEMICOLON .)
    EXP             reduce using rule 79 (for_statement -> FOR ID ASSIGN expression TO expression BY expression DO statement_list END_FOR SEMICOLON .)
    EQ_STRING       reduce using rule 79 (for_statement -> FOR ID ASSIGN expression TO expression BY expression DO statement_list END_FOR SEMICOLON .)
    END_FOR         reduce using rule 79 (for_statement -> FOR ID ASSIGN expression TO expression BY expression DO statement_list END_FOR SEMICOLON .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 173 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 173 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 173 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 173 resolved as shift
WARNING: shift/reduce conflict for AND in state 173 resolved as shift
WARNING: shift/reduce conflict for OR in state 173 resolved as shift
WARNING: shift/reduce conflict for XOR in state 173 resolved as shift
WARNING: shift/reduce conflict for LT in state 173 resolved as shift
WARNING: shift/reduce conflict for GT in state 173 resolved as shift
WARNING: shift/reduce conflict for LE in state 173 resolved as shift
WARNING: shift/reduce conflict for GE in state 173 resolved as shift
WARNING: shift/reduce conflict for EQ in state 173 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 229 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 231 resolved as shift
WARNING: shift/reduce conflict for ID in state 250 resolved as shift
WARNING: shift/reduce conflict for ID in state 268 resolved as shift
WARNING: reduce/reduce conflict in state 85 resolved using rule (expression -> ID)
WARNING: rejected rule (int_number -> ID) in state 85
WARNING: reduce/reduce conflict in state 85 resolved using rule (expression -> ID)
WARNING: rejected rule (float_number -> ID) in state 85
