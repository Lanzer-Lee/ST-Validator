
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDEleftLPARENRPARENrightNOTASSIGNleftANDORleftLTGTLEGEEQleftVAREND_VARCONSTEND_CONSTleftVAR_INPUTVAR_OUTPUTVAR_IN_OUTVAR_GLOBALAND ASSIGN BEGIN BOOL BY BYTE CASE COLON COMMA COMMENT CONST DIVIDE DO DOT DWORD ELSE ELSIF END_CASE END_CONST END_FOR END_FUNCTION END_FUNCTION_BLOCK END_IF END_PROGRAM END_VAR END_WHILE EQ EQ_STRING EXP FALSE FLOAT FLOAT_NUMBER FOR FUNCTION FUNCTION_BLOCK GE GT ID IF INT INT_NUMBER LBRACE LE LN LOG LPAREN LT MINUS MULTI_COMMENT NOT OF OR PLUS PROGRAM RBRACE REAL RPAREN RTC SEMICOLON SHARP STRING STRING_NUMBER THEN TIME TIMES TO TOF TON TP TRUE VAR VAR_GLOBAL VAR_INPUT VAR_IN_OUT VAR_OUTPUT WHILE XORmodule : program\n              | function_block_definition\n              | function_definition\n              | module function_block_definition\n              | module function_definition\n              | module program\n    program : PROGRAM ID var_list BEGIN statement_list END_PROGRAM\n               | PROGRAM ID var_list statement_list END_PROGRAM\n    function_block_definition : FUNCTION_BLOCK ID var_list BEGIN statement_list END_FUNCTION_BLOCK\n                                 | FUNCTION_BLOCK ID var_list statement_list END_FUNCTION_BLOCK\n    function_definition : FUNCTION ID COLON INT var_list statement_list END_FUNCTION\n                           | FUNCTION ID COLON BOOL var_list statement_list END_FUNCTION\n                           | FUNCTION ID COLON REAL var_list statement_list END_FUNCTION\n                           | FUNCTION ID COLON FLOAT var_list statement_list END_FUNCTION\n                           | FUNCTION ID COLON BYTE var_list statement_list END_FUNCTION\n    var_list : var_input\n                | var_output\n                | var\n                | var_in_out\n                | var_global\n                | const\n                | var_list var_input\n                | var_list var_output\n                | var_list var\n                | var_list var_in_out\n                | var_list var_global\n                | var_list const\n    var_output : VAR_OUTPUT declare_list END_VARvar_input : VAR_INPUT declare_list END_VARvar_in_out : VAR_IN_OUT declare_list END_VARvar : VAR declare_list END_VARconst : CONST declare_list END_CONSTvar_global : VAR_GLOBAL declare_list END_VARstatement_list :\n                      | statement_list assign_statement\n                      | statement_list while_statement\n                      | statement_list if_statement\n                      | statement_list for_statement\n                      | statement_list call_statement\n                      | statement_list case_statement\n    declare_list :\n                    | declare_list declare_int_statement\n                    | declare_list declare_float_statement\n                    | declare_list declare_timer_statement\n    declare_timer_statement : ID COLON TP SEMICOLON\n                               | ID COLON TON SEMICOLON\n                               | ID COLON TOF SEMICOLON\n                               | ID COLON RTC SEMICOLON\n    declare_int_statement : ID COLON INT ASSIGN int_number SEMICOLON\n                             | ID COLON BOOL ASSIGN int_number SEMICOLON\n                             | ID COLON BYTE ASSIGN int_number SEMICOLON\n                             | ID COLON TIME ASSIGN int_number SEMICOLON\n                             | ID COLON DWORD ASSIGN int_number SEMICOLON\n                             | ID COLON STRING ASSIGN string_number SEMICOLON\n                             | ID COLON BYTE ASSIGN ID SEMICOLON\n                             | ID COLON TIME ASSIGN ID SEMICOLON\n                             | ID COLON INT SEMICOLON\n                             | ID COLON BOOL SEMICOLON\n                             | ID COLON BYTE SEMICOLON\n                             | ID COLON TIME SEMICOLON\n                             | ID COLON DWORD SEMICOLON\n                             | ID COLON STRING SEMICOLON\n    declare_float_statement : ID COLON FLOAT ASSIGN float_number SEMICOLON\n                               | ID COLON FLOAT SEMICOLON\n                               | ID COLON REAL ASSIGN float_number SEMICOLON\n                               | ID COLON REAL SEMICOLON\n    case_statement : CASE ID OF case_list END_CASE SEMICOLONcase_list : expression COLON statement_list\n                 | case_list expression COLON statement_list\n    if_statement : IF expression THEN statement_list END_IF SEMICOLON\n                    | IF expression THEN statement_list elsif_statement_list END_IF SEMICOLON\n                    | IF expression THEN statement_list else_statement END_IF SEMICOLON\n                    | IF expression THEN statement_list elsif_statement_list else_statement END_IF SEMICOLON\n    elsif_statement_list : elsif_statement\n                            | elsif_statement_list elsif_statementelsif_statement : ELSIF expression THEN statement_listelse_statement : ELSE statement_listfor_statement : FOR ID ASSIGN expression TO expression DO statement_list END_FOR SEMICOLON\n                     | FOR ID ASSIGN expression TO expression BY expression DO statement_list END_FOR SEMICOLON\n    while_statement : WHILE expression DO statement_list END_WHILEassign_statement : ID ASSIGN expression SEMICOLONexpression : ID\n                  | int_number\n                  | float_number\n                  | string_number\n                  | log\n                  | exp\n                  | call\n                  | eq_string\n                  | expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression AND expression\n                  | expression OR expression\n                  | expression XOR expression\n                  | expression LT expression\n                  | expression GT expression\n                  | expression LE expression\n                  | expression GE expression\n                  | expression EQ expression\n                  | LPAREN expression RPAREN\n                  | NOT expression\n                  | MINUS expression\n                  | PLUS expression\n    call_statement : ID argument RPAREN SEMICOLONargument : LPAREN\n                | argument ID ASSIGN expression\n                | argument COMMA ID ASSIGN expression\n    call : ID DOT IDeq_string : EQ_STRING LPAREN ID COMMA ID RPARENexp : EXP LPAREN expression RPARENlog : LOG LPAREN expression RPAREN\n           | LN LPAREN expression RPAREN\n    int_number : INT_NUMBER\n                  | TRUE\n                  | FALSE\n                  | ID\n    float_number : FLOAT_NUMBER\n                    | ID\n    string_number : STRING_NUMBER'
    
_lr_action_items = {'PROGRAM':([0,1,2,3,4,8,9,10,52,74,80,110,157,158,159,160,161,],[5,5,-1,-2,-3,-4,-5,-6,-8,-10,-7,-9,-11,-12,-13,-14,-15,]),'FUNCTION_BLOCK':([0,1,2,3,4,8,9,10,52,74,80,110,157,158,159,160,161,],[6,6,-1,-2,-3,-4,-5,-6,-8,-10,-7,-9,-11,-12,-13,-14,-15,]),'FUNCTION':([0,1,2,3,4,8,9,10,52,74,80,110,157,158,159,160,161,],[7,7,-1,-2,-3,-4,-5,-6,-8,-10,-7,-9,-11,-12,-13,-14,-15,]),'$end':([1,2,3,4,8,9,10,52,74,80,110,157,158,159,160,161,],[0,-1,-2,-3,-4,-5,-6,-8,-10,-7,-9,-11,-12,-13,-14,-15,]),'ID':([5,6,7,14,15,16,17,18,19,20,21,22,23,24,25,26,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,50,53,54,55,56,57,58,59,60,61,62,63,64,65,66,68,69,70,71,72,73,75,76,77,78,79,81,82,83,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,111,112,113,114,115,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,137,138,139,140,141,142,143,144,162,163,164,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,185,187,189,190,191,192,193,194,195,196,197,198,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,220,221,222,225,238,240,245,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,264,265,266,267,268,269,270,271,274,275,276,278,],[11,12,13,-34,-16,-17,-18,-19,-20,-21,-41,-41,-41,-41,-41,-41,-34,-34,51,-22,-23,-24,-25,-26,-27,67,67,67,67,67,67,-34,51,51,-35,-36,-37,-38,-39,-40,85,85,107,108,-29,-42,-43,-44,-28,-31,-30,-33,-32,51,-34,-34,-34,-34,-34,85,117,-107,-82,-83,-84,-85,-86,-87,-88,-89,85,85,85,85,-115,-116,-117,-119,-121,51,51,51,51,51,165,-34,85,85,85,85,85,85,85,85,85,85,85,85,179,-105,-104,-103,85,85,85,184,-34,85,85,-81,85,-106,51,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-110,-102,51,85,226,-57,226,-58,229,-59,231,-60,226,-61,-62,235,-64,235,-66,-45,-46,-47,-48,-108,85,-80,-113,-114,-112,239,-34,85,85,-34,-109,-70,51,-67,-34,51,-49,-50,-55,-51,-56,-52,-53,-54,-63,-65,-111,-71,-72,-34,-34,85,51,-73,51,51,-34,-78,51,-79,]),'VAR_INPUT':([11,12,14,15,16,17,18,19,20,27,31,32,33,34,35,36,45,46,47,48,49,63,68,69,70,71,72,75,76,77,78,79,],[21,21,21,-16,-17,-18,-19,-20,-21,21,-22,-23,-24,-25,-26,-27,21,21,21,21,21,-29,-28,-31,-30,-33,-32,21,21,21,21,21,]),'VAR_OUTPUT':([11,12,14,15,16,17,18,19,20,27,31,32,33,34,35,36,45,46,47,48,49,63,68,69,70,71,72,75,76,77,78,79,],[22,22,22,-16,-17,-18,-19,-20,-21,22,-22,-23,-24,-25,-26,-27,22,22,22,22,22,-29,-28,-31,-30,-33,-32,22,22,22,22,22,]),'VAR':([11,12,14,15,16,17,18,19,20,27,31,32,33,34,35,36,45,46,47,48,49,63,68,69,70,71,72,75,76,77,78,79,],[23,23,23,-16,-17,-18,-19,-20,-21,23,-22,-23,-24,-25,-26,-27,23,23,23,23,23,-29,-28,-31,-30,-33,-32,23,23,23,23,23,]),'VAR_IN_OUT':([11,12,14,15,16,17,18,19,20,27,31,32,33,34,35,36,45,46,47,48,49,63,68,69,70,71,72,75,76,77,78,79,],[24,24,24,-16,-17,-18,-19,-20,-21,24,-22,-23,-24,-25,-26,-27,24,24,24,24,24,-29,-28,-31,-30,-33,-32,24,24,24,24,24,]),'VAR_GLOBAL':([11,12,14,15,16,17,18,19,20,27,31,32,33,34,35,36,45,46,47,48,49,63,68,69,70,71,72,75,76,77,78,79,],[25,25,25,-16,-17,-18,-19,-20,-21,25,-22,-23,-24,-25,-26,-27,25,25,25,25,25,-29,-28,-31,-30,-33,-32,25,25,25,25,25,]),'CONST':([11,12,14,15,16,17,18,19,20,27,31,32,33,34,35,36,45,46,47,48,49,63,68,69,70,71,72,75,76,77,78,79,],[26,26,26,-16,-17,-18,-19,-20,-21,26,-22,-23,-24,-25,-26,-27,26,26,26,26,26,-29,-28,-31,-30,-33,-32,26,26,26,26,26,]),'COLON':([13,67,85,86,87,88,89,90,91,92,97,98,99,100,101,134,135,137,167,168,169,170,171,172,173,174,175,176,177,178,179,180,188,212,213,214,224,261,],[28,109,-82,-83,-84,-85,-86,-87,-88,-89,-115,-116,-117,-119,-121,-105,-104,-103,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-110,-102,225,-113,-114,-112,249,-111,]),'BEGIN':([14,15,16,17,18,19,20,27,31,32,33,34,35,36,63,68,69,70,71,72,],[29,-16,-17,-18,-19,-20,-21,43,-22,-23,-24,-25,-26,-27,-29,-28,-31,-30,-33,-32,]),'END_PROGRAM':([14,15,16,17,18,19,20,29,30,31,32,33,34,35,36,50,53,54,55,56,57,58,63,68,69,70,71,72,162,164,211,240,248,262,264,269,275,278,],[-34,-16,-17,-18,-19,-20,-21,-34,52,-22,-23,-24,-25,-26,-27,80,-35,-36,-37,-38,-39,-40,-29,-28,-31,-30,-33,-32,-81,-106,-80,-70,-67,-71,-72,-73,-78,-79,]),'WHILE':([14,15,16,17,18,19,20,27,29,30,31,32,33,34,35,36,43,44,50,53,54,55,56,57,58,63,68,69,70,71,72,73,75,76,77,78,79,111,112,113,114,115,120,142,162,164,166,185,211,220,225,240,245,248,249,250,262,264,265,266,268,269,270,271,274,275,276,278,],[-34,-16,-17,-18,-19,-20,-21,-34,-34,59,-22,-23,-24,-25,-26,-27,-34,59,59,-35,-36,-37,-38,-39,-40,-29,-28,-31,-30,-33,-32,59,-34,-34,-34,-34,-34,59,59,59,59,59,-34,-34,-81,-106,59,59,-80,-34,-34,-70,59,-67,-34,59,-71,-72,-34,-34,59,-73,59,59,-34,-78,59,-79,]),'IF':([14,15,16,17,18,19,20,27,29,30,31,32,33,34,35,36,43,44,50,53,54,55,56,57,58,63,68,69,70,71,72,73,75,76,77,78,79,111,112,113,114,115,120,142,162,164,166,185,211,220,225,240,245,248,249,250,262,264,265,266,268,269,270,271,274,275,276,278,],[-34,-16,-17,-18,-19,-20,-21,-34,-34,60,-22,-23,-24,-25,-26,-27,-34,60,60,-35,-36,-37,-38,-39,-40,-29,-28,-31,-30,-33,-32,60,-34,-34,-34,-34,-34,60,60,60,60,60,-34,-34,-81,-106,60,60,-80,-34,-34,-70,60,-67,-34,60,-71,-72,-34,-34,60,-73,60,60,-34,-78,60,-79,]),'FOR':([14,15,16,17,18,19,20,27,29,30,31,32,33,34,35,36,43,44,50,53,54,55,56,57,58,63,68,69,70,71,72,73,75,76,77,78,79,111,112,113,114,115,120,142,162,164,166,185,211,220,225,240,245,248,249,250,262,264,265,266,268,269,270,271,274,275,276,278,],[-34,-16,-17,-18,-19,-20,-21,-34,-34,61,-22,-23,-24,-25,-26,-27,-34,61,61,-35,-36,-37,-38,-39,-40,-29,-28,-31,-30,-33,-32,61,-34,-34,-34,-34,-34,61,61,61,61,61,-34,-34,-81,-106,61,61,-80,-34,-34,-70,61,-67,-34,61,-71,-72,-34,-34,61,-73,61,61,-34,-78,61,-79,]),'CASE':([14,15,16,17,18,19,20,27,29,30,31,32,33,34,35,36,43,44,50,53,54,55,56,57,58,63,68,69,70,71,72,73,75,76,77,78,79,111,112,113,114,115,120,142,162,164,166,185,211,220,225,240,245,248,249,250,262,264,265,266,268,269,270,271,274,275,276,278,],[-34,-16,-17,-18,-19,-20,-21,-34,-34,62,-22,-23,-24,-25,-26,-27,-34,62,62,-35,-36,-37,-38,-39,-40,-29,-28,-31,-30,-33,-32,62,-34,-34,-34,-34,-34,62,62,62,62,62,-34,-34,-81,-106,62,62,-80,-34,-34,-70,62,-67,-34,62,-71,-72,-34,-34,62,-73,62,62,-34,-78,62,-79,]),'END_FUNCTION_BLOCK':([15,16,17,18,19,20,27,31,32,33,34,35,36,43,44,53,54,55,56,57,58,63,68,69,70,71,72,73,162,164,211,240,248,262,264,269,275,278,],[-16,-17,-18,-19,-20,-21,-34,-22,-23,-24,-25,-26,-27,-34,74,-35,-36,-37,-38,-39,-40,-29,-28,-31,-30,-33,-32,110,-81,-106,-80,-70,-67,-71,-72,-73,-78,-79,]),'END_FUNCTION':([15,16,17,18,19,20,31,32,33,34,35,36,53,54,55,56,57,58,63,68,69,70,71,72,75,76,77,78,79,111,112,113,114,115,162,164,211,240,248,262,264,269,275,278,],[-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-35,-36,-37,-38,-39,-40,-29,-28,-31,-30,-33,-32,-34,-34,-34,-34,-34,157,158,159,160,161,-81,-106,-80,-70,-67,-71,-72,-73,-78,-79,]),'END_VAR':([21,22,23,24,25,37,38,39,40,41,64,65,66,190,192,194,196,198,200,202,204,205,206,207,208,251,252,253,254,255,256,257,258,259,260,],[-41,-41,-41,-41,-41,63,68,69,70,71,-42,-43,-44,-57,-58,-59,-60,-61,-62,-64,-66,-45,-46,-47,-48,-49,-50,-55,-51,-56,-52,-53,-54,-63,-65,]),'END_CONST':([26,42,64,65,66,190,192,194,196,198,200,202,204,205,206,207,208,251,252,253,254,255,256,257,258,259,260,],[-41,72,-42,-43,-44,-57,-58,-59,-60,-61,-62,-64,-66,-45,-46,-47,-48,-49,-50,-55,-51,-56,-52,-53,-54,-63,-65,]),'INT':([28,109,],[45,145,]),'BOOL':([28,109,],[46,146,]),'REAL':([28,109,],[47,152,]),'FLOAT':([28,109,],[48,151,]),'BYTE':([28,109,],[49,147,]),'ASSIGN':([51,107,117,145,146,147,148,149,150,151,152,165,],[81,143,163,189,191,193,195,197,199,201,203,210,]),'LPAREN':([51,53,54,55,56,57,58,59,60,81,93,94,95,96,102,103,104,105,121,122,123,124,125,126,127,128,129,130,131,132,138,139,140,143,144,162,163,164,187,210,211,221,222,225,240,248,249,250,262,264,267,268,269,275,278,],[83,-35,-36,-37,-38,-39,-40,95,95,95,95,95,95,95,138,139,140,141,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,-81,95,-106,95,95,-80,95,95,-34,-70,-67,-34,-68,-71,-72,95,-69,-73,-78,-79,]),'END_WHILE':([53,54,55,56,57,58,120,162,164,166,211,240,248,262,264,269,275,278,],[-35,-36,-37,-38,-39,-40,-34,-81,-106,211,-80,-70,-67,-71,-72,-73,-78,-79,]),'END_IF':([53,54,55,56,57,58,142,162,164,185,211,217,218,219,220,240,242,243,245,248,262,264,265,269,270,275,278,],[-35,-36,-37,-38,-39,-40,-34,-81,-106,216,-80,241,244,-74,-34,-70,263,-75,-77,-67,-71,-72,-34,-73,-76,-78,-79,]),'ELSE':([53,54,55,56,57,58,142,162,164,185,211,217,219,240,243,248,262,264,265,269,270,275,278,],[-35,-36,-37,-38,-39,-40,-34,-81,-106,220,-80,220,-74,-70,-75,-67,-71,-72,-34,-73,-76,-78,-79,]),'ELSIF':([53,54,55,56,57,58,142,162,164,185,211,217,219,240,243,248,262,264,265,269,270,275,278,],[-35,-36,-37,-38,-39,-40,-34,-81,-106,221,-80,221,-74,-70,-75,-67,-71,-72,-34,-73,-76,-78,-79,]),'END_CASE':([53,54,55,56,57,58,162,164,187,211,225,240,248,249,250,262,264,268,269,275,278,],[-35,-36,-37,-38,-39,-40,-81,-106,223,-80,-34,-70,-67,-34,-68,-71,-72,-69,-73,-78,-79,]),'NOT':([53,54,55,56,57,58,59,60,81,93,94,95,96,121,122,123,124,125,126,127,128,129,130,131,132,138,139,140,143,144,162,163,164,187,210,211,221,222,225,240,248,249,250,262,264,267,268,269,275,278,],[-35,-36,-37,-38,-39,-40,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,-81,96,-106,96,96,-80,96,96,-34,-70,-67,-34,-68,-71,-72,96,-69,-73,-78,-79,]),'MINUS':([53,54,55,56,57,58,59,60,81,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,106,116,121,122,123,124,125,126,127,128,129,130,131,132,134,135,136,137,138,139,140,143,144,162,163,164,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,186,187,188,209,210,211,212,213,214,221,222,224,225,238,240,246,247,248,249,250,261,262,264,267,268,269,272,275,278,],[-35,-36,-37,-38,-39,-40,94,94,94,122,-82,-83,-84,-85,-86,-87,-88,-89,94,94,94,94,-115,-116,-117,-119,-121,122,122,94,94,94,94,94,94,94,94,94,94,94,94,-105,-104,122,-103,94,94,94,94,94,-81,94,-106,-90,-91,-92,-93,-94,-95,122,-97,-98,-99,-100,-101,-110,-102,122,122,122,122,94,122,122,94,-80,-113,-114,-112,94,94,122,-34,122,-70,122,122,-67,-34,-68,-111,-71,-72,94,-69,-73,122,-78,-79,]),'PLUS':([53,54,55,56,57,58,59,60,81,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,106,116,121,122,123,124,125,126,127,128,129,130,131,132,134,135,136,137,138,139,140,143,144,162,163,164,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,186,187,188,209,210,211,212,213,214,221,222,224,225,238,240,246,247,248,249,250,261,262,264,267,268,269,272,275,278,],[-35,-36,-37,-38,-39,-40,93,93,93,121,-82,-83,-84,-85,-86,-87,-88,-89,93,93,93,93,-115,-116,-117,-119,-121,121,121,93,93,93,93,93,93,93,93,93,93,93,93,-105,-104,121,-103,93,93,93,93,93,-81,93,-106,-90,-91,-92,-93,-94,-95,121,-97,-98,-99,-100,-101,-110,-102,121,121,121,121,93,121,121,93,-80,-113,-114,-112,93,93,121,-34,121,-70,121,121,-67,-34,-68,-111,-71,-72,93,-69,-73,121,-78,-79,]),'INT_NUMBER':([53,54,55,56,57,58,59,60,81,93,94,95,96,121,122,123,124,125,126,127,128,129,130,131,132,138,139,140,143,144,162,163,164,187,189,191,193,195,197,210,211,221,222,225,240,248,249,250,262,264,267,268,269,275,278,],[-35,-36,-37,-38,-39,-40,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,-81,97,-106,97,97,97,97,97,97,97,-80,97,97,-34,-70,-67,-34,-68,-71,-72,97,-69,-73,-78,-79,]),'TRUE':([53,54,55,56,57,58,59,60,81,93,94,95,96,121,122,123,124,125,126,127,128,129,130,131,132,138,139,140,143,144,162,163,164,187,189,191,193,195,197,210,211,221,222,225,240,248,249,250,262,264,267,268,269,275,278,],[-35,-36,-37,-38,-39,-40,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,-81,98,-106,98,98,98,98,98,98,98,-80,98,98,-34,-70,-67,-34,-68,-71,-72,98,-69,-73,-78,-79,]),'FALSE':([53,54,55,56,57,58,59,60,81,93,94,95,96,121,122,123,124,125,126,127,128,129,130,131,132,138,139,140,143,144,162,163,164,187,189,191,193,195,197,210,211,221,222,225,240,248,249,250,262,264,267,268,269,275,278,],[-35,-36,-37,-38,-39,-40,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,-81,99,-106,99,99,99,99,99,99,99,-80,99,99,-34,-70,-67,-34,-68,-71,-72,99,-69,-73,-78,-79,]),'FLOAT_NUMBER':([53,54,55,56,57,58,59,60,81,93,94,95,96,121,122,123,124,125,126,127,128,129,130,131,132,138,139,140,143,144,162,163,164,187,201,203,210,211,221,222,225,240,248,249,250,262,264,267,268,269,275,278,],[-35,-36,-37,-38,-39,-40,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,-81,100,-106,100,100,100,100,-80,100,100,-34,-70,-67,-34,-68,-71,-72,100,-69,-73,-78,-79,]),'STRING_NUMBER':([53,54,55,56,57,58,59,60,81,93,94,95,96,121,122,123,124,125,126,127,128,129,130,131,132,138,139,140,143,144,162,163,164,187,199,210,211,221,222,225,240,248,249,250,262,264,267,268,269,275,278,],[-35,-36,-37,-38,-39,-40,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,-81,101,-106,101,101,101,-80,101,101,-34,-70,-67,-34,-68,-71,-72,101,-69,-73,-78,-79,]),'LOG':([53,54,55,56,57,58,59,60,81,93,94,95,96,121,122,123,124,125,126,127,128,129,130,131,132,138,139,140,143,144,162,163,164,187,210,211,221,222,225,240,248,249,250,262,264,267,268,269,275,278,],[-35,-36,-37,-38,-39,-40,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,-81,102,-106,102,102,-80,102,102,-34,-70,-67,-34,-68,-71,-72,102,-69,-73,-78,-79,]),'LN':([53,54,55,56,57,58,59,60,81,93,94,95,96,121,122,123,124,125,126,127,128,129,130,131,132,138,139,140,143,144,162,163,164,187,210,211,221,222,225,240,248,249,250,262,264,267,268,269,275,278,],[-35,-36,-37,-38,-39,-40,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,-81,103,-106,103,103,-80,103,103,-34,-70,-67,-34,-68,-71,-72,103,-69,-73,-78,-79,]),'EXP':([53,54,55,56,57,58,59,60,81,93,94,95,96,121,122,123,124,125,126,127,128,129,130,131,132,138,139,140,143,144,162,163,164,187,210,211,221,222,225,240,248,249,250,262,264,267,268,269,275,278,],[-35,-36,-37,-38,-39,-40,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,-81,104,-106,104,104,-80,104,104,-34,-70,-67,-34,-68,-71,-72,104,-69,-73,-78,-79,]),'EQ_STRING':([53,54,55,56,57,58,59,60,81,93,94,95,96,121,122,123,124,125,126,127,128,129,130,131,132,138,139,140,143,144,162,163,164,187,210,211,221,222,225,240,248,249,250,262,264,267,268,269,275,278,],[-35,-36,-37,-38,-39,-40,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,-81,105,-106,105,105,-80,105,105,-34,-70,-67,-34,-68,-71,-72,105,-69,-73,-78,-79,]),'END_FOR':([53,54,55,56,57,58,162,164,211,240,248,262,264,266,269,271,274,275,276,278,],[-35,-36,-37,-38,-39,-40,-81,-106,-80,-70,-67,-71,-72,-34,-73,273,-34,-78,277,-79,]),'RPAREN':([82,83,85,86,87,88,89,90,91,92,97,98,99,100,101,134,135,136,137,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,209,212,213,214,238,239,261,],[118,-107,-82,-83,-84,-85,-86,-87,-88,-89,-115,-116,-117,-119,-121,-105,-104,180,-103,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-110,-102,212,213,214,-108,-113,-114,-112,-109,261,-111,]),'COMMA':([82,83,85,86,87,88,89,90,91,92,97,98,99,100,101,134,135,137,167,168,169,170,171,172,173,174,175,176,177,178,179,180,184,209,212,213,214,238,261,],[119,-107,-82,-83,-84,-85,-86,-87,-88,-89,-115,-116,-117,-119,-121,-105,-104,-103,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-110,-102,215,-108,-113,-114,-112,-109,-111,]),'DO':([84,85,86,87,88,89,90,91,92,97,98,99,100,101,134,135,137,167,168,169,170,171,172,173,174,175,176,177,178,179,180,212,213,214,247,261,272,],[120,-82,-83,-84,-85,-86,-87,-88,-89,-115,-116,-117,-119,-121,-105,-104,-103,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-110,-102,-113,-114,-112,266,-111,274,]),'TIMES':([84,85,86,87,88,89,90,91,92,97,98,99,100,101,106,116,134,135,136,137,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,186,188,209,212,213,214,224,238,246,247,261,272,],[123,-82,-83,-84,-85,-86,-87,-88,-89,-115,-116,-117,-119,-121,123,123,123,123,123,-103,123,123,-92,-93,-94,-95,123,-97,-98,-99,-100,-101,-110,-102,123,123,123,123,123,123,-113,-114,-112,123,123,123,123,-111,123,]),'DIVIDE':([84,85,86,87,88,89,90,91,92,97,98,99,100,101,106,116,134,135,136,137,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,186,188,209,212,213,214,224,238,246,247,261,272,],[124,-82,-83,-84,-85,-86,-87,-88,-89,-115,-116,-117,-119,-121,124,124,124,124,124,-103,124,124,-92,-93,-94,-95,124,-97,-98,-99,-100,-101,-110,-102,124,124,124,124,124,124,-113,-114,-112,124,124,124,124,-111,124,]),'AND':([84,85,86,87,88,89,90,91,92,97,98,99,100,101,106,116,134,135,136,137,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,186,188,209,212,213,214,224,238,246,247,261,272,],[125,-82,-83,-84,-85,-86,-87,-88,-89,-115,-116,-117,-119,-121,125,125,125,125,125,125,125,125,125,125,-94,-95,125,-97,-98,-99,-100,-101,-110,-102,125,125,125,125,125,125,-113,-114,-112,125,125,125,125,-111,125,]),'OR':([84,85,86,87,88,89,90,91,92,97,98,99,100,101,106,116,134,135,136,137,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,186,188,209,212,213,214,224,238,246,247,261,272,],[126,-82,-83,-84,-85,-86,-87,-88,-89,-115,-116,-117,-119,-121,126,126,126,126,126,126,126,126,126,126,-94,-95,126,-97,-98,-99,-100,-101,-110,-102,126,126,126,126,126,126,-113,-114,-112,126,126,126,126,-111,126,]),'XOR':([84,85,86,87,88,89,90,91,92,97,98,99,100,101,106,116,134,135,136,137,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,186,188,209,212,213,214,224,238,246,247,261,272,],[127,-82,-83,-84,-85,-86,-87,-88,-89,-115,-116,-117,-119,-121,127,127,-105,-104,127,-103,-90,-91,-92,-93,-94,-95,127,-97,-98,-99,-100,-101,-110,-102,127,127,127,127,127,127,-113,-114,-112,127,127,127,127,-111,127,]),'LT':([84,85,86,87,88,89,90,91,92,97,98,99,100,101,106,116,134,135,136,137,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,186,188,209,212,213,214,224,238,246,247,261,272,],[128,-82,-83,-84,-85,-86,-87,-88,-89,-115,-116,-117,-119,-121,128,128,128,128,128,128,128,128,128,128,128,128,128,-97,-98,-99,-100,-101,-110,-102,128,128,128,128,128,128,-113,-114,-112,128,128,128,128,-111,128,]),'GT':([84,85,86,87,88,89,90,91,92,97,98,99,100,101,106,116,134,135,136,137,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,186,188,209,212,213,214,224,238,246,247,261,272,],[129,-82,-83,-84,-85,-86,-87,-88,-89,-115,-116,-117,-119,-121,129,129,129,129,129,129,129,129,129,129,129,129,129,-97,-98,-99,-100,-101,-110,-102,129,129,129,129,129,129,-113,-114,-112,129,129,129,129,-111,129,]),'LE':([84,85,86,87,88,89,90,91,92,97,98,99,100,101,106,116,134,135,136,137,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,186,188,209,212,213,214,224,238,246,247,261,272,],[130,-82,-83,-84,-85,-86,-87,-88,-89,-115,-116,-117,-119,-121,130,130,130,130,130,130,130,130,130,130,130,130,130,-97,-98,-99,-100,-101,-110,-102,130,130,130,130,130,130,-113,-114,-112,130,130,130,130,-111,130,]),'GE':([84,85,86,87,88,89,90,91,92,97,98,99,100,101,106,116,134,135,136,137,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,186,188,209,212,213,214,224,238,246,247,261,272,],[131,-82,-83,-84,-85,-86,-87,-88,-89,-115,-116,-117,-119,-121,131,131,131,131,131,131,131,131,131,131,131,131,131,-97,-98,-99,-100,-101,-110,-102,131,131,131,131,131,131,-113,-114,-112,131,131,131,131,-111,131,]),'EQ':([84,85,86,87,88,89,90,91,92,97,98,99,100,101,106,116,134,135,136,137,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,186,188,209,212,213,214,224,238,246,247,261,272,],[132,-82,-83,-84,-85,-86,-87,-88,-89,-115,-116,-117,-119,-121,132,132,132,132,132,132,132,132,132,132,132,132,132,-97,-98,-99,-100,-101,-110,-102,132,132,132,132,132,132,-113,-114,-112,132,132,132,132,-111,132,]),'THEN':([85,86,87,88,89,90,91,92,97,98,99,100,101,106,134,135,137,167,168,169,170,171,172,173,174,175,176,177,178,179,180,212,213,214,246,261,],[-82,-83,-84,-85,-86,-87,-88,-89,-115,-116,-117,-119,-121,142,-105,-104,-103,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-110,-102,-113,-114,-112,265,-111,]),'SEMICOLON':([85,86,87,88,89,90,91,92,97,98,99,100,101,116,118,134,135,137,145,146,147,148,149,150,151,152,153,154,155,156,167,168,169,170,171,172,173,174,175,176,177,178,179,180,212,213,214,216,223,226,227,228,229,230,231,232,233,234,235,236,237,241,244,261,263,273,277,],[-82,-83,-84,-85,-86,-87,-88,-89,-115,-116,-117,-119,-121,162,164,-105,-104,-103,190,192,194,196,198,200,202,204,205,206,207,208,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-110,-102,-113,-114,-112,240,248,-118,251,252,253,254,255,256,257,258,-120,259,260,262,264,-111,269,275,278,]),'TO':([85,86,87,88,89,90,91,92,97,98,99,100,101,134,135,137,167,168,169,170,171,172,173,174,175,176,177,178,179,180,186,212,213,214,261,],[-82,-83,-84,-85,-86,-87,-88,-89,-115,-116,-117,-119,-121,-105,-104,-103,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-110,-102,222,-113,-114,-112,-111,]),'BY':([85,86,87,88,89,90,91,92,97,98,99,100,101,134,135,137,167,168,169,170,171,172,173,174,175,176,177,178,179,180,212,213,214,247,261,],[-82,-83,-84,-85,-86,-87,-88,-89,-115,-116,-117,-119,-121,-105,-104,-103,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-110,-102,-113,-114,-112,267,-111,]),'DOT':([85,],[133,]),'OF':([108,],[144,]),'TIME':([109,],[148,]),'DWORD':([109,],[149,]),'STRING':([109,],[150,]),'TP':([109,],[153,]),'TON':([109,],[154,]),'TOF':([109,],[155,]),'RTC':([109,],[156,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'module':([0,],[1,]),'program':([0,1,],[2,10,]),'function_block_definition':([0,1,],[3,8,]),'function_definition':([0,1,],[4,9,]),'var_list':([11,12,45,46,47,48,49,],[14,27,75,76,77,78,79,]),'var_input':([11,12,14,27,45,46,47,48,49,75,76,77,78,79,],[15,15,31,31,15,15,15,15,15,31,31,31,31,31,]),'var_output':([11,12,14,27,45,46,47,48,49,75,76,77,78,79,],[16,16,32,32,16,16,16,16,16,32,32,32,32,32,]),'var':([11,12,14,27,45,46,47,48,49,75,76,77,78,79,],[17,17,33,33,17,17,17,17,17,33,33,33,33,33,]),'var_in_out':([11,12,14,27,45,46,47,48,49,75,76,77,78,79,],[18,18,34,34,18,18,18,18,18,34,34,34,34,34,]),'var_global':([11,12,14,27,45,46,47,48,49,75,76,77,78,79,],[19,19,35,35,19,19,19,19,19,35,35,35,35,35,]),'const':([11,12,14,27,45,46,47,48,49,75,76,77,78,79,],[20,20,36,36,20,20,20,20,20,36,36,36,36,36,]),'statement_list':([14,27,29,43,75,76,77,78,79,120,142,220,225,249,265,266,274,],[30,44,50,73,111,112,113,114,115,166,185,245,250,268,270,271,276,]),'declare_list':([21,22,23,24,25,26,],[37,38,39,40,41,42,]),'assign_statement':([30,44,50,73,111,112,113,114,115,166,185,245,250,268,270,271,276,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'while_statement':([30,44,50,73,111,112,113,114,115,166,185,245,250,268,270,271,276,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'if_statement':([30,44,50,73,111,112,113,114,115,166,185,245,250,268,270,271,276,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'for_statement':([30,44,50,73,111,112,113,114,115,166,185,245,250,268,270,271,276,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'call_statement':([30,44,50,73,111,112,113,114,115,166,185,245,250,268,270,271,276,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'case_statement':([30,44,50,73,111,112,113,114,115,166,185,245,250,268,270,271,276,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'declare_int_statement':([37,38,39,40,41,42,],[64,64,64,64,64,64,]),'declare_float_statement':([37,38,39,40,41,42,],[65,65,65,65,65,65,]),'declare_timer_statement':([37,38,39,40,41,42,],[66,66,66,66,66,66,]),'argument':([51,],[82,]),'expression':([59,60,81,93,94,95,96,121,122,123,124,125,126,127,128,129,130,131,132,138,139,140,143,144,163,187,210,221,222,267,],[84,106,116,134,135,136,137,167,168,169,170,171,172,173,174,175,176,177,178,181,182,183,186,188,209,224,238,246,247,272,]),'int_number':([59,60,81,93,94,95,96,121,122,123,124,125,126,127,128,129,130,131,132,138,139,140,143,144,163,187,189,191,193,195,197,210,221,222,267,],[86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,227,228,230,232,233,86,86,86,86,]),'float_number':([59,60,81,93,94,95,96,121,122,123,124,125,126,127,128,129,130,131,132,138,139,140,143,144,163,187,201,203,210,221,222,267,],[87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,236,237,87,87,87,87,]),'string_number':([59,60,81,93,94,95,96,121,122,123,124,125,126,127,128,129,130,131,132,138,139,140,143,144,163,187,199,210,221,222,267,],[88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,234,88,88,88,88,]),'log':([59,60,81,93,94,95,96,121,122,123,124,125,126,127,128,129,130,131,132,138,139,140,143,144,163,187,210,221,222,267,],[89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,]),'exp':([59,60,81,93,94,95,96,121,122,123,124,125,126,127,128,129,130,131,132,138,139,140,143,144,163,187,210,221,222,267,],[90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,]),'call':([59,60,81,93,94,95,96,121,122,123,124,125,126,127,128,129,130,131,132,138,139,140,143,144,163,187,210,221,222,267,],[91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,]),'eq_string':([59,60,81,93,94,95,96,121,122,123,124,125,126,127,128,129,130,131,132,138,139,140,143,144,163,187,210,221,222,267,],[92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,]),'case_list':([144,],[187,]),'elsif_statement_list':([185,],[217,]),'else_statement':([185,217,],[218,242,]),'elsif_statement':([185,217,],[219,243,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> module","S'",1,None,None,None),
  ('module -> program','module',1,'p_module','interpreter.py',180),
  ('module -> function_block_definition','module',1,'p_module','interpreter.py',181),
  ('module -> function_definition','module',1,'p_module','interpreter.py',182),
  ('module -> module function_block_definition','module',2,'p_module','interpreter.py',183),
  ('module -> module function_definition','module',2,'p_module','interpreter.py',184),
  ('module -> module program','module',2,'p_module','interpreter.py',185),
  ('program -> PROGRAM ID var_list BEGIN statement_list END_PROGRAM','program',6,'p_program','interpreter.py',194),
  ('program -> PROGRAM ID var_list statement_list END_PROGRAM','program',5,'p_program','interpreter.py',195),
  ('function_block_definition -> FUNCTION_BLOCK ID var_list BEGIN statement_list END_FUNCTION_BLOCK','function_block_definition',6,'p_function_block_definition','interpreter.py',205),
  ('function_block_definition -> FUNCTION_BLOCK ID var_list statement_list END_FUNCTION_BLOCK','function_block_definition',5,'p_function_block_definition','interpreter.py',206),
  ('function_definition -> FUNCTION ID COLON INT var_list statement_list END_FUNCTION','function_definition',7,'p_function_definition','interpreter.py',283),
  ('function_definition -> FUNCTION ID COLON BOOL var_list statement_list END_FUNCTION','function_definition',7,'p_function_definition','interpreter.py',284),
  ('function_definition -> FUNCTION ID COLON REAL var_list statement_list END_FUNCTION','function_definition',7,'p_function_definition','interpreter.py',285),
  ('function_definition -> FUNCTION ID COLON FLOAT var_list statement_list END_FUNCTION','function_definition',7,'p_function_definition','interpreter.py',286),
  ('function_definition -> FUNCTION ID COLON BYTE var_list statement_list END_FUNCTION','function_definition',7,'p_function_definition','interpreter.py',287),
  ('var_list -> var_input','var_list',1,'p_var_list','interpreter.py',349),
  ('var_list -> var_output','var_list',1,'p_var_list','interpreter.py',350),
  ('var_list -> var','var_list',1,'p_var_list','interpreter.py',351),
  ('var_list -> var_in_out','var_list',1,'p_var_list','interpreter.py',352),
  ('var_list -> var_global','var_list',1,'p_var_list','interpreter.py',353),
  ('var_list -> const','var_list',1,'p_var_list','interpreter.py',354),
  ('var_list -> var_list var_input','var_list',2,'p_var_list','interpreter.py',355),
  ('var_list -> var_list var_output','var_list',2,'p_var_list','interpreter.py',356),
  ('var_list -> var_list var','var_list',2,'p_var_list','interpreter.py',357),
  ('var_list -> var_list var_in_out','var_list',2,'p_var_list','interpreter.py',358),
  ('var_list -> var_list var_global','var_list',2,'p_var_list','interpreter.py',359),
  ('var_list -> var_list const','var_list',2,'p_var_list','interpreter.py',360),
  ('var_output -> VAR_OUTPUT declare_list END_VAR','var_output',3,'p_var_output','interpreter.py',369),
  ('var_input -> VAR_INPUT declare_list END_VAR','var_input',3,'p_var_input','interpreter.py',374),
  ('var_in_out -> VAR_IN_OUT declare_list END_VAR','var_in_out',3,'p_var_in_out','interpreter.py',379),
  ('var -> VAR declare_list END_VAR','var',3,'p_var','interpreter.py',384),
  ('const -> CONST declare_list END_CONST','const',3,'p_const','interpreter.py',389),
  ('var_global -> VAR_GLOBAL declare_list END_VAR','var_global',3,'p_var_global','interpreter.py',394),
  ('statement_list -> <empty>','statement_list',0,'p_statement_list','interpreter.py',399),
  ('statement_list -> statement_list assign_statement','statement_list',2,'p_statement_list','interpreter.py',400),
  ('statement_list -> statement_list while_statement','statement_list',2,'p_statement_list','interpreter.py',401),
  ('statement_list -> statement_list if_statement','statement_list',2,'p_statement_list','interpreter.py',402),
  ('statement_list -> statement_list for_statement','statement_list',2,'p_statement_list','interpreter.py',403),
  ('statement_list -> statement_list call_statement','statement_list',2,'p_statement_list','interpreter.py',404),
  ('statement_list -> statement_list case_statement','statement_list',2,'p_statement_list','interpreter.py',405),
  ('declare_list -> <empty>','declare_list',0,'p_declare_list','interpreter.py',418),
  ('declare_list -> declare_list declare_int_statement','declare_list',2,'p_declare_list','interpreter.py',419),
  ('declare_list -> declare_list declare_float_statement','declare_list',2,'p_declare_list','interpreter.py',420),
  ('declare_list -> declare_list declare_timer_statement','declare_list',2,'p_declare_list','interpreter.py',421),
  ('declare_timer_statement -> ID COLON TP SEMICOLON','declare_timer_statement',4,'p_declare_timer_statement','interpreter.py',434),
  ('declare_timer_statement -> ID COLON TON SEMICOLON','declare_timer_statement',4,'p_declare_timer_statement','interpreter.py',435),
  ('declare_timer_statement -> ID COLON TOF SEMICOLON','declare_timer_statement',4,'p_declare_timer_statement','interpreter.py',436),
  ('declare_timer_statement -> ID COLON RTC SEMICOLON','declare_timer_statement',4,'p_declare_timer_statement','interpreter.py',437),
  ('declare_int_statement -> ID COLON INT ASSIGN int_number SEMICOLON','declare_int_statement',6,'p_declare_int_statement','interpreter.py',458),
  ('declare_int_statement -> ID COLON BOOL ASSIGN int_number SEMICOLON','declare_int_statement',6,'p_declare_int_statement','interpreter.py',459),
  ('declare_int_statement -> ID COLON BYTE ASSIGN int_number SEMICOLON','declare_int_statement',6,'p_declare_int_statement','interpreter.py',460),
  ('declare_int_statement -> ID COLON TIME ASSIGN int_number SEMICOLON','declare_int_statement',6,'p_declare_int_statement','interpreter.py',461),
  ('declare_int_statement -> ID COLON DWORD ASSIGN int_number SEMICOLON','declare_int_statement',6,'p_declare_int_statement','interpreter.py',462),
  ('declare_int_statement -> ID COLON STRING ASSIGN string_number SEMICOLON','declare_int_statement',6,'p_declare_int_statement','interpreter.py',463),
  ('declare_int_statement -> ID COLON BYTE ASSIGN ID SEMICOLON','declare_int_statement',6,'p_declare_int_statement','interpreter.py',464),
  ('declare_int_statement -> ID COLON TIME ASSIGN ID SEMICOLON','declare_int_statement',6,'p_declare_int_statement','interpreter.py',465),
  ('declare_int_statement -> ID COLON INT SEMICOLON','declare_int_statement',4,'p_declare_int_statement','interpreter.py',466),
  ('declare_int_statement -> ID COLON BOOL SEMICOLON','declare_int_statement',4,'p_declare_int_statement','interpreter.py',467),
  ('declare_int_statement -> ID COLON BYTE SEMICOLON','declare_int_statement',4,'p_declare_int_statement','interpreter.py',468),
  ('declare_int_statement -> ID COLON TIME SEMICOLON','declare_int_statement',4,'p_declare_int_statement','interpreter.py',469),
  ('declare_int_statement -> ID COLON DWORD SEMICOLON','declare_int_statement',4,'p_declare_int_statement','interpreter.py',470),
  ('declare_int_statement -> ID COLON STRING SEMICOLON','declare_int_statement',4,'p_declare_int_statement','interpreter.py',471),
  ('declare_float_statement -> ID COLON FLOAT ASSIGN float_number SEMICOLON','declare_float_statement',6,'p_declare_float_statement','interpreter.py',494),
  ('declare_float_statement -> ID COLON FLOAT SEMICOLON','declare_float_statement',4,'p_declare_float_statement','interpreter.py',495),
  ('declare_float_statement -> ID COLON REAL ASSIGN float_number SEMICOLON','declare_float_statement',6,'p_declare_float_statement','interpreter.py',496),
  ('declare_float_statement -> ID COLON REAL SEMICOLON','declare_float_statement',4,'p_declare_float_statement','interpreter.py',497),
  ('case_statement -> CASE ID OF case_list END_CASE SEMICOLON','case_statement',6,'p_case_statement','interpreter.py',511),
  ('case_list -> expression COLON statement_list','case_list',3,'p_case_list','interpreter.py',523),
  ('case_list -> case_list expression COLON statement_list','case_list',4,'p_case_list','interpreter.py',524),
  ('if_statement -> IF expression THEN statement_list END_IF SEMICOLON','if_statement',6,'p_if_statement','interpreter.py',535),
  ('if_statement -> IF expression THEN statement_list elsif_statement_list END_IF SEMICOLON','if_statement',7,'p_if_statement','interpreter.py',536),
  ('if_statement -> IF expression THEN statement_list else_statement END_IF SEMICOLON','if_statement',7,'p_if_statement','interpreter.py',537),
  ('if_statement -> IF expression THEN statement_list elsif_statement_list else_statement END_IF SEMICOLON','if_statement',8,'p_if_statement','interpreter.py',538),
  ('elsif_statement_list -> elsif_statement','elsif_statement_list',1,'p_elsif_statement_list','interpreter.py',554),
  ('elsif_statement_list -> elsif_statement_list elsif_statement','elsif_statement_list',2,'p_elsif_statement_list','interpreter.py',555),
  ('elsif_statement -> ELSIF expression THEN statement_list','elsif_statement',4,'p_elsif_statement','interpreter.py',581),
  ('else_statement -> ELSE statement_list','else_statement',2,'p_else_statement','interpreter.py',586),
  ('for_statement -> FOR ID ASSIGN expression TO expression DO statement_list END_FOR SEMICOLON','for_statement',10,'p_for_statement','interpreter.py',591),
  ('for_statement -> FOR ID ASSIGN expression TO expression BY expression DO statement_list END_FOR SEMICOLON','for_statement',12,'p_for_statement','interpreter.py',592),
  ('while_statement -> WHILE expression DO statement_list END_WHILE','while_statement',5,'p_while_statement','interpreter.py',604),
  ('assign_statement -> ID ASSIGN expression SEMICOLON','assign_statement',4,'p_assign_statement','interpreter.py',609),
  ('expression -> ID','expression',1,'p_expression','interpreter.py',614),
  ('expression -> int_number','expression',1,'p_expression','interpreter.py',615),
  ('expression -> float_number','expression',1,'p_expression','interpreter.py',616),
  ('expression -> string_number','expression',1,'p_expression','interpreter.py',617),
  ('expression -> log','expression',1,'p_expression','interpreter.py',618),
  ('expression -> exp','expression',1,'p_expression','interpreter.py',619),
  ('expression -> call','expression',1,'p_expression','interpreter.py',620),
  ('expression -> eq_string','expression',1,'p_expression','interpreter.py',621),
  ('expression -> expression PLUS expression','expression',3,'p_expression','interpreter.py',622),
  ('expression -> expression MINUS expression','expression',3,'p_expression','interpreter.py',623),
  ('expression -> expression TIMES expression','expression',3,'p_expression','interpreter.py',624),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','interpreter.py',625),
  ('expression -> expression AND expression','expression',3,'p_expression','interpreter.py',626),
  ('expression -> expression OR expression','expression',3,'p_expression','interpreter.py',627),
  ('expression -> expression XOR expression','expression',3,'p_expression','interpreter.py',628),
  ('expression -> expression LT expression','expression',3,'p_expression','interpreter.py',629),
  ('expression -> expression GT expression','expression',3,'p_expression','interpreter.py',630),
  ('expression -> expression LE expression','expression',3,'p_expression','interpreter.py',631),
  ('expression -> expression GE expression','expression',3,'p_expression','interpreter.py',632),
  ('expression -> expression EQ expression','expression',3,'p_expression','interpreter.py',633),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression','interpreter.py',634),
  ('expression -> NOT expression','expression',2,'p_expression','interpreter.py',635),
  ('expression -> MINUS expression','expression',2,'p_expression','interpreter.py',636),
  ('expression -> PLUS expression','expression',2,'p_expression','interpreter.py',637),
  ('call_statement -> ID argument RPAREN SEMICOLON','call_statement',4,'p_call_statement','interpreter.py',682),
  ('argument -> LPAREN','argument',1,'p_arugument','interpreter.py',696),
  ('argument -> argument ID ASSIGN expression','argument',4,'p_arugument','interpreter.py',697),
  ('argument -> argument COMMA ID ASSIGN expression','argument',5,'p_arugument','interpreter.py',698),
  ('call -> ID DOT ID','call',3,'p_call','interpreter.py',711),
  ('eq_string -> EQ_STRING LPAREN ID COMMA ID RPAREN','eq_string',6,'p_eq_string','interpreter.py',719),
  ('exp -> EXP LPAREN expression RPAREN','exp',4,'p_exp','interpreter.py',724),
  ('log -> LOG LPAREN expression RPAREN','log',4,'p_log','interpreter.py',732),
  ('log -> LN LPAREN expression RPAREN','log',4,'p_log','interpreter.py',733),
  ('int_number -> INT_NUMBER','int_number',1,'p_int_number','interpreter.py',749),
  ('int_number -> TRUE','int_number',1,'p_int_number','interpreter.py',750),
  ('int_number -> FALSE','int_number',1,'p_int_number','interpreter.py',751),
  ('int_number -> ID','int_number',1,'p_int_number','interpreter.py',752),
  ('float_number -> FLOAT_NUMBER','float_number',1,'p_float_number','interpreter.py',769),
  ('float_number -> ID','float_number',1,'p_float_number','interpreter.py',770),
  ('string_number -> STRING_NUMBER','string_number',1,'p_string_number','interpreter.py',783),
]
